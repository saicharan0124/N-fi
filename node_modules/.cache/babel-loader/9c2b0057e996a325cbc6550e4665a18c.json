{"ast":null,"code":"import { React, useEffect, useState } from 'react';\nimport axios from 'axios';\n\nconst {\n  ethers\n} = require(\"ethers\");\n\nconst m_initial3 = async data => {\n  // console.log(data);\n  var date = new Date();\n  const headers = {\n    'Content-Type': 'application/json'\n  };\n  const result = await axios.post('http://localhost:3001/student/fetch/getbyaddress', {\n    \"address\": data.address\n  }, {\n    headers: headers\n  });\n  var date2 = new Date(result.data.result.date);\n\n  if (date.getTime() >= date2.getTime()) {\n    console.log(\"repay-inner\");\n  } else {\n    //metamask\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    await provider.send(\"eth_requestAccounts\", []);\n    const signer = provider.getSigner(); //contract initialization \n\n    const contract = require(\"./abi.json\");\n\n    const mortgage_addr = '0x4324B5414fC2Ba2a0985a8DE7e2B84BF4a0c4189';\n    const mortgage_contract = new ethers.Contract(mortgage_addr, contract.mortgage_abi, signer); //repay function \n\n    const repay = await mortgage_contract.repay(data.address, data.token_id, {\n      value: 0.90 * data.price\n    });\n    const repay_events = await mortgage_contract.on(' MortgageRepaid', (tk_id, frm, ans, time) => {\n      let info = {\n        Tokenid: tk_id,\n        frm: frm,\n        repaid_or_not: ans,\n        time: time\n      };\n      console.log(JSON.stringify(info, null, 4));\n    });\n  }\n\n  console.log(\"repay\");\n};\n\nexport default m_initial3;","map":{"version":3,"sources":["S:/final hackathon/nfi3/src/functions/repay.js"],"names":["React","useEffect","useState","axios","ethers","require","m_initial3","data","date","Date","headers","result","post","address","date2","getTime","console","log","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","mortgage_addr","mortgage_contract","Contract","mortgage_abi","repay","token_id","value","price","repay_events","on","tk_id","frm","ans","time","info","Tokenid","repaid_or_not","JSON","stringify"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;;AACC,MAAM;AAAEC,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAGD,MAAMC,UAAU,GAAC,MAAMC,IAAN,IAAa;AAE5B;AAGA,MAAIC,IAAI,GAAG,IAAIC,IAAJ,EAAX;AAEA,QAAMC,OAAO,GAAG;AACd,oBAAgB;AADF,GAAhB;AAOA,QAAMC,MAAM,GAAG,MAAMR,KAAK,CAACS,IAAN,CACnB,kDADmB,EAEnB;AAEG,eAAUL,IAAI,CAACM;AAFlB,GAFmB,EAOnB;AACEH,IAAAA,OAAO,EAAEA;AADX,GAPmB,CAArB;AAeF,MAAII,KAAK,GAAC,IAAIL,IAAJ,CAASE,MAAM,CAACJ,IAAP,CAAYI,MAAZ,CAAmBH,IAA5B,CAAV;;AAGE,MAAGA,IAAI,CAACO,OAAL,MAAgBD,KAAK,CAACC,OAAN,EAAnB,EAAmC;AAEjCC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAIA,GANF,MAMM;AAGH;AACA,UAAMC,QAAQ,GAAG,IAAId,MAAM,CAACe,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,UAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,UAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf,CANG,CAQP;;AAEE,UAAMC,QAAQ,GAAGrB,OAAO,CAAC,YAAD,CAAxB;;AACA,UAAMsB,aAAa,GAAG,4CAAtB;AACA,UAAMC,iBAAiB,GAAG,IAAIxB,MAAM,CAACyB,QAAX,CAAoBF,aAApB,EAAmCD,QAAQ,CAACI,YAA5C,EAAyDN,MAAzD,CAA1B,CAZK,CAeP;;AACE,UAAMO,KAAK,GAAG,MAAMH,iBAAiB,CAACG,KAAlB,CAAwBxB,IAAI,CAACM,OAA7B,EAAqCN,IAAI,CAACyB,QAA1C,EAAmD;AAACC,MAAAA,KAAK,EAAC,OAAK1B,IAAI,CAAC2B;AAAjB,KAAnD,CAApB;AAEC,UAAMC,YAAY,GAAE,MAAMP,iBAAiB,CAACQ,EAAlB,CAAqB,iBAArB,EAAuC,CAACC,KAAD,EAAOC,GAAP,EAAWC,GAAX,EAAeC,IAAf,KAAsB;AAGtF,UAAIC,IAAI,GAAE;AACRC,QAAAA,OAAO,EAACL,KADA;AAERC,QAAAA,GAAG,EAACA,GAFI;AAGRK,QAAAA,aAAa,EAACJ,GAHN;AAIRC,QAAAA,IAAI,EAACA;AAJG,OAAV;AAOAxB,MAAAA,OAAO,CAACC,GAAR,CAAY2B,IAAI,CAACC,SAAL,CAAeJ,IAAf,EAAoB,IAApB,EAAyB,CAAzB,CAAZ;AACA,KAXyB,CAA1B;AAeD;;AAEDzB,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEC,CA3EH;;AA+EE,eAAeX,UAAf","sourcesContent":["import {React, useEffect, useState} from 'react';\r\n\r\nimport axios from 'axios';\r\n const { ethers } = require(\"ethers\");\r\n\r\n\r\nconst m_initial3=async(data)=>{\r\n\r\n  // console.log(data);\r\n  \r\n\r\n  var date = new Date(); \r\n\r\n  const headers = {\r\n    'Content-Type': 'application/json',      \r\n  };\r\n\r\n\r\n  \r\n  \r\n  const result = await axios.post(\r\n    'http://localhost:3001/student/fetch/getbyaddress',\r\n    {\r\n       \r\n       \"address\":data.address,\r\n         \r\n    },\r\n    {\r\n      headers: headers,\r\n    }\r\n  );\r\n\r\n\r\n  \r\n\r\nvar date2=new Date(result.data.result.date);\r\n\r\n      \r\n  if(date.getTime()>=date2.getTime()){\r\n    \r\n    console.log(\"repay-inner\");       \r\n\r\n\r\n\r\n   }else{\r\n\r\n\r\n     //metamask\r\n     const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n     await provider.send(\"eth_requestAccounts\", []);\r\n     const signer = provider.getSigner()\r\n \r\n //contract initialization \r\n \r\n   const contract = require(\"./abi.json\");\r\n   const mortgage_addr = '0x4324B5414fC2Ba2a0985a8DE7e2B84BF4a0c4189' \r\n   const mortgage_contract = new ethers.Contract(mortgage_addr, contract.mortgage_abi,signer)\r\n \r\n \r\n //repay function \r\n   const repay = await mortgage_contract.repay(data.address,data.token_id,{value:0.90*data.price})\r\n \r\n    const repay_events= await mortgage_contract.on(' MortgageRepaid',(tk_id,frm,ans,time)=>{\r\n \r\n \r\n     let info ={\r\n       Tokenid:tk_id,\r\n       frm:frm,\r\n       repaid_or_not:ans,\r\n       time:time\r\n     }\r\n \r\n     console.log(JSON.stringify(info,null,4))\r\n    })\r\n\r\n\r\n\r\n  }\r\n\r\n  console.log(\"repay\");\r\n  \r\n  }\r\n\r\n  \r\n\r\n  export default m_initial3;"]},"metadata":{},"sourceType":"module"}