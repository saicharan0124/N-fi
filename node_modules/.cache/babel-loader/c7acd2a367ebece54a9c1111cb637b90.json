{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _createSigningData = _interopRequireDefault(require(\"./createSigningData\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* global window */\n\n\nconst INIT_ERROR = 'Could not initialise ledger app, make sure Elrond app is open';\n\nfunction getErdJs() {\n  return MoralisErd.getErdJs();\n}\n\nclass MoralisErd {\n  static getErdJs() {\n    if (typeof window !== 'undefined' && window.erdjs) return window.erdjs;\n    throw new Error('Please add erdjs scripts');\n  }\n\n  static gatewayAddress() {\n    return 'https://gateway.elrond.com';\n  }\n\n  static async hwProxy() {\n    if (MoralisErd._proxy) return MoralisErd._proxy;\n    const {\n      ProxyProvider\n    } = getErdJs();\n    const proxy = new ProxyProvider(MoralisErd.gatewayAddress());\n    MoralisErd._proxy = proxy;\n    return MoralisErd._proxy;\n  }\n\n  static hwProvider() {\n    return MoralisErd._hw;\n  }\n\n  static async enable() {\n    const {\n      HWProvider\n    } = getErdJs();\n    const proxy = await MoralisErd.hwProxy();\n    const hw = new HWProvider(proxy);\n    const success = await hw.init();\n\n    if (!success) {\n      throw new Error(INIT_ERROR);\n    }\n\n    MoralisErd._hw = hw;\n    return hw;\n  }\n\n  static async authenticate() {\n    // const proxy = new ProxyProvider();\n    // const { Transaction } = getErdJs();\n    const hw = await MoralisErd.enable();\n    const address = await hw.login(); // const account = await proxy.getAccount(address);\n\n    const erdAddress = address.toLowerCase();\n    const message = MoralisErd.getSigningData();\n    const data = await (0, _createSigningData.default)(message);\n    const signature = await MoralisErd.sign(data);\n    const user = await _ParseUser.default.logInWith('moralisErd', {\n      authData: {\n        id: erdAddress,\n        signature,\n        data\n      }\n    });\n    if (!user) throw new Error('Could not get user');\n    await user.setACL(new _ParseACL.default(user));\n    user.addAllUnique('erdAccounts', [erdAddress]);\n    user.set('erdAddress', erdAddress);\n    await user.save();\n    return user;\n  }\n\n  static async link(account, options) {\n    const message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisErd.getSigningData();\n    const user = await _ParseUser.default.current();\n    const erdAddress = account.toLowerCase();\n\n    const ErdAddress = _ParseObject.default.extend('_ErdAddress');\n\n    const query = new _ParseQuery.default(ErdAddress);\n    const erdAddressRecord = await query.get(erdAddress).catch(() => null);\n\n    if (!erdAddressRecord) {\n      const data = await (0, _createSigningData.default)(message);\n      const signature = await MoralisErd.sign(data);\n      await user.linkWith('moralisErd', {\n        authData: {\n          id: erdAddress,\n          signature,\n          data\n        }\n      });\n    }\n\n    user.addAllUnique('erdAccounts', [erdAddress]);\n    user.set('erdAddress', erdAddress);\n    await user.save();\n    return user;\n  }\n\n  static async unlink(account) {\n    var _user$get;\n\n    const accountsLower = account.toLowerCase();\n\n    const ErdAddress = _ParseObject.default.extend('_ErdAddress');\n\n    const query = new _ParseQuery.default(ErdAddress);\n    const erdAddressRecord = await query.get(accountsLower);\n    await erdAddressRecord.destroy();\n    const user = await _ParseUser.default.current();\n    const accounts = (_user$get = user.get('erdAccounts')) !== null && _user$get !== void 0 ? _user$get : [];\n    const nextAccounts = accounts.filter(v => v !== accountsLower);\n    user.set('erdAccounts', nextAccounts);\n    user.set('erdAddress', nextAccounts[0]);\n    await user._unlinkFrom('moralisErd');\n    await user.save();\n    return user;\n  }\n\n  static async sign(data) {\n    return data;\n  }\n\n  static getSigningData() {\n    return 'Moralis Authentication';\n  }\n\n}\n\nvar _default = MoralisErd;\nexports.default = _default;","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/moralis/lib/node/MoralisErd.js"],"names":["Object","defineProperty","exports","value","default","_ParseUser","_interopRequireDefault","require","_ParseQuery","_ParseObject","_ParseACL","_createSigningData","obj","__esModule","INIT_ERROR","getErdJs","MoralisErd","window","erdjs","Error","gatewayAddress","hwProxy","_proxy","ProxyProvider","proxy","hwProvider","_hw","enable","HWProvider","hw","success","init","authenticate","address","login","erdAddress","toLowerCase","message","getSigningData","data","signature","sign","user","logInWith","authData","id","setACL","addAllUnique","set","save","link","account","options","signingMessage","current","ErdAddress","extend","query","erdAddressRecord","get","catch","linkWith","unlink","_user$get","accountsLower","destroy","accounts","nextAccounts","filter","v","_unlinkFrom","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _createSigningData = _interopRequireDefault(require(\"./createSigningData\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* global window */\n\n\nconst INIT_ERROR = 'Could not initialise ledger app, make sure Elrond app is open';\n\nfunction getErdJs() {\n  return MoralisErd.getErdJs();\n}\n\nclass MoralisErd {\n  static getErdJs() {\n    if (typeof window !== 'undefined' && window.erdjs) return window.erdjs;\n    throw new Error('Please add erdjs scripts');\n  }\n\n  static gatewayAddress() {\n    return 'https://gateway.elrond.com';\n  }\n\n  static async hwProxy() {\n    if (MoralisErd._proxy) return MoralisErd._proxy;\n    const {\n      ProxyProvider\n    } = getErdJs();\n    const proxy = new ProxyProvider(MoralisErd.gatewayAddress());\n    MoralisErd._proxy = proxy;\n    return MoralisErd._proxy;\n  }\n\n  static hwProvider() {\n    return MoralisErd._hw;\n  }\n\n  static async enable() {\n    const {\n      HWProvider\n    } = getErdJs();\n    const proxy = await MoralisErd.hwProxy();\n    const hw = new HWProvider(proxy);\n    const success = await hw.init();\n\n    if (!success) {\n      throw new Error(INIT_ERROR);\n    }\n\n    MoralisErd._hw = hw;\n    return hw;\n  }\n\n  static async authenticate() {\n    // const proxy = new ProxyProvider();\n    // const { Transaction } = getErdJs();\n    const hw = await MoralisErd.enable();\n    const address = await hw.login(); // const account = await proxy.getAccount(address);\n\n    const erdAddress = address.toLowerCase();\n    const message = MoralisErd.getSigningData();\n    const data = await (0, _createSigningData.default)(message);\n    const signature = await MoralisErd.sign(data);\n    const user = await _ParseUser.default.logInWith('moralisErd', {\n      authData: {\n        id: erdAddress,\n        signature,\n        data\n      }\n    });\n    if (!user) throw new Error('Could not get user');\n    await user.setACL(new _ParseACL.default(user));\n    user.addAllUnique('erdAccounts', [erdAddress]);\n    user.set('erdAddress', erdAddress);\n    await user.save();\n    return user;\n  }\n\n  static async link(account, options) {\n    const message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisErd.getSigningData();\n    const user = await _ParseUser.default.current();\n    const erdAddress = account.toLowerCase();\n\n    const ErdAddress = _ParseObject.default.extend('_ErdAddress');\n\n    const query = new _ParseQuery.default(ErdAddress);\n    const erdAddressRecord = await query.get(erdAddress).catch(() => null);\n\n    if (!erdAddressRecord) {\n      const data = await (0, _createSigningData.default)(message);\n      const signature = await MoralisErd.sign(data);\n      await user.linkWith('moralisErd', {\n        authData: {\n          id: erdAddress,\n          signature,\n          data\n        }\n      });\n    }\n\n    user.addAllUnique('erdAccounts', [erdAddress]);\n    user.set('erdAddress', erdAddress);\n    await user.save();\n    return user;\n  }\n\n  static async unlink(account) {\n    var _user$get;\n\n    const accountsLower = account.toLowerCase();\n\n    const ErdAddress = _ParseObject.default.extend('_ErdAddress');\n\n    const query = new _ParseQuery.default(ErdAddress);\n    const erdAddressRecord = await query.get(accountsLower);\n    await erdAddressRecord.destroy();\n    const user = await _ParseUser.default.current();\n    const accounts = (_user$get = user.get('erdAccounts')) !== null && _user$get !== void 0 ? _user$get : [];\n    const nextAccounts = accounts.filter(v => v !== accountsLower);\n    user.set('erdAccounts', nextAccounts);\n    user.set('erdAddress', nextAccounts[0]);\n    await user._unlinkFrom('moralisErd');\n    await user.save();\n    return user;\n  }\n\n  static async sign(data) {\n    return data;\n  }\n\n  static getSigningData() {\n    return 'Moralis Authentication';\n  }\n\n}\n\nvar _default = MoralisErd;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}