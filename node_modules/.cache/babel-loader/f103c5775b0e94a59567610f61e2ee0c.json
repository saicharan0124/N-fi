{"ast":null,"code":"import m_initial2 from './mortgage';\n\nconst {\n  use,\n  POSClient\n} = require('@maticnetwork/maticjs');\n\nconst {\n  Web3ClientPlugin\n} = require('@maticnetwork/maticjs-ethers');\n\nconst {\n  ethers\n} = require('ethers');\n\nuse(Web3ClientPlugin);\n\nconst initial = async data => {\n  //   console.log(data);\n  const to_address = '0xe18c8bD1f7EcBe80aec6c44E5f5c83B2f8ee1F91'; //need to be declared \n\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  const input = data.owner;\n  const posClient = new POSClient();\n  await posClient.init({\n    network: 'testnet',\n    version: 'mumbai',\n    parent: {\n      provider: signer,\n      defaultConfig: {\n        from: input\n      }\n    },\n    child: {\n      provider: signer,\n      defaultConfig: {\n        from: input\n      }\n    }\n  });\n  const erc721Token = posClient.erc721(data.address);\n  const result = await erc721Token.transfer(data.token_id, data.owner, to_address);\n  const txReceipt = await result.getReceipt();\n  console.log(txReceipt);\n\n  if (txReceipt.status == 1) {\n    console.log(\"transfer completed\");\n  }\n\n  m_initial2(data);\n};\n\nexport default initial;","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/src/functions/approve.js"],"names":["m_initial2","use","POSClient","require","Web3ClientPlugin","ethers","initial","data","to_address","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","input","owner","posClient","init","network","version","parent","defaultConfig","from","child","erc721Token","erc721","address","result","transfer","token_id","txReceipt","getReceipt","console","log","status"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,YAAvB;;AAGA,MAAM;AAACC,EAAAA,GAAD;AAAKC,EAAAA;AAAL,IAAkBC,OAAO,CAAC,uBAAD,CAA/B;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAqBD,OAAO,CAAC,8BAAD,CAAlC;;AACA,MAAM;AAACE,EAAAA;AAAD,IAAWF,OAAO,CAAC,QAAD,CAAxB;;AAGAF,GAAG,CAACG,gBAAD,CAAH;;AAIA,MAAME,OAAO,GAAC,MAAMC,IAAN,IAAa;AAE3B;AAEE,QAAMC,UAAU,GAAC,4CAAjB,CAJyB,CAIsC;;AAE/D,QAAMC,QAAQ,GAAG,IAAIJ,MAAM,CAACK,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACF,QAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,QAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AAEE,QAAMC,KAAK,GAACV,IAAI,CAACW,KAAjB;AACA,QAAMC,SAAS,GAAG,IAAIjB,SAAJ,EAAlB;AACA,QAAMiB,SAAS,CAACC,IAAV,CAAe;AACnBC,IAAAA,OAAO,EAAE,SADU;AAEnBC,IAAAA,OAAO,EAAE,QAFU;AAGnBC,IAAAA,MAAM,EAAE;AACNd,MAAAA,QAAQ,EAAEM,MADJ;AAENS,MAAAA,aAAa,EAAE;AACbC,QAAAA,IAAI,EAAGR;AADM;AAFT,KAHW;AASnBS,IAAAA,KAAK,EAAE;AACLjB,MAAAA,QAAQ,EAACM,MADJ;AAELS,MAAAA,aAAa,EAAE;AACbC,QAAAA,IAAI,EAAER;AADO;AAFV;AATY,GAAf,CAAN;AAkBE,QAAMU,WAAW,GAAGR,SAAS,CAACS,MAAV,CAAiBrB,IAAI,CAACsB,OAAtB,CAApB;AACD,QAAMC,MAAM,GAAE,MAAMH,WAAW,CAACI,QAAZ,CAAqBxB,IAAI,CAACyB,QAA1B,EAAmCzB,IAAI,CAACW,KAAxC,EAA8CV,UAA9C,CAApB;AACC,QAAMyB,SAAS,GAAG,MAAMH,MAAM,CAACI,UAAP,EAAxB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,SAAZ;;AACA,MAAIA,SAAS,CAACI,MAAV,IAAkB,CAAtB,EAAwB;AACvBF,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAEA;;AAEDpC,EAAAA,UAAU,CAACO,IAAD,CAAV;AAKD,CA5CH;;AA6DA,eAAeD,OAAf","sourcesContent":["import m_initial2 from './mortgage';\r\n\r\n\r\nconst {use,POSClient} = require('@maticnetwork/maticjs')\r\nconst {Web3ClientPlugin} = require('@maticnetwork/maticjs-ethers')\r\nconst {ethers} = require('ethers')\r\n\r\n\r\nuse(Web3ClientPlugin);\r\n\r\n\r\n\r\nconst initial=async(data)=>{\r\n\r\n//   console.log(data);\r\n\r\n  const to_address='0xe18c8bD1f7EcBe80aec6c44E5f5c83B2f8ee1F91'  //need to be declared \r\n\r\n  const provider = new ethers.providers.Web3Provider(window.ethereum)\r\nawait provider.send(\"eth_requestAccounts\", []);\r\nconst signer = provider.getSigner()\r\n\r\n  const input=data.owner;\r\n  const posClient = new POSClient();\r\n  await posClient.init({\r\n    network: 'testnet',\r\n    version: 'mumbai',\r\n    parent: {\r\n      provider: signer,\r\n      defaultConfig: {\r\n        from : input\r\n      }\r\n    },\r\n    child: {\r\n      provider:signer,\r\n      defaultConfig: {\r\n        from :input\r\n      }\r\n    }\r\n});\r\n\r\n\r\n    const erc721Token = posClient.erc721(data.address);\r\n   const result= await erc721Token.transfer(data.token_id,data.owner,to_address);\r\n    const txReceipt = await result.getReceipt();\r\n    console.log(txReceipt);\r\n    if( txReceipt.status==1){\r\n     console.log(\"transfer completed\")\r\n   \r\n    }\r\n\r\n    m_initial2(data);\r\n\r\n\r\n  \r\n\r\n  }\r\n \r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n \r\n\r\n\r\n\r\n\r\n\r\nexport default initial;\r\n"]},"metadata":{},"sourceType":"module"}