{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction throttledQueue(maxRequestsPerInterval, interval, evenlySpaced) {\n  if (evenlySpaced === void 0) {\n    evenlySpaced = false;\n  }\n  /**\n   * If all requests should be evenly spaced, adjust to suit.\n   */\n\n\n  if (evenlySpaced) {\n    interval = interval / maxRequestsPerInterval;\n    maxRequestsPerInterval = 1;\n  }\n\n  var queue = [];\n  var lastIntervalStart = 0;\n  var numRequestsPerInterval = 0;\n  var timeout;\n  /**\n   * Gets called at a set interval to remove items from the queue.\n   * This is a self-adjusting timer, since the browser's setTimeout is highly inaccurate.\n   */\n\n  var dequeue = function () {\n    var intervalEnd = lastIntervalStart + interval;\n    var now = Date.now();\n    /**\n     * Adjust the timer if it was called too early.\n     */\n\n    if (now < intervalEnd) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      timeout !== undefined && clearTimeout(timeout);\n      timeout = setTimeout(dequeue, intervalEnd - now);\n      return;\n    }\n\n    lastIntervalStart = now;\n    numRequestsPerInterval = 0;\n\n    for (var _i = 0, _a = queue.splice(0, maxRequestsPerInterval); _i < _a.length; _i++) {\n      var callback = _a[_i];\n      numRequestsPerInterval++;\n      void callback();\n    }\n\n    if (queue.length) {\n      timeout = setTimeout(dequeue, interval);\n    } else {\n      timeout = undefined;\n    }\n  };\n\n  return function (fn) {\n    return new Promise(function (resolve, reject) {\n      var callback = function () {\n        return Promise.resolve().then(fn).then(resolve).catch(reject);\n      };\n\n      var now = Date.now();\n\n      if (timeout === undefined && now - lastIntervalStart > interval) {\n        lastIntervalStart = now;\n        numRequestsPerInterval = 0;\n      }\n\n      if (numRequestsPerInterval++ < maxRequestsPerInterval) {\n        void callback();\n      } else {\n        queue.push(callback);\n\n        if (timeout === undefined) {\n          timeout = setTimeout(dequeue, lastIntervalStart + interval - now);\n        }\n      }\n    });\n  };\n}\n\nmodule.exports = throttledQueue;\nexports.default = throttledQueue;","map":{"version":3,"sources":["../src/throttledQueue.ts"],"names":[],"mappings":";;;;;;AAAA,SAAS,cAAT,CACE,sBADF,EAEE,QAFF,EAGE,YAHF,EAGsB;AAApB,MAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,YAAA,GAAA,KAAA;AAAoB;AAEpB;;AAEG;;;AACH,MAAI,YAAJ,EAAkB;AAChB,IAAA,QAAQ,GAAG,QAAQ,GAAG,sBAAtB;AACA,IAAA,sBAAsB,GAAG,CAAzB;AACD;;AACD,MAAM,KAAK,GAA+B,EAA1C;AACA,MAAI,iBAAiB,GAAG,CAAxB;AACA,MAAI,sBAAsB,GAAG,CAA7B;AACA,MAAI,OAAJ;AACA;;;AAGG;;AACH,MAAM,OAAO,GAAG,YAAA;AACd,QAAM,WAAW,GAAG,iBAAiB,GAAG,QAAxC;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;AACA;;AAEG;;AACH,QAAI,GAAG,GAAG,WAAV,EAAuB;AACrB;AACA,MAAA,OAAO,KAAK,SAAZ,IAAyB,YAAY,CAAC,OAAD,CAArC;AACA,MAAA,OAAO,GAAG,UAAU,CAAC,OAAD,EAAU,WAAW,GAAG,GAAxB,CAApB;AACA;AACD;;AACD,IAAA,iBAAiB,GAAG,GAApB;AACA,IAAA,sBAAsB,GAAG,CAAzB;;AACA,SAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,sBAAhB,CAAvB,EAAuB,EAAA,GAAA,EAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAgE;AAA3D,UAAM,QAAQ,GAAA,EAAA,CAAA,EAAA,CAAd;AACH,MAAA,sBAAsB;AACtB,WAAK,QAAQ,EAAb;AACD;;AACD,QAAI,KAAK,CAAC,MAAV,EAAkB;AAChB,MAAA,OAAO,GAAG,UAAU,CAAC,OAAD,EAAU,QAAV,CAApB;AACD,KAFD,MAEO;AACL,MAAA,OAAO,GAAG,SAAV;AACD;AACF,GAvBD;;AAyBA,SAAO,UAAmB,EAAnB,EAAqD;AAAsB,WAAA,IAAI,OAAJ,CAChF,UAAC,OAAD,EAAU,MAAV,EAAgB;AACd,UAAM,QAAQ,GAAG,YAAA;AAAM,eAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAAuB,EAAvB,EAA2B,IAA3B,CAAgC,OAAhC,EAAyC,KAAzC,CAAA,MAAA,CAAA;AAAsD,OAA7E;;AACA,UAAM,GAAG,GAAG,IAAI,CAAC,GAAL,EAAZ;;AACA,UAAI,OAAO,KAAK,SAAZ,IAA0B,GAAG,GAAG,iBAAP,GAA4B,QAAzD,EAAmE;AACjE,QAAA,iBAAiB,GAAG,GAApB;AACA,QAAA,sBAAsB,GAAG,CAAzB;AACD;;AACD,UAAI,sBAAsB,KAAK,sBAA/B,EAAuD;AACrD,aAAK,QAAQ,EAAb;AACD,OAFD,MAEO;AACL,QAAA,KAAK,CAAC,IAAN,CAAW,QAAX;;AACA,YAAI,OAAO,KAAK,SAAhB,EAA2B;AACzB,UAAA,OAAO,GAAG,UAAU,CAAC,OAAD,EAAU,iBAAiB,GAAG,QAApB,GAA+B,GAAzC,CAApB;AACD;AACF;AAf6E,KAAA,CAAA;AAiBjF,GAjBD;AAkBD;;AACD,MAAM,CAAC,OAAP,GAAiB,cAAjB;AACA,OAAA,CAAA,OAAA,GAAe,cAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction throttledQueue(maxRequestsPerInterval, interval, evenlySpaced) {\n    if (evenlySpaced === void 0) { evenlySpaced = false; }\n    /**\n     * If all requests should be evenly spaced, adjust to suit.\n     */\n    if (evenlySpaced) {\n        interval = interval / maxRequestsPerInterval;\n        maxRequestsPerInterval = 1;\n    }\n    var queue = [];\n    var lastIntervalStart = 0;\n    var numRequestsPerInterval = 0;\n    var timeout;\n    /**\n     * Gets called at a set interval to remove items from the queue.\n     * This is a self-adjusting timer, since the browser's setTimeout is highly inaccurate.\n     */\n    var dequeue = function () {\n        var intervalEnd = lastIntervalStart + interval;\n        var now = Date.now();\n        /**\n         * Adjust the timer if it was called too early.\n         */\n        if (now < intervalEnd) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n            timeout !== undefined && clearTimeout(timeout);\n            timeout = setTimeout(dequeue, intervalEnd - now);\n            return;\n        }\n        lastIntervalStart = now;\n        numRequestsPerInterval = 0;\n        for (var _i = 0, _a = queue.splice(0, maxRequestsPerInterval); _i < _a.length; _i++) {\n            var callback = _a[_i];\n            numRequestsPerInterval++;\n            void callback();\n        }\n        if (queue.length) {\n            timeout = setTimeout(dequeue, interval);\n        }\n        else {\n            timeout = undefined;\n        }\n    };\n    return function (fn) { return new Promise(function (resolve, reject) {\n        var callback = function () { return Promise.resolve().then(fn).then(resolve).catch(reject); };\n        var now = Date.now();\n        if (timeout === undefined && (now - lastIntervalStart) > interval) {\n            lastIntervalStart = now;\n            numRequestsPerInterval = 0;\n        }\n        if (numRequestsPerInterval++ < maxRequestsPerInterval) {\n            void callback();\n        }\n        else {\n            queue.push(callback);\n            if (timeout === undefined) {\n                timeout = setTimeout(dequeue, lastIntervalStart + interval - now);\n            }\n        }\n    }); };\n}\nmodule.exports = throttledQueue;\nexports.default = throttledQueue;\n//# sourceMappingURL=throttledQueue.js.map"]},"metadata":{},"sourceType":"script"}