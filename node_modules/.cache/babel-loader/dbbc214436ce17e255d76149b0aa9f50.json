{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-console */\n\n/* global window */\n\nconst filteredWarnings = [// Optional dependencies, where we handle the dependency check on run-time\n`Module not found: Can't resolve '@walletconnect/web3-provider'`, `Module not found: Can't resolve 'magic-sdk'`, `Module not found: Can't resolve '@web3auth/web3auth'`];\n/**\n * Filters console messages that include text from the blacklist\n */\n\nconst filterConsole = () => {\n  // Filter console.warn\n  const preservedConsoleWarn = console.warn;\n\n  console.warn = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    let value = args ? args[0] : null; // For the current use-cases we only care about the first argument being string\n\n    if (!value || typeof value !== 'string') {\n      return preservedConsoleWarn.apply(console, args);\n    } // Raplace all types of single quotes to one format\n\n\n    value = value.replace('’', \"'\").replace('‘', \"'\").replace('’', \"'\"); // Filter out blacklisted strings\n\n    if (filteredWarnings.filter(filter => value.includes(filter)).length >= 1) {\n      return;\n    } // Otherwise return default function\n\n\n    return preservedConsoleWarn.apply(console, args);\n  };\n};\n\nmodule.exports = {\n  filterConsole\n};","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/moralis/lib/node/filterConsole.js"],"names":["filteredWarnings","filterConsole","preservedConsoleWarn","console","warn","args","value","apply","replace","filter","includes","length","module","exports"],"mappings":"AAAA;AACA;;AAEA;;AAEA,MAAMA,gBAAgB,GAAG,CAAC;AACzB,gEADwB,EAC0C,6CAD1C,EACyF,sDADzF,CAAzB;AAEA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B;AACA,QAAMC,oBAAoB,GAAGC,OAAO,CAACC,IAArC;;AAEAD,EAAAA,OAAO,CAACC,IAAR,GAAe,YAAa;AAAA,sCAATC,IAAS;AAATA,MAAAA,IAAS;AAAA;;AAC1B,QAAIC,KAAK,GAAGD,IAAI,GAAGA,IAAI,CAAC,CAAD,CAAP,GAAa,IAA7B,CAD0B,CACS;;AAEnC,QAAI,CAACC,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC;AACvC,aAAOJ,oBAAoB,CAACK,KAArB,CAA2BJ,OAA3B,EAAoCE,IAApC,CAAP;AACD,KALyB,CAKxB;;;AAGFC,IAAAA,KAAK,GAAGA,KAAK,CAACE,OAAN,CAAc,GAAd,EAAmB,GAAnB,EAAwBA,OAAxB,CAAgC,GAAhC,EAAqC,GAArC,EAA0CA,OAA1C,CAAkD,GAAlD,EAAuD,GAAvD,CAAR,CAR0B,CAQ2C;;AAErE,QAAIR,gBAAgB,CAACS,MAAjB,CAAwBA,MAAM,IAAIH,KAAK,CAACI,QAAN,CAAeD,MAAf,CAAlC,EAA0DE,MAA1D,IAAoE,CAAxE,EAA2E;AACzE;AACD,KAZyB,CAYxB;;;AAGF,WAAOT,oBAAoB,CAACK,KAArB,CAA2BJ,OAA3B,EAAoCE,IAApC,CAAP;AACD,GAhBD;AAiBD,CArBD;;AAuBAO,MAAM,CAACC,OAAP,GAAiB;AACfZ,EAAAA;AADe,CAAjB","sourcesContent":["\"use strict\";\n/* eslint-disable no-console */\n\n/* global window */\n\nconst filteredWarnings = [// Optional dependencies, where we handle the dependency check on run-time\n`Module not found: Can't resolve '@walletconnect/web3-provider'`, `Module not found: Can't resolve 'magic-sdk'`, `Module not found: Can't resolve '@web3auth/web3auth'`];\n/**\n * Filters console messages that include text from the blacklist\n */\n\nconst filterConsole = () => {\n  // Filter console.warn\n  const preservedConsoleWarn = console.warn;\n\n  console.warn = (...args) => {\n    let value = args ? args[0] : null; // For the current use-cases we only care about the first argument being string\n\n    if (!value || typeof value !== 'string') {\n      return preservedConsoleWarn.apply(console, args);\n    } // Raplace all types of single quotes to one format\n\n\n    value = value.replace('’', \"'\").replace('‘', \"'\").replace('’', \"'\"); // Filter out blacklisted strings\n\n    if (filteredWarnings.filter(filter => value.includes(filter)).length >= 1) {\n      return;\n    } // Otherwise return default function\n\n\n    return preservedConsoleWarn.apply(console, args);\n  };\n};\n\nmodule.exports = {\n  filterConsole\n};"]},"metadata":{},"sourceType":"script"}