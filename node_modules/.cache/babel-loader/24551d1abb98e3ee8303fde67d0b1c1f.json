{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.send = send;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions to deal with Push in Parse.\n *\n * @class Parse.Push\n * @static\n * @hideconstructor\n */\n\n/**\n * Sends a push notification.\n * **Available in Cloud Code only.**\n *\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\n *\n * @function send\n * @name Parse.Push.send\n * @param {object} data -  The data of the push notification.  Valid fields\n * are:\n *   <ol>\n *     <li>channels - An Array of channels to push to.</li>\n *     <li>push_time - A Date object for when to send the push.</li>\n *     <li>expiration_time -  A Date object for when to expire\n *         the push.</li>\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\n *         a set of installations to push to.</li>\n *     <li>data - The data to send as part of the push.</li>\n *   <ol>\n * @returns {Promise} A promise that is fulfilled when the push request\n *     completes.\n */\n\n\nfunction send(data\n/*: PushData*/\n)\n/*: Promise*/\n{\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && typeof data.push_time === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && typeof data.expiration_time === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  return _CoreManager.default.getPushController().send(data);\n}\n\nconst DefaultController = {\n  send(data\n  /*: PushData*/\n  ) {\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, {\n      useMasterKey: true\n    });\n  }\n\n};\n\n_CoreManager.default.setPushController(DefaultController);","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/moralis/lib/node/Push.js"],"names":["Object","defineProperty","exports","value","send","_CoreManager","_interopRequireDefault","require","_ParseQuery","obj","__esModule","default","data","where","toJSON","push_time","expiration_time","expiration_interval","Error","getPushController","DefaultController","getRESTController","request","useMasterKey","setPushController"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,IAAR,GAAeA,IAAf;;AAEA,IAAIC,YAAY,GAAGC,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIC,WAAW,GAAGF,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,SAASD,sBAAT,CAAgCG,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACnCE,IAAAA,OAAO,EAAEF;AAD0B,GAArC;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASL,IAAT,CAAcQ;AACd;AADA;AAGA;AACA;AACE,MAAIA,IAAI,CAACC,KAAL,IAAcD,IAAI,CAACC,KAAL,YAAsBL,WAAW,CAACG,OAApD,EAA6D;AAC3DC,IAAAA,IAAI,CAACC,KAAL,GAAaD,IAAI,CAACC,KAAL,CAAWC,MAAX,GAAoBD,KAAjC;AACD;;AAED,MAAID,IAAI,CAACG,SAAL,IAAkB,OAAOH,IAAI,CAACG,SAAZ,KAA0B,QAAhD,EAA0D;AACxDH,IAAAA,IAAI,CAACG,SAAL,GAAiBH,IAAI,CAACG,SAAL,CAAeD,MAAf,EAAjB;AACD;;AAED,MAAIF,IAAI,CAACI,eAAL,IAAwB,OAAOJ,IAAI,CAACI,eAAZ,KAAgC,QAA5D,EAAsE;AACpEJ,IAAAA,IAAI,CAACI,eAAL,GAAuBJ,IAAI,CAACI,eAAL,CAAqBF,MAArB,EAAvB;AACD;;AAED,MAAIF,IAAI,CAACI,eAAL,IAAwBJ,IAAI,CAACK,mBAAjC,EAAsD;AACpD,UAAM,IAAIC,KAAJ,CAAU,6DAAV,CAAN;AACD;;AAED,SAAOb,YAAY,CAACM,OAAb,CAAqBQ,iBAArB,GAAyCf,IAAzC,CAA8CQ,IAA9C,CAAP;AACD;;AAED,MAAMQ,iBAAiB,GAAG;AACxBhB,EAAAA,IAAI,CAACQ;AACL;AADI,IAEF;AACA,WAAOP,YAAY,CAACM,OAAb,CAAqBU,iBAArB,GAAyCC,OAAzC,CAAiD,MAAjD,EAAyD,MAAzD,EAAiEV,IAAjE,EAAuE;AAC5EW,MAAAA,YAAY,EAAE;AAD8D,KAAvE,CAAP;AAGD;;AAPuB,CAA1B;;AAWAlB,YAAY,CAACM,OAAb,CAAqBa,iBAArB,CAAuCJ,iBAAvC","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.send = send;\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow\n */\n\n/**\n * Contains functions to deal with Push in Parse.\n *\n * @class Parse.Push\n * @static\n * @hideconstructor\n */\n\n/**\n * Sends a push notification.\n * **Available in Cloud Code only.**\n *\n * See {@link https://docs.parseplatform.org/js/guide/#push-notifications Push Notification Guide}\n *\n * @function send\n * @name Parse.Push.send\n * @param {object} data -  The data of the push notification.  Valid fields\n * are:\n *   <ol>\n *     <li>channels - An Array of channels to push to.</li>\n *     <li>push_time - A Date object for when to send the push.</li>\n *     <li>expiration_time -  A Date object for when to expire\n *         the push.</li>\n *     <li>expiration_interval - The seconds from now to expire the push.</li>\n *     <li>where - A Parse.Query over Parse.Installation that is used to match\n *         a set of installations to push to.</li>\n *     <li>data - The data to send as part of the push.</li>\n *   <ol>\n * @returns {Promise} A promise that is fulfilled when the push request\n *     completes.\n */\n\n\nfunction send(data\n/*: PushData*/\n)\n/*: Promise*/\n{\n  if (data.where && data.where instanceof _ParseQuery.default) {\n    data.where = data.where.toJSON().where;\n  }\n\n  if (data.push_time && typeof data.push_time === 'object') {\n    data.push_time = data.push_time.toJSON();\n  }\n\n  if (data.expiration_time && typeof data.expiration_time === 'object') {\n    data.expiration_time = data.expiration_time.toJSON();\n  }\n\n  if (data.expiration_time && data.expiration_interval) {\n    throw new Error('expiration_time and expiration_interval cannot both be set.');\n  }\n\n  return _CoreManager.default.getPushController().send(data);\n}\n\nconst DefaultController = {\n  send(data\n  /*: PushData*/\n  ) {\n    return _CoreManager.default.getRESTController().request('POST', 'push', data, {\n      useMasterKey: true\n    });\n  }\n\n};\n\n_CoreManager.default.setPushController(DefaultController);"]},"metadata":{},"sourceType":"script"}