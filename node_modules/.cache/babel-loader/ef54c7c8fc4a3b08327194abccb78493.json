{"ast":null,"code":"const {\n  ethers\n} = require(\"ethers\");\n\nconst getrewards = async lend_id => {\n  //metamask\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  console.log(\"hlo1\"); //contract initialization \n\n  const contract = require(\"./abi.json\");\n\n  const lendpool_addr = '0x184d5C0680cC8AC731F243cCeeB790f9aBeC2f51';\n  const lendpool_contract = new ethers.Contract(lendpool_addr, contract.lendpool_abi, signer);\n  const lendpool_contract_p = new ethers.Contract(lendpool_addr, contract.lendpool_abi, provider); //get interestrewards\n\n  const getInterstReward_fn = await lendpool_contract.getinterestReward(lend_id, {\n    gasLimit: 210000\n  });\n  console.log(getInterstReward_fn); //get rewards emit\n\n  let temp_id;\n  let temp_reward_amount;\n  const getInterstReward_events = await lendpool_contract_p.on('rewardstaken', (lend_id, frm, reward_amount, reward_withdrawn_time) => {\n    let getInterstReward_info = {\n      lend_id: lend_id,\n      frm: frm,\n      reward_amount: reward_amount,\n      reward_withdrawn_time: reward_withdrawn_time\n    };\n    temp_id = getInterstReward_info.lend_id;\n    temp_reward_amount = getInterstReward_info.reward_amount;\n    console.log(getInterstReward_info);\n  });\n  return {\n    id: temp_id,\n    amount: temp_reward_amount\n  };\n};\n\nexport default getrewards;","map":{"version":3,"sources":["S:/final hackathon/nfi3/src/functions/getrewards.js"],"names":["ethers","require","getrewards","lend_id","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","console","log","contract","lendpool_addr","lendpool_contract","Contract","lendpool_abi","lendpool_contract_p","getInterstReward_fn","getinterestReward","gasLimit","temp_id","temp_reward_amount","getInterstReward_events","on","frm","reward_amount","reward_withdrawn_time","getInterstReward_info","id","amount"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAEA,MAAMC,UAAU,GAAC,MAAMC,OAAN,IAAgB;AAE5B;AACA,QAAMC,QAAQ,GAAG,IAAIJ,MAAM,CAACK,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,QAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAP4B,CAU5B;;AAEA,QAAMC,QAAQ,GAAGb,OAAO,CAAC,YAAD,CAAxB;;AACA,QAAMc,aAAa,GAAG,4CAAtB;AACA,QAAMC,iBAAiB,GAAG,IAAIhB,MAAM,CAACiB,QAAX,CAAoBF,aAApB,EAAmCD,QAAQ,CAACI,YAA5C,EAAyDR,MAAzD,CAA1B;AACA,QAAMS,mBAAmB,GAAG,IAAInB,MAAM,CAACiB,QAAX,CAAoBF,aAApB,EAAmCD,QAAQ,CAACI,YAA5C,EAAyDd,QAAzD,CAA5B,CAf4B,CAqBjC;;AACA,QAAMgB,mBAAmB,GAAG,MAAMJ,iBAAiB,CAACK,iBAAlB,CAAoClB,OAApC,EAA4C;AAACmB,IAAAA,QAAQ,EAAE;AAAX,GAA5C,CAAlC;AACAV,EAAAA,OAAO,CAACC,GAAR,CAAYO,mBAAZ,EAvBiC,CAwBjC;;AAEA,MAAIG,OAAJ;AACA,MAAIC,kBAAJ;AAIA,QAAMC,uBAAuB,GAAE,MAAMN,mBAAmB,CAACO,EAApB,CAAuB,cAAvB,EAAsC,CAACvB,OAAD,EAASwB,GAAT,EAAaC,aAAb,EAA2BC,qBAA3B,KAAmD;AAE1H,QAAIC,qBAAqB,GAAE;AACxB3B,MAAAA,OAAO,EAACA,OADgB;AAExBwB,MAAAA,GAAG,EAACA,GAFoB;AAGxBC,MAAAA,aAAa,EAACA,aAHU;AAIxBC,MAAAA,qBAAqB,EAACA;AAJE,KAA3B;AASAN,IAAAA,OAAO,GAACO,qBAAqB,CAAC3B,OAA9B;AACAqB,IAAAA,kBAAkB,GAACM,qBAAqB,CAACF,aAAzC;AAGAhB,IAAAA,OAAO,CAACC,GAAR,CAAYiB,qBAAZ;AAGC,GAlBgC,CAArC;AAsBI,SAAO;AACHC,IAAAA,EAAE,EAACR,OADA;AAEHS,IAAAA,MAAM,EAACR;AAFJ,GAAP;AAQH,CA7DD;;AAgEA,eAAetB,UAAf","sourcesContent":["const { ethers } = require(\"ethers\");\r\n\r\nconst getrewards=async(lend_id)=>{\r\n\r\n     //metamask\r\n     const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n     await provider.send(\"eth_requestAccounts\", []);\r\n     const signer = provider.getSigner()\r\n     \r\n     console.log(\"hlo1\")\r\n     \r\n     \r\n     //contract initialization \r\n     \r\n     const contract = require(\"./abi.json\");\r\n     const lendpool_addr = '0x184d5C0680cC8AC731F243cCeeB790f9aBeC2f51' \r\n     const lendpool_contract = new ethers.Contract(lendpool_addr, contract.lendpool_abi,signer)\r\n     const lendpool_contract_p = new ethers.Contract(lendpool_addr, contract.lendpool_abi,provider)\r\n     \r\n     \r\n\r\n\r\n    \r\n//get interestrewards\r\nconst getInterstReward_fn = await lendpool_contract.getinterestReward(lend_id,{gasLimit: 210000})\r\nconsole.log(getInterstReward_fn)\r\n//get rewards emit\r\n\r\nlet temp_id;\r\nlet temp_reward_amount;\r\n\r\n\r\n\r\nconst getInterstReward_events= await lendpool_contract_p.on('rewardstaken',(lend_id,frm,reward_amount,reward_withdrawn_time)=>{\r\n \r\n    let getInterstReward_info ={\r\n       lend_id:lend_id,\r\n       frm:frm,\r\n       reward_amount:reward_amount,\r\n       reward_withdrawn_time:reward_withdrawn_time,\r\n       \r\n    }\r\n\r\n\r\n    temp_id=getInterstReward_info.lend_id;\r\n    temp_reward_amount=getInterstReward_info.reward_amount;\r\n   \r\n\r\n    console.log(getInterstReward_info)\r\n   \r\n    \r\n    })\r\n\r\n\r\n\r\n    return {\r\n        id:temp_id,\r\n        amount:temp_reward_amount\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default getrewards;"]},"metadata":{},"sourceType":"module"}