{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Automatically generated code, via genSolanaAPI.js\n * Do not modify manually\n */\n\n\nconst axios = require('axios');\n\nclass SolanaApi {\n  // URL will be changed when api is deployed\n  static initialize(_ref) {\n    let {\n      apiKey,\n      serverUrl,\n      Moralis = null\n    } = _ref;\n\n    if (!serverUrl && !apiKey) {\n      throw new Error('SolanaApi.initialize failed: initialize with apiKey or serverUrl');\n    }\n\n    if (apiKey) this.apiKey = apiKey;\n    if (serverUrl) this.serverUrl = serverUrl;\n    this.Moralis = Moralis;\n  }\n\n  static getBody(params, bodyParams) {\n    if (!params || !bodyParams || !bodyParams.length) {\n      return undefined;\n    }\n\n    let body = {};\n    bodyParams.forEach(_ref2 => {\n      let {\n        key,\n        type,\n        required\n      } = _ref2;\n\n      if (params[key] === undefined) {\n        if (required) throw new Error(`param ${key} is required!`);\n      } else if (type === this.BodyParamTypes.setBody) {\n        body = params[key];\n      } else {\n        body[key] = params[key];\n      } // remove the param so it doesn't also get added as a query param\n\n\n      delete params[key];\n    });\n    return body;\n  }\n\n  static getParameterizedUrl(url, params) {\n    if (!Object.keys(params).length) return url; // find url params, they start with :\n\n    const requiredParams = url.split('/').filter(s => s && s.includes(':'));\n    if (!requiredParams.length) return url;\n    let parameterizedUrl = url;\n    requiredParams.forEach(p => {\n      // strip the : and replace with param value\n      const key = p.substr(1);\n      const value = params[key];\n\n      if (!value) {\n        throw new Error(`required param ${key} not provided`);\n      }\n\n      parameterizedUrl = parameterizedUrl.replace(p, value); // remove required param from param list\n      // so it doesn't become part of the query params\n\n      delete params[key];\n    });\n    return parameterizedUrl;\n  }\n\n  static getApiRateLimitInfo(headers) {\n    return {\n      'x-rate-limit-limit': headers['x-rate-limit-limit'],\n      'x-rate-limit-remaining-ttl': headers['x-rate-limit-remaining-ttl'],\n      'x-rate-limit-used': headers['x-rate-limit-used'],\n      'x-rate-limit-remaining-ip-ttl': headers['x-rate-limit-remaining-ip-ttl'],\n      'x-rate-limit-ip-used': headers['x-rate-limit-ip-used']\n    };\n  }\n\n  static getErrorMessage(error, url) {\n    var _error$response, _error$response$data;\n\n    return (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()) || `Solana API error while calling ${url}`;\n  }\n\n  static async fetch(_ref3) {\n    let {\n      endpoint,\n      params: providedParams\n    } = _ref3;\n\n    // Make a shallow copy to prevent modification of original params\n    const params = _objectSpread({}, providedParams);\n\n    if (this.Moralis) {\n      const {\n        User\n      } = this.Moralis;\n      const user = User.current();\n\n      if (!params.address) {\n        if (user) {\n          params.address = user.get('solAddress');\n        }\n      }\n    }\n\n    if (!params.network) params.network = 'mainnet';\n    if (!params.responseType) params.responseType = 'native';\n\n    if (!this.apiKey) {\n      return this.fetchFromServer(endpoint.name, params);\n    }\n\n    return this.fetchFromApi(endpoint, params);\n  }\n\n  static async fetchFromApi(endpoint, params) {\n    const {\n      method = 'GET',\n      url,\n      bodyParams\n    } = endpoint;\n\n    try {\n      const parameterizedUrl = this.getParameterizedUrl(url, params);\n      const body = this.getBody(params, bodyParams);\n      const response = await axios(this.baseURL + parameterizedUrl, {\n        params,\n        method,\n        body,\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          'x-api-key': this.apiKey\n        }\n      }); // Perform type regularization before return depending on response type option\n\n      return response.data;\n    } catch (error) {\n      const {\n        status,\n        headers,\n        data\n      } = error.response;\n      let msg;\n\n      if (status === 429) {\n        msg = `This Moralis Server is rate-limited because of the plan restrictions. See the details about the current rate and throttle limits: ${JSON.stringify(this.getApiRateLimitInfo(headers))}`;\n      } else {\n        msg = this.getApiErrorMessage(error, url);\n      }\n\n      throw new Error(msg);\n    }\n  }\n\n  static async fetchFromServer(name, options) {\n    if (!this.serverUrl) {\n      throw new Error('SolanaAPI not initialized, run Moralis.start() first');\n    }\n\n    try {\n      const http = axios.create({\n        baseURL: this.serverUrl\n      });\n      const user = this.Moralis.User.current();\n\n      if (user) {\n        options._SessionToken = user.attributes.sessionToken;\n        options._ApplicationId = this.Moralis.applicationId;\n      }\n\n      const response = await http.post(`/functions/sol-${name}`, options, {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.result;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n\n      if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error) {\n        throw new Error(error.response.data.error);\n      }\n\n      throw error;\n    }\n  }\n\n}\n\n_defineProperty(SolanaApi, \"baseURL\", 'https://solana-gateway.moralis.io');\n\n_defineProperty(SolanaApi, \"BodyParamTypes\", {\n  setBody: 'set body',\n  property: 'property'\n});\n\n_defineProperty(SolanaApi, \"account\", {\n  balance: async function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return SolanaApi.fetch({\n      endpoint: {\n        \"method\": \"GET\",\n        \"group\": \"account\",\n        \"name\": \"balance\",\n        \"url\": \"/account/:network/:address/balance\"\n      },\n      params: options\n    });\n  },\n  getSPL: async function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return SolanaApi.fetch({\n      endpoint: {\n        \"method\": \"GET\",\n        \"group\": \"account\",\n        \"name\": \"getSPL\",\n        \"url\": \"/account/:network/:address/tokens\"\n      },\n      params: options\n    });\n  },\n  getNFTs: async function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return SolanaApi.fetch({\n      endpoint: {\n        \"method\": \"GET\",\n        \"group\": \"account\",\n        \"name\": \"getNFTs\",\n        \"url\": \"/account/:network/:address/nft\"\n      },\n      params: options\n    });\n  },\n  getPortfolio: async function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return SolanaApi.fetch({\n      endpoint: {\n        \"method\": \"GET\",\n        \"group\": \"account\",\n        \"name\": \"getPortfolio\",\n        \"url\": \"/account/:network/:address/portfolio\"\n      },\n      params: options\n    });\n  }\n});\n\n_defineProperty(SolanaApi, \"nft\", {\n  getNFTMetadata: async function () {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return SolanaApi.fetch({\n      endpoint: {\n        \"method\": \"GET\",\n        \"group\": \"nft\",\n        \"name\": \"getNFTMetadata\",\n        \"url\": \"/nft/:network/:address/metadata\"\n      },\n      params: options\n    });\n  }\n});\n\nvar _default = SolanaApi;\nexports.default = _default;","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/moralis/lib/node/MoralisSolanaApi.js"],"names":["Object","defineProperty","exports","value","default","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","obj","configurable","writable","axios","require","SolanaApi","initialize","apiKey","serverUrl","Moralis","Error","getBody","params","bodyParams","undefined","body","type","required","BodyParamTypes","setBody","getParameterizedUrl","url","requiredParams","split","s","includes","parameterizedUrl","p","substr","replace","getApiRateLimitInfo","headers","getErrorMessage","error","_error$response","_error$response$data","response","data","message","toString","fetch","endpoint","providedParams","User","user","current","address","get","network","responseType","fetchFromServer","name","fetchFromApi","method","baseURL","Accept","status","msg","JSON","stringify","getApiErrorMessage","options","http","create","_SessionToken","attributes","sessionToken","_ApplicationId","applicationId","post","result","_error$response2","_error$response2$data","property","balance","getSPL","getNFTs","getPortfolio","getNFTMetadata","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Automatically generated code, via genSolanaAPI.js\n * Do not modify manually\n */\n\n\nconst axios = require('axios');\n\nclass SolanaApi {\n  // URL will be changed when api is deployed\n  static initialize({\n    apiKey,\n    serverUrl,\n    Moralis = null\n  }) {\n    if (!serverUrl && !apiKey) {\n      throw new Error('SolanaApi.initialize failed: initialize with apiKey or serverUrl');\n    }\n\n    if (apiKey) this.apiKey = apiKey;\n    if (serverUrl) this.serverUrl = serverUrl;\n    this.Moralis = Moralis;\n  }\n\n  static getBody(params, bodyParams) {\n    if (!params || !bodyParams || !bodyParams.length) {\n      return undefined;\n    }\n\n    let body = {};\n    bodyParams.forEach(({\n      key,\n      type,\n      required\n    }) => {\n      if (params[key] === undefined) {\n        if (required) throw new Error(`param ${key} is required!`);\n      } else if (type === this.BodyParamTypes.setBody) {\n        body = params[key];\n      } else {\n        body[key] = params[key];\n      } // remove the param so it doesn't also get added as a query param\n\n\n      delete params[key];\n    });\n    return body;\n  }\n\n  static getParameterizedUrl(url, params) {\n    if (!Object.keys(params).length) return url; // find url params, they start with :\n\n    const requiredParams = url.split('/').filter(s => s && s.includes(':'));\n    if (!requiredParams.length) return url;\n    let parameterizedUrl = url;\n    requiredParams.forEach(p => {\n      // strip the : and replace with param value\n      const key = p.substr(1);\n      const value = params[key];\n\n      if (!value) {\n        throw new Error(`required param ${key} not provided`);\n      }\n\n      parameterizedUrl = parameterizedUrl.replace(p, value); // remove required param from param list\n      // so it doesn't become part of the query params\n\n      delete params[key];\n    });\n    return parameterizedUrl;\n  }\n\n  static getApiRateLimitInfo(headers) {\n    return {\n      'x-rate-limit-limit': headers['x-rate-limit-limit'],\n      'x-rate-limit-remaining-ttl': headers['x-rate-limit-remaining-ttl'],\n      'x-rate-limit-used': headers['x-rate-limit-used'],\n      'x-rate-limit-remaining-ip-ttl': headers['x-rate-limit-remaining-ip-ttl'],\n      'x-rate-limit-ip-used': headers['x-rate-limit-ip-used']\n    };\n  }\n\n  static getErrorMessage(error, url) {\n    var _error$response, _error$response$data;\n\n    return (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || (error === null || error === void 0 ? void 0 : error.message) || (error === null || error === void 0 ? void 0 : error.toString()) || `Solana API error while calling ${url}`;\n  }\n\n  static async fetch({\n    endpoint,\n    params: providedParams\n  }) {\n    // Make a shallow copy to prevent modification of original params\n    const params = _objectSpread({}, providedParams);\n\n    if (this.Moralis) {\n      const {\n        User\n      } = this.Moralis;\n      const user = User.current();\n\n      if (!params.address) {\n        if (user) {\n          params.address = user.get('solAddress');\n        }\n      }\n    }\n\n    if (!params.network) params.network = 'mainnet';\n    if (!params.responseType) params.responseType = 'native';\n\n    if (!this.apiKey) {\n      return this.fetchFromServer(endpoint.name, params);\n    }\n\n    return this.fetchFromApi(endpoint, params);\n  }\n\n  static async fetchFromApi(endpoint, params) {\n    const {\n      method = 'GET',\n      url,\n      bodyParams\n    } = endpoint;\n\n    try {\n      const parameterizedUrl = this.getParameterizedUrl(url, params);\n      const body = this.getBody(params, bodyParams);\n      const response = await axios(this.baseURL + parameterizedUrl, {\n        params,\n        method,\n        body,\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json',\n          'x-api-key': this.apiKey\n        }\n      }); // Perform type regularization before return depending on response type option\n\n      return response.data;\n    } catch (error) {\n      const {\n        status,\n        headers,\n        data\n      } = error.response;\n      let msg;\n\n      if (status === 429) {\n        msg = `This Moralis Server is rate-limited because of the plan restrictions. See the details about the current rate and throttle limits: ${JSON.stringify(this.getApiRateLimitInfo(headers))}`;\n      } else {\n        msg = this.getApiErrorMessage(error, url);\n      }\n\n      throw new Error(msg);\n    }\n  }\n\n  static async fetchFromServer(name, options) {\n    if (!this.serverUrl) {\n      throw new Error('SolanaAPI not initialized, run Moralis.start() first');\n    }\n\n    try {\n      const http = axios.create({\n        baseURL: this.serverUrl\n      });\n      const user = this.Moralis.User.current();\n\n      if (user) {\n        options._SessionToken = user.attributes.sessionToken;\n        options._ApplicationId = this.Moralis.applicationId;\n      }\n\n      const response = await http.post(`/functions/sol-${name}`, options, {\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.data.result;\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n\n      if ((_error$response2 = error.response) !== null && _error$response2 !== void 0 && (_error$response2$data = _error$response2.data) !== null && _error$response2$data !== void 0 && _error$response2$data.error) {\n        throw new Error(error.response.data.error);\n      }\n\n      throw error;\n    }\n  }\n\n}\n\n_defineProperty(SolanaApi, \"baseURL\", 'https://solana-gateway.moralis.io');\n\n_defineProperty(SolanaApi, \"BodyParamTypes\", {\n  setBody: 'set body',\n  property: 'property'\n});\n\n_defineProperty(SolanaApi, \"account\", {\n  balance: async (options = {}) => SolanaApi.fetch({\n    endpoint: {\n      \"method\": \"GET\",\n      \"group\": \"account\",\n      \"name\": \"balance\",\n      \"url\": \"/account/:network/:address/balance\"\n    },\n    params: options\n  }),\n  getSPL: async (options = {}) => SolanaApi.fetch({\n    endpoint: {\n      \"method\": \"GET\",\n      \"group\": \"account\",\n      \"name\": \"getSPL\",\n      \"url\": \"/account/:network/:address/tokens\"\n    },\n    params: options\n  }),\n  getNFTs: async (options = {}) => SolanaApi.fetch({\n    endpoint: {\n      \"method\": \"GET\",\n      \"group\": \"account\",\n      \"name\": \"getNFTs\",\n      \"url\": \"/account/:network/:address/nft\"\n    },\n    params: options\n  }),\n  getPortfolio: async (options = {}) => SolanaApi.fetch({\n    endpoint: {\n      \"method\": \"GET\",\n      \"group\": \"account\",\n      \"name\": \"getPortfolio\",\n      \"url\": \"/account/:network/:address/portfolio\"\n    },\n    params: options\n  })\n});\n\n_defineProperty(SolanaApi, \"nft\", {\n  getNFTMetadata: async (options = {}) => SolanaApi.fetch({\n    endpoint: {\n      \"method\": \"GET\",\n      \"group\": \"nft\",\n      \"name\": \"getNFTMetadata\",\n      \"url\": \"/nft/:network/:address/metadata\"\n    },\n    params: options\n  })\n});\n\nvar _default = SolanaApi;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}