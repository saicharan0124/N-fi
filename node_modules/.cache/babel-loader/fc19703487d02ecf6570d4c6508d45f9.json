{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = _interopRequireDefault(require(\"events\"));\n\nvar _verifyChainId = _interopRequireDefault(require(\"../utils/verifyChainId\"));\n\nvar _events2 = require(\"./events\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Abstract connector to connect EIP-1193 providers to Moralis\n *\n * It should implement at least:\n * - activate()\n * - Emit ConnectorEvent.CHAIN_CHANGED when the chain has changed (if possible)\n * - Emit ConnectorEvent.ACCOUNT_CHANGED when the account has changed (if possible)\n * - type: a name to identify\n * - network: the network type that is used (eg. 'evm')\n */\n\n\nclass AbstractWeb3Connector extends _events.default {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"type\", 'abstract');\n\n    _defineProperty(this, \"network\", 'evm');\n\n    _defineProperty(this, \"account\", null);\n\n    _defineProperty(this, \"chainId\", null);\n\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this);\n    this.handleChainChanged = this.handleChainChanged.bind(this);\n    this.handleConnect = this.handleConnect.bind(this);\n    this.handleDisconnect = this.handleDisconnect.bind(this);\n  }\n\n  subscribeToEvents(provider) {\n    if (provider && provider.on) {\n      provider.on(_events2.EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);\n      provider.on(_events2.EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);\n      provider.on(_events2.EthereumEvents.CONNECT, this.handleConnect);\n      provider.on(_events2.EthereumEvents.DISCONNECT, this.handleDisconnect);\n    }\n  }\n\n  unsubscribeToEvents(provider) {\n    if (provider && provider.removeListener) {\n      provider.removeListener(_events2.EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);\n      provider.removeListener(_events2.EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);\n      provider.removeListener(_events2.EthereumEvents.CONNECT, this.handleConnect);\n      provider.removeListener(_events2.EthereumEvents.DISCONNECT, this.handleDisconnect);\n    }\n  }\n  /**\n   * Activates the provider.\n   * Should returns an object with:\n   * - provider: A valid EIP-1193 provider\n   * - chainId(optional): the chainId that has been connected to (in hex format)\n   * - account(optional): the address that is connected to the provider\n   */\n\n\n  async activate() {\n    throw new Error('Not implemented: activate()');\n  }\n  /**\n   * Updates account and emit event, on EIP-1193 accountsChanged events\n   */\n\n\n  handleAccountsChanged(accounts) {\n    const account = accounts && accounts[0] ? accounts[0].toLowerCase() : null;\n    this.account = account;\n    this.emit(_events2.ConnectorEvents.ACCOUNT_CHANGED, account);\n  }\n  /**\n   * Updates chainId and emit event, on EIP-1193 accountsChanged events\n   */\n\n\n  handleChainChanged(chainId) {\n    const newChainId = (0, _verifyChainId.default)(chainId);\n    this.chainId = newChainId;\n    this.emit(_events2.ConnectorEvents.CHAIN_CHANGED, newChainId);\n  }\n\n  handleConnect(connectInfo) {\n    this.emit(_events2.ConnectorEvents.CONNECT, connectInfo);\n  }\n\n  handleDisconnect(error) {\n    this.emit(_events2.ConnectorEvents.DISCONNECT, error);\n  }\n  /**\n   * Cleans all active listners, connections and stale references\n   */\n\n\n  async deactivate() {\n    this.unsubscribeToEvents(this.provider);\n    this.account = null;\n    this.chainId = null;\n  }\n\n}\n\nvar _default = AbstractWeb3Connector;\nexports.default = _default;","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/moralis/lib/node/Web3Connector/AbstractWeb3Connector.js"],"names":["Object","defineProperty","exports","value","default","_events","_interopRequireDefault","require","_verifyChainId","_events2","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","AbstractWeb3Connector","constructor","handleAccountsChanged","bind","handleChainChanged","handleConnect","handleDisconnect","subscribeToEvents","provider","on","EthereumEvents","CHAIN_CHANGED","ACCOUNTS_CHANGED","CONNECT","DISCONNECT","unsubscribeToEvents","removeListener","activate","Error","accounts","account","toLowerCase","emit","ConnectorEvents","ACCOUNT_CHANGED","chainId","newChainId","connectInfo","error","deactivate","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _events = _interopRequireDefault(require(\"events\"));\n\nvar _verifyChainId = _interopRequireDefault(require(\"../utils/verifyChainId\"));\n\nvar _events2 = require(\"./events\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Abstract connector to connect EIP-1193 providers to Moralis\n *\n * It should implement at least:\n * - activate()\n * - Emit ConnectorEvent.CHAIN_CHANGED when the chain has changed (if possible)\n * - Emit ConnectorEvent.ACCOUNT_CHANGED when the account has changed (if possible)\n * - type: a name to identify\n * - network: the network type that is used (eg. 'evm')\n */\n\n\nclass AbstractWeb3Connector extends _events.default {\n  constructor() {\n    super();\n\n    _defineProperty(this, \"type\", 'abstract');\n\n    _defineProperty(this, \"network\", 'evm');\n\n    _defineProperty(this, \"account\", null);\n\n    _defineProperty(this, \"chainId\", null);\n\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this);\n    this.handleChainChanged = this.handleChainChanged.bind(this);\n    this.handleConnect = this.handleConnect.bind(this);\n    this.handleDisconnect = this.handleDisconnect.bind(this);\n  }\n\n  subscribeToEvents(provider) {\n    if (provider && provider.on) {\n      provider.on(_events2.EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);\n      provider.on(_events2.EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);\n      provider.on(_events2.EthereumEvents.CONNECT, this.handleConnect);\n      provider.on(_events2.EthereumEvents.DISCONNECT, this.handleDisconnect);\n    }\n  }\n\n  unsubscribeToEvents(provider) {\n    if (provider && provider.removeListener) {\n      provider.removeListener(_events2.EthereumEvents.CHAIN_CHANGED, this.handleChainChanged);\n      provider.removeListener(_events2.EthereumEvents.ACCOUNTS_CHANGED, this.handleAccountsChanged);\n      provider.removeListener(_events2.EthereumEvents.CONNECT, this.handleConnect);\n      provider.removeListener(_events2.EthereumEvents.DISCONNECT, this.handleDisconnect);\n    }\n  }\n  /**\n   * Activates the provider.\n   * Should returns an object with:\n   * - provider: A valid EIP-1193 provider\n   * - chainId(optional): the chainId that has been connected to (in hex format)\n   * - account(optional): the address that is connected to the provider\n   */\n\n\n  async activate() {\n    throw new Error('Not implemented: activate()');\n  }\n  /**\n   * Updates account and emit event, on EIP-1193 accountsChanged events\n   */\n\n\n  handleAccountsChanged(accounts) {\n    const account = accounts && accounts[0] ? accounts[0].toLowerCase() : null;\n    this.account = account;\n    this.emit(_events2.ConnectorEvents.ACCOUNT_CHANGED, account);\n  }\n  /**\n   * Updates chainId and emit event, on EIP-1193 accountsChanged events\n   */\n\n\n  handleChainChanged(chainId) {\n    const newChainId = (0, _verifyChainId.default)(chainId);\n    this.chainId = newChainId;\n    this.emit(_events2.ConnectorEvents.CHAIN_CHANGED, newChainId);\n  }\n\n  handleConnect(connectInfo) {\n    this.emit(_events2.ConnectorEvents.CONNECT, connectInfo);\n  }\n\n  handleDisconnect(error) {\n    this.emit(_events2.ConnectorEvents.DISCONNECT, error);\n  }\n  /**\n   * Cleans all active listners, connections and stale references\n   */\n\n\n  async deactivate() {\n    this.unsubscribeToEvents(this.provider);\n    this.account = null;\n    this.chainId = null;\n  }\n\n}\n\nvar _default = AbstractWeb3Connector;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}