{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Creates a new Relation for the given parent object and key. This\n * constructor should rarely be used directly, but rather created by\n * Parse.Object.relation.\n *\n * <p>\n * A class that is used to access all of the children of a many-to-many\n * relationship.  Each instance of Parse.Relation is associated with a\n * particular parent object and key.\n * </p>\n *\n * @alias Parse.Relation\n */\n\n\nclass ParseRelation {\n  /**\n   * @param {Parse.Object} parent The parent of this relation.\n   * @param {string} key The key for this relation on the parent.\n   */\n  constructor(parent\n  /*: ?ParseObject*/\n  , key\n  /*: ?string*/\n  ) {\n    _defineProperty(this, \"parent\", void 0);\n\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"targetClassName\", void 0);\n\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n  /*\n   * Makes sure that this relation has the right parent and key.\n   */\n\n\n  _ensureParentAndKey(parent\n  /*: ParseObject*/\n  , key\n  /*: string*/\n  ) {\n    this.key = this.key || key;\n\n    if (this.key !== key) {\n      throw new Error('Internal Error. Relation retrieved from two different keys.');\n    }\n\n    if (this.parent) {\n      if (this.parent.className !== parent.className) {\n        throw new Error('Internal Error. Relation retrieved from two different Objects.');\n      }\n\n      if (this.parent.id) {\n        if (this.parent.id !== parent.id) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n      } else if (parent.id) {\n        this.parent = parent;\n      }\n    } else {\n      this.parent = parent;\n    }\n  }\n  /**\n   * Adds a Parse.Object or an array of Parse.Objects to the relation.\n   *\n   * @param {(Parse.Object|Array)} objects The item or items to add.\n   * @returns {Parse.Object} The parent of the relation.\n   */\n\n\n  add(objects\n  /*: ParseObject | Array<ParseObject | string>*/\n  )\n  /*: ParseObject*/\n  {\n    if (!Array.isArray(objects)) {\n      objects = [objects];\n    }\n\n    const change = new _ParseOp.RelationOp(objects, []);\n    const {\n      parent\n    } = this;\n\n    if (!parent) {\n      throw new Error('Cannot add to a Relation without a parent');\n    }\n\n    if (objects.length === 0) {\n      return parent;\n    }\n\n    parent.set(this.key, change);\n    this.targetClassName = change._targetClassName;\n    return parent;\n  }\n  /**\n   * Removes a Parse.Object or an array of Parse.Objects from this relation.\n   *\n   * @param {(Parse.Object|Array)} objects The item or items to remove.\n   */\n\n\n  remove(objects\n  /*: ParseObject | Array<ParseObject | string>*/\n  ) {\n    if (!Array.isArray(objects)) {\n      objects = [objects];\n    }\n\n    const change = new _ParseOp.RelationOp([], objects);\n\n    if (!this.parent) {\n      throw new Error('Cannot remove from a Relation without a parent');\n    }\n\n    if (objects.length === 0) {\n      return;\n    }\n\n    this.parent.set(this.key, change);\n    this.targetClassName = change._targetClassName;\n  }\n  /**\n   * Returns a JSON version of the object suitable for saving to disk.\n   *\n   * @returns {object} JSON representation of Relation\n   */\n\n\n  toJSON()\n  /*: { __type: 'Relation', className: ?string }*/\n  {\n    return {\n      __type: 'Relation',\n      className: this.targetClassName\n    };\n  }\n  /**\n   * Returns a Parse.Query that is limited to objects in this\n   * relation.\n   *\n   * @returns {Parse.Query} Relation Query\n   */\n\n\n  query()\n  /*: ParseQuery*/\n  {\n    let query;\n    const {\n      parent\n    } = this;\n\n    if (!parent) {\n      throw new Error('Cannot construct a query for a Relation without a parent');\n    }\n\n    if (!this.targetClassName) {\n      query = new _ParseQuery.default(parent.className);\n      query._extraOptions.redirectClassNameForKey = this.key;\n    } else {\n      query = new _ParseQuery.default(this.targetClassName);\n    }\n\n    query._addCondition('$relatedTo', 'object', {\n      __type: 'Pointer',\n      className: parent.className,\n      objectId: parent.id\n    });\n\n    query._addCondition('$relatedTo', 'key', this.key);\n\n    return query;\n  }\n\n}\n\nvar _default = ParseRelation;\nexports.default = _default;","map":{"version":3,"sources":["S:/final hackathon/nfi3/node_modules/moralis/lib/node/ParseRelation.js"],"names":["Object","defineProperty","exports","value","default","_ParseOp","require","_ParseObject","_interopRequireDefault","_ParseQuery","obj","__esModule","_defineProperty","key","enumerable","configurable","writable","ParseRelation","constructor","parent","targetClassName","_ensureParentAndKey","Error","className","id","add","objects","Array","isArray","change","RelationOp","length","set","_targetClassName","remove","toJSON","__type","query","_extraOptions","redirectClassNameForKey","_addCondition","objectId","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIC,YAAY,GAAGC,sBAAsB,CAACF,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIG,WAAW,GAAGD,sBAAsB,CAACF,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,SAASE,sBAAT,CAAgCE,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACnCN,IAAAA,OAAO,EAAEM;AAD0B,GAArC;AAGD;;AAED,SAASE,eAAT,CAAyBF,GAAzB,EAA8BG,GAA9B,EAAmCV,KAAnC,EAA0C;AACxC,MAAIU,GAAG,IAAIH,GAAX,EAAgB;AACdV,IAAAA,MAAM,CAACC,cAAP,CAAsBS,GAAtB,EAA2BG,GAA3B,EAAgC;AAC9BV,MAAAA,KAAK,EAAEA,KADuB;AAE9BW,MAAAA,UAAU,EAAE,IAFkB;AAG9BC,MAAAA,YAAY,EAAE,IAHgB;AAI9BC,MAAAA,QAAQ,EAAE;AAJoB,KAAhC;AAMD,GAPD,MAOO;AACLN,IAAAA,GAAG,CAACG,GAAD,CAAH,GAAWV,KAAX;AACD;;AAED,SAAOO,GAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAMO,aAAN,CAAoB;AAClB;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAACC;AACZ;AADW,IAETN;AACF;AAHW,IAIT;AACAD,IAAAA,eAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,KAAP,EAAc,KAAK,CAAnB,CAAf;;AAEAA,IAAAA,eAAe,CAAC,IAAD,EAAO,iBAAP,EAA0B,KAAK,CAA/B,CAAf;;AAEA,SAAKO,MAAL,GAAcA,MAAd;AACA,SAAKN,GAAL,GAAWA,GAAX;AACA,SAAKO,eAAL,GAAuB,IAAvB;AACD;AACD;AACF;AACA;;;AAGEC,EAAAA,mBAAmB,CAACF;AACpB;AADmB,IAEjBN;AACF;AAHmB,IAIjB;AACA,SAAKA,GAAL,GAAW,KAAKA,GAAL,IAAYA,GAAvB;;AAEA,QAAI,KAAKA,GAAL,KAAaA,GAAjB,EAAsB;AACpB,YAAM,IAAIS,KAAJ,CAAU,6DAAV,CAAN;AACD;;AAED,QAAI,KAAKH,MAAT,EAAiB;AACf,UAAI,KAAKA,MAAL,CAAYI,SAAZ,KAA0BJ,MAAM,CAACI,SAArC,EAAgD;AAC9C,cAAM,IAAID,KAAJ,CAAU,gEAAV,CAAN;AACD;;AAED,UAAI,KAAKH,MAAL,CAAYK,EAAhB,EAAoB;AAClB,YAAI,KAAKL,MAAL,CAAYK,EAAZ,KAAmBL,MAAM,CAACK,EAA9B,EAAkC;AAChC,gBAAM,IAAIF,KAAJ,CAAU,gEAAV,CAAN;AACD;AACF,OAJD,MAIO,IAAIH,MAAM,CAACK,EAAX,EAAe;AACpB,aAAKL,MAAL,GAAcA,MAAd;AACD;AACF,KAZD,MAYO;AACL,WAAKA,MAAL,GAAcA,MAAd;AACD;AACF;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGEM,EAAAA,GAAG,CAACC;AACJ;AADG;AAGH;AACA;AACE,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EAA6B;AAC3BA,MAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AAED,UAAMG,MAAM,GAAG,IAAIxB,QAAQ,CAACyB,UAAb,CAAwBJ,OAAxB,EAAiC,EAAjC,CAAf;AACA,UAAM;AACJP,MAAAA;AADI,QAEF,IAFJ;;AAIA,QAAI,CAACA,MAAL,EAAa;AACX,YAAM,IAAIG,KAAJ,CAAU,2CAAV,CAAN;AACD;;AAED,QAAII,OAAO,CAACK,MAAR,KAAmB,CAAvB,EAA0B;AACxB,aAAOZ,MAAP;AACD;;AAEDA,IAAAA,MAAM,CAACa,GAAP,CAAW,KAAKnB,GAAhB,EAAqBgB,MAArB;AACA,SAAKT,eAAL,GAAuBS,MAAM,CAACI,gBAA9B;AACA,WAAOd,MAAP;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEe,EAAAA,MAAM,CAACR;AACP;AADM,IAEJ;AACA,QAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,OAAd,CAAL,EAA6B;AAC3BA,MAAAA,OAAO,GAAG,CAACA,OAAD,CAAV;AACD;;AAED,UAAMG,MAAM,GAAG,IAAIxB,QAAQ,CAACyB,UAAb,CAAwB,EAAxB,EAA4BJ,OAA5B,CAAf;;AAEA,QAAI,CAAC,KAAKP,MAAV,EAAkB;AAChB,YAAM,IAAIG,KAAJ,CAAU,gDAAV,CAAN;AACD;;AAED,QAAII,OAAO,CAACK,MAAR,KAAmB,CAAvB,EAA0B;AACxB;AACD;;AAED,SAAKZ,MAAL,CAAYa,GAAZ,CAAgB,KAAKnB,GAArB,EAA0BgB,MAA1B;AACA,SAAKT,eAAL,GAAuBS,MAAM,CAACI,gBAA9B;AACD;AACD;AACF;AACA;AACA;AACA;;;AAGEE,EAAAA,MAAM;AACN;AACA;AACE,WAAO;AACLC,MAAAA,MAAM,EAAE,UADH;AAELb,MAAAA,SAAS,EAAE,KAAKH;AAFX,KAAP;AAID;AACD;AACF;AACA;AACA;AACA;AACA;;;AAGEiB,EAAAA,KAAK;AACL;AACA;AACE,QAAIA,KAAJ;AACA,UAAM;AACJlB,MAAAA;AADI,QAEF,IAFJ;;AAIA,QAAI,CAACA,MAAL,EAAa;AACX,YAAM,IAAIG,KAAJ,CAAU,0DAAV,CAAN;AACD;;AAED,QAAI,CAAC,KAAKF,eAAV,EAA2B;AACzBiB,MAAAA,KAAK,GAAG,IAAI5B,WAAW,CAACL,OAAhB,CAAwBe,MAAM,CAACI,SAA/B,CAAR;AACAc,MAAAA,KAAK,CAACC,aAAN,CAAoBC,uBAApB,GAA8C,KAAK1B,GAAnD;AACD,KAHD,MAGO;AACLwB,MAAAA,KAAK,GAAG,IAAI5B,WAAW,CAACL,OAAhB,CAAwB,KAAKgB,eAA7B,CAAR;AACD;;AAEDiB,IAAAA,KAAK,CAACG,aAAN,CAAoB,YAApB,EAAkC,QAAlC,EAA4C;AAC1CJ,MAAAA,MAAM,EAAE,SADkC;AAE1Cb,MAAAA,SAAS,EAAEJ,MAAM,CAACI,SAFwB;AAG1CkB,MAAAA,QAAQ,EAAEtB,MAAM,CAACK;AAHyB,KAA5C;;AAMAa,IAAAA,KAAK,CAACG,aAAN,CAAoB,YAApB,EAAkC,KAAlC,EAAyC,KAAK3B,GAA9C;;AAEA,WAAOwB,KAAP;AACD;;AApKiB;;AAwKpB,IAAIK,QAAQ,GAAGzB,aAAf;AACAf,OAAO,CAACE,OAAR,GAAkBsC,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Creates a new Relation for the given parent object and key. This\n * constructor should rarely be used directly, but rather created by\n * Parse.Object.relation.\n *\n * <p>\n * A class that is used to access all of the children of a many-to-many\n * relationship.  Each instance of Parse.Relation is associated with a\n * particular parent object and key.\n * </p>\n *\n * @alias Parse.Relation\n */\n\n\nclass ParseRelation {\n  /**\n   * @param {Parse.Object} parent The parent of this relation.\n   * @param {string} key The key for this relation on the parent.\n   */\n  constructor(parent\n  /*: ?ParseObject*/\n  , key\n  /*: ?string*/\n  ) {\n    _defineProperty(this, \"parent\", void 0);\n\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"targetClassName\", void 0);\n\n    this.parent = parent;\n    this.key = key;\n    this.targetClassName = null;\n  }\n  /*\n   * Makes sure that this relation has the right parent and key.\n   */\n\n\n  _ensureParentAndKey(parent\n  /*: ParseObject*/\n  , key\n  /*: string*/\n  ) {\n    this.key = this.key || key;\n\n    if (this.key !== key) {\n      throw new Error('Internal Error. Relation retrieved from two different keys.');\n    }\n\n    if (this.parent) {\n      if (this.parent.className !== parent.className) {\n        throw new Error('Internal Error. Relation retrieved from two different Objects.');\n      }\n\n      if (this.parent.id) {\n        if (this.parent.id !== parent.id) {\n          throw new Error('Internal Error. Relation retrieved from two different Objects.');\n        }\n      } else if (parent.id) {\n        this.parent = parent;\n      }\n    } else {\n      this.parent = parent;\n    }\n  }\n  /**\n   * Adds a Parse.Object or an array of Parse.Objects to the relation.\n   *\n   * @param {(Parse.Object|Array)} objects The item or items to add.\n   * @returns {Parse.Object} The parent of the relation.\n   */\n\n\n  add(objects\n  /*: ParseObject | Array<ParseObject | string>*/\n  )\n  /*: ParseObject*/\n  {\n    if (!Array.isArray(objects)) {\n      objects = [objects];\n    }\n\n    const change = new _ParseOp.RelationOp(objects, []);\n    const {\n      parent\n    } = this;\n\n    if (!parent) {\n      throw new Error('Cannot add to a Relation without a parent');\n    }\n\n    if (objects.length === 0) {\n      return parent;\n    }\n\n    parent.set(this.key, change);\n    this.targetClassName = change._targetClassName;\n    return parent;\n  }\n  /**\n   * Removes a Parse.Object or an array of Parse.Objects from this relation.\n   *\n   * @param {(Parse.Object|Array)} objects The item or items to remove.\n   */\n\n\n  remove(objects\n  /*: ParseObject | Array<ParseObject | string>*/\n  ) {\n    if (!Array.isArray(objects)) {\n      objects = [objects];\n    }\n\n    const change = new _ParseOp.RelationOp([], objects);\n\n    if (!this.parent) {\n      throw new Error('Cannot remove from a Relation without a parent');\n    }\n\n    if (objects.length === 0) {\n      return;\n    }\n\n    this.parent.set(this.key, change);\n    this.targetClassName = change._targetClassName;\n  }\n  /**\n   * Returns a JSON version of the object suitable for saving to disk.\n   *\n   * @returns {object} JSON representation of Relation\n   */\n\n\n  toJSON()\n  /*: { __type: 'Relation', className: ?string }*/\n  {\n    return {\n      __type: 'Relation',\n      className: this.targetClassName\n    };\n  }\n  /**\n   * Returns a Parse.Query that is limited to objects in this\n   * relation.\n   *\n   * @returns {Parse.Query} Relation Query\n   */\n\n\n  query()\n  /*: ParseQuery*/\n  {\n    let query;\n    const {\n      parent\n    } = this;\n\n    if (!parent) {\n      throw new Error('Cannot construct a query for a Relation without a parent');\n    }\n\n    if (!this.targetClassName) {\n      query = new _ParseQuery.default(parent.className);\n      query._extraOptions.redirectClassNameForKey = this.key;\n    } else {\n      query = new _ParseQuery.default(this.targetClassName);\n    }\n\n    query._addCondition('$relatedTo', 'object', {\n      __type: 'Pointer',\n      className: parent.className,\n      objectId: parent.id\n    });\n\n    query._addCondition('$relatedTo', 'key', this.key);\n\n    return query;\n  }\n\n}\n\nvar _default = ParseRelation;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}