{"ast":null,"code":"/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\nimport http from 'http';\nimport https from 'https';\nimport zlib from 'zlib';\nimport fs from 'fs';\nimport * as mime from 'mrmime';\nimport dataUriToBuffer from 'data-uri-to-buffer';\nimport { writeToStream, fromAsyncIterable } from './body.js';\nimport Response from './response.js';\nimport Headers, { fromRawHeaders } from './headers.js';\nimport Request, { getNodeRequestOptions } from './request.js';\nimport { FetchError } from './errors/fetch-error.js';\nimport { AbortError } from './errors/abort-error.js';\nimport { isRedirect } from './utils/is-redirect.js';\nimport { pipeline as pump, PassThrough } from 'stream';\nimport * as Stream from 'stream';\nimport { ReadableStream, Blob, FormData } from './package.js';\nexport { Headers, Request, Response, ReadableStream, Blob, FormData };\nconst supportedSchemas = new Set(['data:', 'http:', 'https:', 'file:']);\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {RequestInit} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\n\nasync function fetch(url) {\n  let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise((resolve, reject) => {\n    // Build request object\n    const request = new Request(url, options_);\n    const options = getNodeRequestOptions(request);\n\n    if (!supportedSchemas.has(options.protocol)) {\n      throw new TypeError(`node-fetch cannot load ${url}. URL scheme \"${options.protocol.replace(/:$/, '')}\" is not supported.`);\n    }\n\n    if (options.protocol === 'data:') {\n      const data = dataUriToBuffer(request.url.toString());\n      const response = new Response(data, {\n        headers: {\n          'Content-Type': data.typeFull\n        }\n      });\n      resolve(response);\n      return;\n    }\n\n    if (options.protocol === 'file:') {\n      const stream = fs.createReadStream(new URL(request.url));\n      const type = mime.lookup(request.url) || 'application/octet-stream';\n      const response = new Response(stream, {\n        headers: {\n          'Content-Type': type\n        }\n      });\n      resolve(response);\n      return;\n    } // Wrap http.request into fetch\n\n\n    const send = (options.protocol === 'https:' ? https : http).request;\n    const {\n      signal\n    } = request;\n    /** @type {Response|null} */\n\n    let response = null;\n    /** @type {import('http').IncomingMessage|null} */\n\n    let response_ = null;\n\n    const abort = () => {\n      const error = new AbortError('The operation was aborted.');\n      reject(error);\n\n      if (request.body) {\n        request.body.cancel(error);\n      }\n\n      if (!response_) {\n        return;\n      }\n\n      response_.emit('error', error);\n    };\n\n    if (signal && signal.aborted) {\n      abort();\n      return;\n    }\n\n    const abortAndFinalize = () => {\n      abort();\n      finalize();\n    }; // Send request\n\n\n    const request_ = send(options);\n\n    if (signal) {\n      signal.addEventListener('abort', abortAndFinalize);\n    }\n\n    const finalize = () => {\n      request_.abort();\n\n      if (signal) {\n        signal.removeEventListener('abort', abortAndFinalize);\n      }\n    };\n\n    request_.on('error', err => {\n      // @ts-expect-error - err may not be SystemError\n      reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\n      finalize();\n    });\n    fixResponseChunkedTransferBadEnding(request_, err => {\n      if (signal && signal.aborted) {\n        return;\n      }\n\n      response_?.emit(\"error\", err);\n    });\n    /* c8 ignore next 18 */\n\n    if (parseInt(process.version.substring(1)) < 14) {\n      // Before Node.js 14, pipeline() does not fully support async iterators and does not always\n      // properly handle when the socket close/end events are out of order.\n      request_.on('socket', s => {\n        s.prependListener('close', hadError => {\n          // if a data listener is still present we didn't end cleanly\n          const hasDataListener = s.listenerCount('data') > 0; // if end happened before close but the socket didn't emit an error, do it now\n\n          if (response && hasDataListener && !hadError && !(signal && signal.aborted)) {\n            const err = Object.assign(new Error('Premature close'), {\n              code: 'ERR_STREAM_PREMATURE_CLOSE'\n            });\n            response_?.emit('error', err);\n          }\n        });\n      });\n    }\n\n    request_.on('response', incoming => {\n      response_ = incoming;\n      request_.setTimeout(0);\n      const headers = fromRawHeaders(response_.rawHeaders); // HTTP fetch step 5\n\n      if (isRedirect(Number(response_.statusCode))) {\n        // HTTP fetch step 5.2\n        const location = headers.get('Location'); // HTTP fetch step 5.3\n\n        const locationURL = location === null ? null : new URL(location, request.url); // HTTP fetch step 5.5\n\n        switch (request.redirect) {\n          case 'error':\n            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n            finalize();\n            return;\n\n          case 'manual':\n            // Node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n            if (locationURL !== null) {\n              headers.set('Location', locationURL.toString());\n            }\n\n            break;\n\n          case 'follow':\n            {\n              // HTTP-redirect fetch step 2\n              if (locationURL === null) {\n                break;\n              } // HTTP-redirect fetch step 5\n\n\n              if (request.counter >= request.follow) {\n                reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n                finalize();\n                return;\n              } // HTTP-redirect fetch step 6 (counter increment)\n              // Create a new Request object.\n\n\n              const requestOptions = {\n                headers: new Headers(request.headers),\n                follow: request.follow,\n                counter: request.counter + 1,\n                agent: request.agent,\n                compress: request.compress,\n                method: request.method,\n                // Note: We can not use `request.body` because send would have\n                // consumed it already.\n                body: options_.body,\n                signal: request.signal,\n                size: request.size\n              }; // HTTP-redirect fetch step 9\n\n              const isStreamBody = requestOptions.body instanceof ReadableStream || requestOptions.body instanceof Stream.Readable;\n\n              if (response_.statusCode !== 303 && isStreamBody) {\n                reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n                finalize();\n                return;\n              } // HTTP-redirect fetch step 11\n\n\n              if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST') {\n                requestOptions.method = 'GET';\n                requestOptions.body = undefined;\n                requestOptions.headers.delete('content-length');\n              } // HTTP-redirect fetch step 15\n\n\n              fetch(new Request(locationURL.href, requestOptions)).then(resolve, reject);\n              finalize();\n              return;\n            }\n\n          default:\n            return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n        }\n      } // Prepare response\n\n\n      if (signal) {\n        response_.once('end', () => {\n          signal.removeEventListener('abort', abortAndFinalize);\n        });\n      }\n\n      let body = pump(response_, new PassThrough(), reject); // see https://github.com/nodejs/node/pull/29376\n\n      /* c8 ignore next 3 */\n\n      if (process.version < 'v12.10') {\n        response_.on('aborted', abortAndFinalize);\n      }\n\n      const responseOptions = {\n        url: request.url,\n        status: response_.statusCode,\n        statusText: response_.statusMessage,\n        headers,\n        size: request.size,\n        counter: request.counter,\n        highWaterMark: request.highWaterMark\n      }; // HTTP-network fetch step 12.1.1.3\n\n      const codings = headers.get('Content-Encoding'); // HTTP-network fetch step 12.1.1.4: handle content codings\n      // in following scenarios we ignore compression support\n      // 1. compression support is disabled\n      // 2. HEAD request\n      // 3. no Content-Encoding header\n      // 4. no content response (204)\n      // 5. content not modified response (304)\n\n      if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n        response = new Response(body, responseOptions);\n        resolve(response);\n        return;\n      } // For Node v6+\n      // Be less strict when decoding compressed responses, since sometimes\n      // servers send slightly invalid responses that are still accepted\n      // by common browsers.\n      // Always using Z_SYNC_FLUSH is what cURL does.\n\n\n      const zlibOptions = {\n        flush: zlib.Z_SYNC_FLUSH,\n        finishFlush: zlib.Z_SYNC_FLUSH\n      }; // For gzip\n\n      if (codings === 'gzip' || codings === 'x-gzip') {\n        body = pump(body, zlib.createGunzip(zlibOptions), reject);\n        response = new Response(fromAsyncIterable(body), responseOptions);\n        resolve(response);\n        return;\n      } // For deflate\n\n\n      if (codings === 'deflate' || codings === 'x-deflate') {\n        // Handle the infamous raw deflate response from old servers\n        // a hack for old IIS and Apache servers\n        const raw = pump(response_, new PassThrough(), reject);\n        raw.once('data', chunk => {\n          // See http://stackoverflow.com/questions/37519828\n          if ((chunk[0] & 0x0F) === 0x08) {\n            body = pump(body, zlib.createInflate(), reject);\n          } else {\n            body = pump(body, zlib.createInflateRaw(), reject);\n          }\n\n          response = new Response(fromAsyncIterable(body), responseOptions);\n          resolve(response);\n        });\n        return;\n      } // For br\n\n\n      if (codings === 'br') {\n        body = pump(body, zlib.createBrotliDecompress(), reject);\n        response = new Response(fromAsyncIterable(body), responseOptions);\n        resolve(response);\n        return;\n      } // Otherwise, use response as-is\n\n\n      response = new Response(fromAsyncIterable(body), responseOptions);\n      resolve(response);\n    });\n    writeToStream(request_, request);\n  });\n}\n/**\n * \n * @param {import('http').ClientRequest} request \n * @param {(error:Error) => void} errorCallback \n */\n\n\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n  /** @type {import('net').Socket} */\n  let socket;\n  request.on('socket', s => {\n    socket = s;\n  });\n  request.on('response', response => {\n    const {\n      headers\n    } = response;\n\n    if (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {\n      socket.prependListener('close', hadError => {\n        // if a data listener is still present we didn't end cleanly\n        const hasDataListener = socket.listenerCount('data') > 0;\n\n        if (hasDataListener && !hadError) {\n          const err = Object.assign(new Error('Premature close'), {\n            code: 'ERR_STREAM_PREMATURE_CLOSE'\n          });\n          errorCallback(err);\n        }\n      });\n    }\n  });\n}\n\nexport default fetch;\nexport { fetch };","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/@web-std/fetch/src/fetch.js"],"names":["http","https","zlib","fs","mime","dataUriToBuffer","writeToStream","fromAsyncIterable","Response","Headers","fromRawHeaders","Request","getNodeRequestOptions","FetchError","AbortError","isRedirect","pipeline","pump","PassThrough","Stream","ReadableStream","Blob","FormData","supportedSchemas","Set","fetch","url","options_","Promise","resolve","reject","request","options","has","protocol","TypeError","replace","data","toString","response","headers","typeFull","stream","createReadStream","URL","type","lookup","send","signal","response_","abort","error","body","cancel","emit","aborted","abortAndFinalize","finalize","request_","addEventListener","removeEventListener","on","err","message","fixResponseChunkedTransferBadEnding","parseInt","process","version","substring","s","prependListener","hadError","hasDataListener","listenerCount","Object","assign","Error","code","incoming","setTimeout","rawHeaders","Number","statusCode","location","get","locationURL","redirect","set","counter","follow","requestOptions","agent","compress","method","size","isStreamBody","Readable","undefined","delete","href","then","once","responseOptions","status","statusText","statusMessage","highWaterMark","codings","zlibOptions","flush","Z_SYNC_FLUSH","finishFlush","createGunzip","raw","chunk","createInflate","createInflateRaw","createBrotliDecompress","errorCallback","socket"],"mappings":"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","sourcesContent":["/**\n * Index.js\n *\n * a request API compatible with window.fetch\n *\n * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.\n */\n\nimport http from 'http';\nimport https from 'https';\nimport zlib from 'zlib';\nimport fs from 'fs';\nimport * as mime from 'mrmime'\nimport dataUriToBuffer from 'data-uri-to-buffer';\n\nimport {writeToStream, fromAsyncIterable} from './body.js';\nimport Response from './response.js';\nimport Headers, {fromRawHeaders} from './headers.js';\nimport Request, {getNodeRequestOptions} from './request.js';\nimport {FetchError} from './errors/fetch-error.js';\nimport {AbortError} from './errors/abort-error.js';\nimport {isRedirect} from './utils/is-redirect.js';\nimport {pipeline as pump, PassThrough} from 'stream';\nimport * as Stream from 'stream';\nimport { ReadableStream, Blob, FormData  } from './package.js';\n\n\nexport {Headers, Request, Response, ReadableStream, Blob, FormData};\n\nconst supportedSchemas = new Set(['data:', 'http:', 'https:', 'file:']);\n\n/**\n * Fetch function\n *\n * @param   {string | URL | import('./request').default} url - Absolute url or Request instance\n * @param   {RequestInit} [options_] - Fetch options\n * @return  {Promise<import('./response').default>}\n */\nasync function fetch(url, options_ = {}) {\n\treturn new Promise((resolve, reject) => {\n\t\t// Build request object\n\t\tconst request = new Request(url, options_);\n\t\tconst options = getNodeRequestOptions(request);\n\t\tif (!supportedSchemas.has(options.protocol)) {\n\t\t\tthrow new TypeError(`node-fetch cannot load ${url}. URL scheme \"${options.protocol.replace(/:$/, '')}\" is not supported.`);\n\t\t}\n\n\t\tif (options.protocol === 'data:') {\n\t\t\tconst data = dataUriToBuffer(request.url.toString());\n\t\t\tconst response = new Response(data, {headers: {'Content-Type': data.typeFull}});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.protocol === 'file:') {\n\t\t\tconst stream = fs.createReadStream(new URL(request.url))\n\t\t\tconst type = mime.lookup(request.url) || 'application/octet-stream'\n\t\t\tconst response = new Response(stream, {headers: {'Content-Type': type }});\n\t\t\tresolve(response);\n\t\t\treturn;\n\t\t}\n\n\t\t// Wrap http.request into fetch\n\t\tconst send = (options.protocol === 'https:' ? https : http).request;\n\t\tconst {signal} = request;\n\t\t/** @type {Response|null} */\n\t\tlet response = null;\n\t\t/** @type {import('http').IncomingMessage|null} */\n\t\tlet response_ = null;\n\n\t\tconst abort = () => {\n\t\t\tconst error = new AbortError('The operation was aborted.');\n\t\t\treject(error);\n\t\t\tif (request.body) {\n\t\t\t\trequest.body.cancel(error);\n\t\t\t}\n\n\t\t\tif (!response_) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresponse_.emit('error', error);\n\t\t};\n\n\t\tif (signal && signal.aborted) {\n\t\t\tabort();\n\t\t\treturn;\n\t\t}\n\n\t\tconst abortAndFinalize = () => {\n\t\t\tabort();\n\t\t\tfinalize();\n\t\t};\n\n\t\t// Send request\n\t\tconst request_ = send(options);\n\n\t\tif (signal) {\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\n\t\t}\n\n\t\tconst finalize = () => {\n\t\t\trequest_.abort();\n\t\t\tif (signal) {\n\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t}\n\t\t};\n\n\t\trequest_.on('error', err => {\n\t\t\t// @ts-expect-error - err may not be SystemError\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\n\t\t\tfinalize();\n\t\t});\n\n\t\tfixResponseChunkedTransferBadEnding(request_, err => {\n\t\t\tif (signal && signal.aborted) {\n\t\t\t\treturn\n\t\t\t}\n\n\t\t\tresponse_?.emit(\"error\", err);\n\t\t});\n\n\t\t/* c8 ignore next 18 */\n\t\tif (parseInt(process.version.substring(1)) < 14) {\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\n\t\t\t// properly handle when the socket close/end events are out of order.\n\t\t\trequest_.on('socket', s => {\n\t\t\t\ts.prependListener('close', hadError => {\n\t\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\t\tconst hasDataListener = s.listenerCount('data') > 0\n\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\n\t\t\t\t\tif (response && hasDataListener && !hadError && !(signal && signal.aborted)) {\n\t\t\t\t\t\tconst err = Object.assign(new Error('Premature close'), {\n\t\t\t\t\t\t\tcode: 'ERR_STREAM_PREMATURE_CLOSE'\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresponse_?.emit('error', err);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\trequest_.on('response', incoming => {\n\t\t\tresponse_ = incoming;\n\t\t\trequest_.setTimeout(0);\n\t\t\tconst headers = fromRawHeaders(response_.rawHeaders);\n\n\t\t\t// HTTP fetch step 5\n\t\t\tif (isRedirect(Number(response_.statusCode))) {\n\t\t\t\t// HTTP fetch step 5.2\n\t\t\t\tconst location = headers.get('Location');\n\n\t\t\t\t// HTTP fetch step 5.3\n\t\t\t\tconst locationURL = location === null ? null : new URL(location, request.url);\n\n\t\t\t\t// HTTP fetch step 5.5\n\t\t\t\tswitch (request.redirect) {\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'manual':\n\t\t\t\t\t\t// Node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\n\t\t\t\t\t\tif (locationURL !== null) {\n\t\t\t\t\t\t\theaders.set('Location', locationURL.toString());\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'follow': {\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\n\t\t\t\t\t\tif (locationURL === null) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\n\t\t\t\t\t\tif (request.counter >= request.follow) {\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\n\t\t\t\t\t\t// Create a new Request object.\n\t\t\t\t\t\tconst requestOptions = {\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\n\t\t\t\t\t\t\tfollow: request.follow,\n\t\t\t\t\t\t\tcounter: request.counter + 1,\n\t\t\t\t\t\t\tagent: request.agent,\n\t\t\t\t\t\t\tcompress: request.compress,\n\t\t\t\t\t\t\tmethod: request.method,\n\t\t\t\t\t\t\t// Note: We can not use `request.body` because send would have\n\t\t\t\t\t\t\t// consumed it already.\n\t\t\t\t\t\t\tbody: options_.body,\n\t\t\t\t\t\t\tsignal: request.signal,\n\t\t\t\t\t\t\tsize: request.size\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\n\t\t\t\t\t\tconst isStreamBody =\n\t\t\t\t\t\t\trequestOptions.body instanceof ReadableStream ||\n\t\t\t\t\t\t\trequestOptions.body instanceof Stream.Readable;\n\t\t\t\t\t\tif (response_.statusCode !== 303 && isStreamBody) {\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\n\t\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\n\t\t\t\t\t\tif (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {\n\t\t\t\t\t\t\trequestOptions.method = 'GET';\n\t\t\t\t\t\t\trequestOptions.body = undefined;\n\t\t\t\t\t\t\trequestOptions.headers.delete('content-length');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\n\t\t\t\t\t\tfetch(new Request(locationURL.href, requestOptions)).then(resolve, reject);\n\t\t\t\t\t\tfinalize();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Prepare response\n\t\t\tif (signal) {\n\t\t\t\tresponse_.once('end', () => {\n\t\t\t\t\tsignal.removeEventListener('abort', abortAndFinalize);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tlet body = pump(response_, new PassThrough(), reject);\n\t\t\t// see https://github.com/nodejs/node/pull/29376\n\t\t\t/* c8 ignore next 3 */\n\t\t\tif (process.version < 'v12.10') {\n\t\t\t\tresponse_.on('aborted', abortAndFinalize);\n\t\t\t}\n\n\t\t\tconst responseOptions = {\n\t\t\t\turl: request.url,\n\t\t\t\tstatus: response_.statusCode,\n\t\t\t\tstatusText: response_.statusMessage,\n\t\t\t\theaders,\n\t\t\t\tsize: request.size,\n\t\t\t\tcounter: request.counter,\n\t\t\t\thighWaterMark: request.highWaterMark\n\t\t\t};\n\n\t\t\t// HTTP-network fetch step 12.1.1.3\n\t\t\tconst codings = headers.get('Content-Encoding');\n\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\n\n\t\t\t// in following scenarios we ignore compression support\n\t\t\t// 1. compression support is disabled\n\t\t\t// 2. HEAD request\n\t\t\t// 3. no Content-Encoding header\n\t\t\t// 4. no content response (204)\n\t\t\t// 5. content not modified response (304)\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {\n\t\t\t\tresponse = new Response(body, responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For Node v6+\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\n\t\t\t// servers send slightly invalid responses that are still accepted\n\t\t\t// by common browsers.\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\n\t\t\tconst zlibOptions = {\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\n\t\t\t};\n\n\t\t\t// For gzip\n\t\t\tif (codings === 'gzip' || codings === 'x-gzip') {\n\t\t\t\tbody = pump(body, zlib.createGunzip(zlibOptions), reject);\n\t\t\t\tresponse = new Response(fromAsyncIterable(body), responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For deflate\n\t\t\tif (codings === 'deflate' || codings === 'x-deflate') {\n\t\t\t\t// Handle the infamous raw deflate response from old servers\n\t\t\t\t// a hack for old IIS and Apache servers\n\t\t\t\tconst raw = pump(response_, new PassThrough(), reject);\n\t\t\t\traw.once('data', chunk => {\n\t\t\t\t\t// See http://stackoverflow.com/questions/37519828\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflate(), reject);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbody = pump(body, zlib.createInflateRaw(), reject);\n\t\t\t\t\t}\n\n\t\t\t\t\tresponse = new Response(fromAsyncIterable(body), responseOptions);\n\t\t\t\t\tresolve(response);\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For br\n\t\t\tif (codings === 'br') {\n\t\t\t\tbody = pump(body, zlib.createBrotliDecompress(), reject);\n\t\t\t\tresponse = new Response(fromAsyncIterable(body), responseOptions);\n\t\t\t\tresolve(response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise, use response as-is\n\t\t\tresponse = new Response(fromAsyncIterable(body), responseOptions);\n\t\t\tresolve(response);\n\t\t});\n\n\t\twriteToStream(request_, request);\n\t});\n}\n\n/**\n * \n * @param {import('http').ClientRequest} request \n * @param {(error:Error) => void} errorCallback \n */\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\n\t/** @type {import('net').Socket} */\n\tlet socket;\n\n\trequest.on('socket', s => {\n\t\tsocket = s;\n\t});\n\n\trequest.on('response', response => {\n\n\t\tconst {headers} = response;\n\n\t\tif (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {\n\t\t\tsocket.prependListener('close', hadError => {\n\t\t\t\t// if a data listener is still present we didn't end cleanly\n\t\t\t\tconst hasDataListener = socket.listenerCount('data') > 0;\n\t\t\t\tif (hasDataListener && !hadError) {\n\t\t\t\t\tconst err = Object.assign(new Error('Premature close'), {\n\t\t\t\t\t\tcode: 'ERR_STREAM_PREMATURE_CLOSE'\n\t\t\t\t\t})\n\t\t\t\t\terrorCallback(err);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nexport default fetch\nexport { fetch }\n"]},"metadata":{},"sourceType":"module"}