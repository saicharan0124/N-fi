{"ast":null,"code":"const {\n  NFTStorage,\n  File,\n  Blob\n} = require('nft.storage');\n\nconst {\n  default: fetch\n} = require('@web-std/fetch');\n\nconst addtotransactions = async info => {\n  var owner = window.localStorage.getItem('owner');\n  const API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDFDQTc1NjNlNWJmMDgxMkQyMzVDQTM2QzM3Rjg0OTZiYTkwMDcwNmIiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY2MDY3MDkyMjQ2MSwibmFtZSI6Im5maSJ9.QyKscH85ySqwAl-Xw3dezjU1Uc6G6sko-Oe2A3EWExE';\n  var metadata;\n  const image = await getExampleImage();\n  const nft = {\n    image: info.img,\n    // use image Blob as `image` field\n    token_id: parseInt(info.Tokenid._hex, 16),\n    owner: owner,\n    address: info.frm,\n    heading: info.heading,\n    date: info.time._hex,\n    price: parseInt(info.nftprice._hex, 16) * Math.pow(10, -18),\n    status: 0\n  };\n  const client = new NFTStorage({\n    token: API_KEY\n  });\n  metadata = await client.store(nft);\n  console.log('NFT data stored!');\n  console.log('Metadata URI: ', metadata.url); // //metamask\n  //   const provider = new ethers.providers.Web3Provider(window.ethereum)\n  //    await provider.send(\"eth_requestAccounts\", []);\n  //    const signer = provider.getSigner()\n  //    const tableland = await connect({  chain: \"polygon-mumbai\" },signer);\n  // const { Borrow_sql,txnHash } = await tableland.create(\n  //     `id integer, owner string, ipfs_link string, primary key (id)`\n  //   );\n  //   console.log(Borrow_sql)\n  //   console.log(txnHash)\n};\n\nexport default addtotransactions;","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/src/functions/addtotransaction.js"],"names":["NFTStorage","File","Blob","require","default","fetch","addtotransactions","info","owner","window","localStorage","getItem","API_KEY","metadata","image","getExampleImage","nft","img","token_id","parseInt","Tokenid","_hex","address","frm","heading","date","time","price","nftprice","Math","pow","status","client","token","store","console","log","url"],"mappings":"AAAA,MAAM;AAAEA,EAAAA,UAAF;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA;AAApB,IAA6BC,OAAO,CAAC,aAAD,CAA1C;;AACA,MAAM;AAAEC,EAAAA,OAAO,EAAEC;AAAX,IAAqBF,OAAO,CAAC,gBAAD,CAAlC;;AAEA,MAAMG,iBAAiB,GAAC,MAAMC,IAAN,IAAa;AACrC,MAAIC,KAAK,GAACC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,OAA5B,CAAV;AAGE,QAAMC,OAAO,GAAG,2OAAhB;AAED,MAAIC,QAAJ;AAEC,QAAMC,KAAK,GAAG,MAAMC,eAAe,EAAnC;AACA,QAAMC,GAAG,GAAG;AACVF,IAAAA,KAAK,EAACP,IAAI,CAACU,GADD;AACM;AAChBC,IAAAA,QAAQ,EAACC,QAAQ,CAACZ,IAAI,CAACa,OAAL,CAAaC,IAAd,EAAmB,EAAnB,CAFP;AAGVb,IAAAA,KAAK,EAACA,KAHI;AAIXc,IAAAA,OAAO,EAACf,IAAI,CAACgB,GAJF;AAKXC,IAAAA,OAAO,EAACjB,IAAI,CAACiB,OALF;AAMdC,IAAAA,IAAI,EAAClB,IAAI,CAACmB,IAAL,CAAUL,IAND;AAOdM,IAAAA,KAAK,EAACR,QAAQ,CAACZ,IAAI,CAACqB,QAAL,CAAcP,IAAf,EAAoB,EAApB,CAAR,GAAgCQ,IAAI,CAACC,GAAL,CAAS,EAAT,EAAY,CAAC,EAAb,CAPxB;AAQdC,IAAAA,MAAM,EAAC;AARO,GAAZ;AAYA,QAAMC,MAAM,GAAG,IAAIhC,UAAJ,CAAe;AAAEiC,IAAAA,KAAK,EAAErB;AAAT,GAAf,CAAf;AACCC,EAAAA,QAAQ,GAAG,MAAMmB,MAAM,CAACE,KAAP,CAAalB,GAAb,CAAjB;AAEDmB,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BvB,QAAQ,CAACwB,GAAvC,EAzBmC,CA0BrC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGC,CAxCD;;AA6CA,eAAe/B,iBAAf","sourcesContent":["const { NFTStorage, File, Blob } = require('nft.storage')\r\nconst { default: fetch } = require('@web-std/fetch');\r\n\r\nconst addtotransactions=async(info)=>{\r\nvar owner=window.localStorage.getItem('owner');\r\n\r\n\r\n  const API_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweDFDQTc1NjNlNWJmMDgxMkQyMzVDQTM2QzM3Rjg0OTZiYTkwMDcwNmIiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY2MDY3MDkyMjQ2MSwibmFtZSI6Im5maSJ9.QyKscH85ySqwAl-Xw3dezjU1Uc6G6sko-Oe2A3EWExE'\r\n \r\n var metadata;\r\n\r\n  const image = await getExampleImage()\r\n  const nft = {\r\n    image:info.img, // use image Blob as `image` field\r\n    token_id:parseInt(info.Tokenid._hex,16),\r\n    owner:owner,\r\n   address:info.frm,\r\n   heading:info.heading,\r\ndate:info.time._hex,\r\nprice:parseInt(info.nftprice._hex,16)*Math.pow(10,-18),\r\nstatus:0 \r\n    \r\n  }\r\n\r\n  const client = new NFTStorage({ token: API_KEY })\r\n   metadata = await client.store(nft)\r\n\r\n  console.log('NFT data stored!')\r\n  console.log('Metadata URI: ', metadata.url)\r\n// //metamask\r\n//   const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n//    await provider.send(\"eth_requestAccounts\", []);\r\n//    const signer = provider.getSigner()\r\n\r\n//    const tableland = await connect({  chain: \"polygon-mumbai\" },signer);\r\n// const { Borrow_sql,txnHash } = await tableland.create(\r\n//     `id integer, owner string, ipfs_link string, primary key (id)`\r\n//   );\r\n\r\n//   console.log(Borrow_sql)\r\n//   console.log(txnHash)\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport default addtotransactions;\r\n"]},"metadata":{},"sourceType":"module"}