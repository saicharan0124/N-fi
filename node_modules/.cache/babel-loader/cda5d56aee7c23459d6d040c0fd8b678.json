{"ast":null,"code":"import { React, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport updatetransaction from './updatetransaction';\n\nconst {\n  ethers\n} = require(\"ethers\");\n\nconst m_initial3 = async data => {\n  //metamask\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner(); //contract initialization \n\n  const contract = require(\"./abi.json\");\n\n  const mortgage_addr = '0x9593985Fe427e098356fB1A2F49F669E9862Ab97';\n  const mortgage_contract = new ethers.Contract(mortgage_addr, contract.mortgage_abi, signer);\n  const mortgage_contract_p = new ethers.Contract(mortgage_addr, contract.mortgage_abi, provider);\n  const decimals = 18; //  const input = \"\"+data.price; // Note: this is a string, e.g. user input\n\n  const input = \"\" + data.price * 0.9;\n  const amount = ethers.utils.parseUnits(input, decimals);\n  const nftadrr = data.address;\n  const id = data.token_id; //repay function \n  //  const repay = await mortgage_contract.repay(data.address,data.token_id,{value:0.90*amount,gasLimit: 210000})\n\n  const repay = await mortgage_contract.repay(nftadrr, id, {\n    value: amount,\n    gasLimit: 500000\n  });\n  console.log(repay);\n  const repay_events = await mortgage_contract_p.on(' MortgageRepaid', (tk_id, frm, ans, time) => {\n    let info = {\n      Tokenid: tk_id,\n      frm: frm,\n      repaid_or_not: ans,\n      time: time\n    };\n    console.log(info);\n\n    if (info.repaid_or_not == true) {\n      updatetransaction({\n        token_id: tk_id,\n        address: frm\n      });\n    }\n  });\n};\n\nexport default m_initial3;","map":{"version":3,"sources":["S:/final hackathon/nfi3/src/functions/repay.js"],"names":["React","useEffect","useState","axios","updatetransaction","ethers","require","m_initial3","data","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","mortgage_addr","mortgage_contract","Contract","mortgage_abi","mortgage_contract_p","decimals","input","price","amount","utils","parseUnits","nftadrr","address","id","token_id","repay","value","gasLimit","console","log","repay_events","on","tk_id","frm","ans","time","info","Tokenid","repaid_or_not"],"mappings":"AAAA,SAAQA,KAAR,EAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AACC,MAAM;AAAEC,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAGD,MAAMC,UAAU,GAAC,MAAMC,IAAN,IAAa;AAMzB;AACA,QAAMC,QAAQ,GAAG,IAAIJ,MAAM,CAACK,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,QAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf,CATyB,CAW7B;;AAEE,QAAMC,QAAQ,GAAGX,OAAO,CAAC,YAAD,CAAxB;;AACA,QAAMY,aAAa,GAAG,4CAAtB;AACA,QAAMC,iBAAiB,GAAG,IAAId,MAAM,CAACe,QAAX,CAAoBF,aAApB,EAAmCD,QAAQ,CAACI,YAA5C,EAAyDN,MAAzD,CAA1B;AACA,QAAMO,mBAAmB,GAAG,IAAIjB,MAAM,CAACe,QAAX,CAAoBF,aAApB,EAAmCD,QAAQ,CAACI,YAA5C,EAAyDZ,QAAzD,CAA5B;AACA,QAAMc,QAAQ,GAAG,EAAjB,CAjB2B,CAkB5B;;AACC,QAAMC,KAAK,GAAE,KAAIhB,IAAI,CAACiB,KAAL,GAAW,GAA5B;AACA,QAAMC,MAAM,GAAGrB,MAAM,CAACsB,KAAP,CAAaC,UAAb,CAAwBJ,KAAxB,EAA+BD,QAA/B,CAAf;AAIA,QAAMM,OAAO,GAACrB,IAAI,CAACsB,OAAnB;AACA,QAAMC,EAAE,GAACvB,IAAI,CAACwB,QAAd,CAzB2B,CA4B7B;AACC;;AACA,QAAMC,KAAK,GAAG,MAAMd,iBAAiB,CAACc,KAAlB,CAAwBJ,OAAxB,EAAgCE,EAAhC,EAAmC;AAACG,IAAAA,KAAK,EAACR,MAAP;AAAcS,IAAAA,QAAQ,EAAE;AAAxB,GAAnC,CAApB;AACCC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AAEC,QAAMK,YAAY,GAAE,MAAMhB,mBAAmB,CAACiB,EAApB,CAAuB,iBAAvB,EAAyC,CAACC,KAAD,EAAOC,GAAP,EAAWC,GAAX,EAAeC,IAAf,KAAsB;AAGxF,QAAIC,IAAI,GAAE;AACRC,MAAAA,OAAO,EAACL,KADA;AAERC,MAAAA,GAAG,EAACA,GAFI;AAGRK,MAAAA,aAAa,EAACJ,GAHN;AAIRC,MAAAA,IAAI,EAACA;AAJG,KAAV;AAOAP,IAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;;AAGA,QAAGA,IAAI,CAACE,aAAL,IAAoB,IAAvB,EAA4B;AAE3B1C,MAAAA,iBAAiB,CAAC;AAChB4B,QAAAA,QAAQ,EAACQ,KADO;AAEhBV,QAAAA,OAAO,EAACW;AAFQ,OAAD,CAAjB;AAIA;AACD,GApByB,CAA1B;AA2BD,CA5DH;;AAgEE,eAAelC,UAAf","sourcesContent":["import {React, useEffect, useState} from 'react';\r\n\r\nimport axios from 'axios';\r\nimport updatetransaction from './updatetransaction';\r\n const { ethers } = require(\"ethers\");\r\n\r\n\r\nconst m_initial3=async(data)=>{\r\n\r\n\r\n  \r\n\r\n\r\n     //metamask\r\n     const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n     await provider.send(\"eth_requestAccounts\", []);\r\n     const signer = provider.getSigner()\r\n \r\n //contract initialization \r\n \r\n   const contract = require(\"./abi.json\");\r\n   const mortgage_addr = '0x9593985Fe427e098356fB1A2F49F669E9862Ab97' \r\n   const mortgage_contract = new ethers.Contract(mortgage_addr, contract.mortgage_abi,signer)\r\n   const mortgage_contract_p = new ethers.Contract(mortgage_addr, contract.mortgage_abi,provider)\r\n   const decimals = 18;\r\n  //  const input = \"\"+data.price; // Note: this is a string, e.g. user input\r\n   const input =\"\"+ data.price*0.9;\r\n   const amount = ethers.utils.parseUnits(input, decimals)\r\n\r\n\r\n\r\n   const nftadrr=data.address;\r\n   const id=data.token_id;\r\n\r\n\r\n //repay function \r\n  //  const repay = await mortgage_contract.repay(data.address,data.token_id,{value:0.90*amount,gasLimit: 210000})\r\n  const repay = await mortgage_contract.repay(nftadrr,id,{value:amount,gasLimit: 500000})\r\n   console.log(repay)\r\n \r\n    const repay_events= await mortgage_contract_p.on(' MortgageRepaid',(tk_id,frm,ans,time)=>{\r\n \r\n \r\n     let info ={\r\n       Tokenid:tk_id,\r\n       frm:frm,\r\n       repaid_or_not:ans,\r\n       time:time\r\n     }\r\n \r\n     console.log(info)\r\n\r\n\r\n     if(info.repaid_or_not==true){\r\n\r\n      updatetransaction({\r\n        token_id:tk_id,\r\n        address:frm\r\n      });\r\n     }\r\n    })\r\n\r\n\r\n\r\n \r\n  \r\n  \r\n  }\r\n\r\n  \r\n\r\n  export default m_initial3;"]},"metadata":{},"sourceType":"module"}