{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-loop-func */\n\nconst equalObjects = require('./equals').default;\n\nconst decode = require('./decode').default;\n\nconst ParseError = require('./ParseError').default;\n\nconst ParsePolygon = require('./ParsePolygon').default;\n\nconst ParseGeoPoint = require('./ParseGeoPoint').default;\n/**\n * contains -- Determines if an object is contained in a list with special handling for Parse pointers.\n *\n * @param haystack\n * @param needle\n * @private\n * @returns {boolean}\n */\n\n\nfunction contains(haystack, needle) {\n  if (needle && needle.__type && (needle.__type === 'Pointer' || needle.__type === 'Object')) {\n    for (const i in haystack) {\n      const ptr = haystack[i];\n\n      if (typeof ptr === 'string' && ptr === needle.objectId) {\n        return true;\n      }\n\n      if (ptr.className === needle.className && ptr.objectId === needle.objectId) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return haystack.indexOf(needle) > -1;\n}\n\nfunction transformObject(object) {\n  if (object._toFullJSON) {\n    return object._toFullJSON();\n  }\n\n  return object;\n}\n/**\n * matchesQuery -- Determines if an object would be returned by a Parse Query\n * It's a lightweight, where-clause only implementation of a full query engine.\n * Since we find queries that match objects, rather than objects that match\n * queries, we can avoid building a full-blown query tool.\n *\n * @param className\n * @param object\n * @param objects\n * @param query\n * @private\n * @returns {boolean}\n */\n\n\nfunction matchesQuery(className, object, objects, query) {\n  if (object.className !== className) {\n    return false;\n  }\n\n  let obj = object;\n  let q = query;\n\n  if (object.toJSON) {\n    obj = object.toJSON();\n  }\n\n  if (query.toJSON) {\n    q = query.toJSON().where;\n  }\n\n  obj.className = className;\n\n  for (const field in q) {\n    if (!matchesKeyConstraints(className, obj, objects, field, q[field])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction equalObjectsGeneric(obj, compareTo, eqlFn) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      if (eqlFn(obj[i], compareTo)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return eqlFn(obj, compareTo);\n}\n/**\n * Determines whether an object matches a single key's constraints\n *\n * @param className\n * @param object\n * @param objects\n * @param key\n * @param constraints\n * @private\n * @returns {boolean}\n */\n\n\nfunction matchesKeyConstraints(className, object, objects, key, constraints) {\n  if (constraints === null) {\n    return false;\n  }\n\n  if (key.indexOf('.') >= 0) {\n    // Key references a subobject\n    const keyComponents = key.split('.');\n    const subObjectKey = keyComponents[0];\n    const keyRemainder = keyComponents.slice(1).join('.');\n    return matchesKeyConstraints(className, object[subObjectKey] || {}, objects, keyRemainder, constraints);\n  }\n\n  let i;\n\n  if (key === '$or') {\n    for (i = 0; i < constraints.length; i++) {\n      if (matchesQuery(className, object, objects, constraints[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  if (key === '$and') {\n    for (i = 0; i < constraints.length; i++) {\n      if (!matchesQuery(className, object, objects, constraints[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (key === '$nor') {\n    for (i = 0; i < constraints.length; i++) {\n      if (matchesQuery(className, object, objects, constraints[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (key === '$relatedTo') {\n    // Bail! We can't handle relational queries locally\n    return false;\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(key)) {\n    throw new ParseError(ParseError.INVALID_KEY_NAME, `Invalid Key: ${key}`);\n  } // Equality (or Array contains) cases\n\n\n  if (typeof constraints !== 'object') {\n    if (Array.isArray(object[key])) {\n      return object[key].indexOf(constraints) > -1;\n    }\n\n    return object[key] === constraints;\n  }\n\n  let compareTo;\n\n  if (constraints.__type) {\n    if (constraints.__type === 'Pointer') {\n      return equalObjectsGeneric(object[key], constraints, (obj, ptr) => {\n        return typeof obj !== 'undefined' && ptr.className === obj.className && ptr.objectId === obj.objectId;\n      });\n    }\n\n    return equalObjectsGeneric(decode(object[key]), decode(constraints), equalObjects);\n  } // More complex cases\n\n\n  for (const condition in constraints) {\n    compareTo = constraints[condition];\n\n    if (compareTo.__type) {\n      compareTo = decode(compareTo);\n    } // Compare Date Object or Date String\n\n\n    if (toString.call(compareTo) === '[object Date]' || typeof compareTo === 'string' && new Date(compareTo) !== 'Invalid Date' && !isNaN(new Date(compareTo))) {\n      object[key] = new Date(object[key].iso ? object[key].iso : object[key]);\n    }\n\n    switch (condition) {\n      case '$lt':\n        if (object[key] >= compareTo) {\n          return false;\n        }\n\n        break;\n\n      case '$lte':\n        if (object[key] > compareTo) {\n          return false;\n        }\n\n        break;\n\n      case '$gt':\n        if (object[key] <= compareTo) {\n          return false;\n        }\n\n        break;\n\n      case '$gte':\n        if (object[key] < compareTo) {\n          return false;\n        }\n\n        break;\n\n      case '$ne':\n        if (equalObjects(object[key], compareTo)) {\n          return false;\n        }\n\n        break;\n\n      case '$in':\n        if (!contains(compareTo, object[key])) {\n          return false;\n        }\n\n        break;\n\n      case '$nin':\n        if (contains(compareTo, object[key])) {\n          return false;\n        }\n\n        break;\n\n      case '$all':\n        for (i = 0; i < compareTo.length; i++) {\n          if (object[key].indexOf(compareTo[i]) < 0) {\n            return false;\n          }\n        }\n\n        break;\n\n      case '$exists':\n        {\n          const propertyExists = typeof object[key] !== 'undefined';\n          const existenceIsRequired = constraints.$exists;\n\n          if (typeof constraints.$exists !== 'boolean') {\n            // The SDK will never submit a non-boolean for $exists, but if someone\n            // tries to submit a non-boolean for $exits outside the SDKs, just ignore it.\n            break;\n          }\n\n          if (!propertyExists && existenceIsRequired || propertyExists && !existenceIsRequired) {\n            return false;\n          }\n\n          break;\n        }\n\n      case '$regex':\n        {\n          if (typeof compareTo === 'object') {\n            return compareTo.test(object[key]);\n          } // JS doesn't support perl-style escaping\n\n\n          let expString = '';\n          let escapeEnd = -2;\n          let escapeStart = compareTo.indexOf('\\\\Q');\n\n          while (escapeStart > -1) {\n            // Add the unescaped portion\n            expString += compareTo.substring(escapeEnd + 2, escapeStart);\n            escapeEnd = compareTo.indexOf('\\\\E', escapeStart);\n\n            if (escapeEnd > -1) {\n              expString += compareTo.substring(escapeStart + 2, escapeEnd).replace(/\\\\\\\\\\\\\\\\E/g, '\\\\E').replace(/\\W/g, '\\\\$&');\n            }\n\n            escapeStart = compareTo.indexOf('\\\\Q', escapeEnd);\n          }\n\n          expString += compareTo.substring(Math.max(escapeStart, escapeEnd + 2));\n          let modifiers = constraints.$options || '';\n          modifiers = modifiers.replace('x', '').replace('s', ''); // Parse Server / Mongo support x and s modifiers but JS RegExp doesn't\n\n          const exp = new RegExp(expString, modifiers);\n\n          if (!exp.test(object[key])) {\n            return false;\n          }\n\n          break;\n        }\n\n      case '$nearSphere':\n        {\n          if (!compareTo || !object[key]) {\n            return false;\n          }\n\n          const distance = compareTo.radiansTo(object[key]);\n          const max = constraints.$maxDistance || Infinity;\n          return distance <= max;\n        }\n\n      case '$within':\n        {\n          if (!compareTo || !object[key]) {\n            return false;\n          }\n\n          const southWest = compareTo.$box[0];\n          const northEast = compareTo.$box[1];\n\n          if (southWest.latitude > northEast.latitude || southWest.longitude > northEast.longitude) {\n            // Invalid box, crosses the date line\n            return false;\n          }\n\n          return object[key].latitude > southWest.latitude && object[key].latitude < northEast.latitude && object[key].longitude > southWest.longitude && object[key].longitude < northEast.longitude;\n        }\n\n      case '$options':\n        // Not a query type, but a way to add options to $regex. Ignore and\n        // avoid the default\n        break;\n\n      case '$maxDistance':\n        // Not a query type, but a way to add a cap to $nearSphere. Ignore and\n        // avoid the default\n        break;\n\n      case '$select':\n        {\n          const subQueryObjects = objects.filter((obj, index, arr) => {\n            return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);\n          });\n\n          for (let i = 0; i < subQueryObjects.length; i += 1) {\n            const subObject = transformObject(subQueryObjects[i]);\n            return equalObjects(object[key], subObject[compareTo.key]);\n          }\n\n          return false;\n        }\n\n      case '$dontSelect':\n        {\n          const subQueryObjects = objects.filter((obj, index, arr) => {\n            return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);\n          });\n\n          for (let i = 0; i < subQueryObjects.length; i += 1) {\n            const subObject = transformObject(subQueryObjects[i]);\n            return !equalObjects(object[key], subObject[compareTo.key]);\n          }\n\n          return false;\n        }\n\n      case '$inQuery':\n        {\n          const subQueryObjects = objects.filter((obj, index, arr) => {\n            return matchesQuery(compareTo.className, obj, arr, compareTo.where);\n          });\n\n          for (let i = 0; i < subQueryObjects.length; i += 1) {\n            const subObject = transformObject(subQueryObjects[i]);\n\n            if (object[key].className === subObject.className && object[key].objectId === subObject.objectId) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n      case '$notInQuery':\n        {\n          const subQueryObjects = objects.filter((obj, index, arr) => {\n            return matchesQuery(compareTo.className, obj, arr, compareTo.where);\n          });\n\n          for (let i = 0; i < subQueryObjects.length; i += 1) {\n            const subObject = transformObject(subQueryObjects[i]);\n\n            if (object[key].className === subObject.className && object[key].objectId === subObject.objectId) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n      case '$containedBy':\n        {\n          for (const value of object[key]) {\n            if (!contains(compareTo, value)) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n      case '$geoWithin':\n        {\n          const points = compareTo.$polygon.map(geoPoint => [geoPoint.latitude, geoPoint.longitude]);\n          const polygon = new ParsePolygon(points);\n          return polygon.containsPoint(object[key]);\n        }\n\n      case '$geoIntersects':\n        {\n          const polygon = new ParsePolygon(object[key].coordinates);\n          const point = new ParseGeoPoint(compareTo.$point);\n          return polygon.containsPoint(point);\n        }\n\n      default:\n        return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateQuery(query\n/*: any*/\n) {\n  let q = query;\n\n  if (query.toJSON) {\n    q = query.toJSON().where;\n  }\n\n  const specialQuerykeys = ['$and', '$or', '$nor', '_rperm', '_wperm', '_perishable_token', '_email_verify_token', '_email_verify_token_expires_at', '_account_lockout_expires_at', '_failed_login_count'];\n  Object.keys(q).forEach(key => {\n    if (q && q[key] && q[key].$regex) {\n      if (typeof q[key].$options === 'string') {\n        if (!q[key].$options.match(/^[imxs]+$/)) {\n          throw new ParseError(ParseError.INVALID_QUERY, `Bad $options value for query: ${q[key].$options}`);\n        }\n      }\n    }\n\n    if (specialQuerykeys.indexOf(key) < 0 && !key.match(/^[a-zA-Z][a-zA-Z0-9_.]*$/)) {\n      throw new ParseError(ParseError.INVALID_KEY_NAME, `Invalid key name: ${key}`);\n    }\n  });\n}\n\nconst OfflineQuery = {\n  matchesQuery: matchesQuery,\n  validateQuery: validateQuery\n};\nmodule.exports = OfflineQuery;","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/moralis/lib/node/OfflineQuery.js"],"names":["equalObjects","require","default","decode","ParseError","ParsePolygon","ParseGeoPoint","contains","haystack","needle","__type","i","ptr","objectId","className","indexOf","transformObject","object","_toFullJSON","matchesQuery","objects","query","obj","q","toJSON","where","field","matchesKeyConstraints","equalObjectsGeneric","compareTo","eqlFn","Array","isArray","length","key","constraints","keyComponents","split","subObjectKey","keyRemainder","slice","join","test","INVALID_KEY_NAME","condition","toString","call","Date","isNaN","iso","propertyExists","existenceIsRequired","$exists","expString","escapeEnd","escapeStart","substring","replace","Math","max","modifiers","$options","exp","RegExp","distance","radiansTo","$maxDistance","Infinity","southWest","$box","northEast","latitude","longitude","subQueryObjects","filter","index","arr","subObject","value","points","$polygon","map","geoPoint","polygon","containsPoint","coordinates","point","$point","validateQuery","specialQuerykeys","Object","keys","forEach","$regex","match","INVALID_QUERY","OfflineQuery","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n/* eslint-disable no-loop-func */\n\nconst equalObjects = require('./equals').default;\n\nconst decode = require('./decode').default;\n\nconst ParseError = require('./ParseError').default;\n\nconst ParsePolygon = require('./ParsePolygon').default;\n\nconst ParseGeoPoint = require('./ParseGeoPoint').default;\n/**\n * contains -- Determines if an object is contained in a list with special handling for Parse pointers.\n *\n * @param haystack\n * @param needle\n * @private\n * @returns {boolean}\n */\n\n\nfunction contains(haystack, needle) {\n  if (needle && needle.__type && (needle.__type === 'Pointer' || needle.__type === 'Object')) {\n    for (const i in haystack) {\n      const ptr = haystack[i];\n\n      if (typeof ptr === 'string' && ptr === needle.objectId) {\n        return true;\n      }\n\n      if (ptr.className === needle.className && ptr.objectId === needle.objectId) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return haystack.indexOf(needle) > -1;\n}\n\nfunction transformObject(object) {\n  if (object._toFullJSON) {\n    return object._toFullJSON();\n  }\n\n  return object;\n}\n/**\n * matchesQuery -- Determines if an object would be returned by a Parse Query\n * It's a lightweight, where-clause only implementation of a full query engine.\n * Since we find queries that match objects, rather than objects that match\n * queries, we can avoid building a full-blown query tool.\n *\n * @param className\n * @param object\n * @param objects\n * @param query\n * @private\n * @returns {boolean}\n */\n\n\nfunction matchesQuery(className, object, objects, query) {\n  if (object.className !== className) {\n    return false;\n  }\n\n  let obj = object;\n  let q = query;\n\n  if (object.toJSON) {\n    obj = object.toJSON();\n  }\n\n  if (query.toJSON) {\n    q = query.toJSON().where;\n  }\n\n  obj.className = className;\n\n  for (const field in q) {\n    if (!matchesKeyConstraints(className, obj, objects, field, q[field])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction equalObjectsGeneric(obj, compareTo, eqlFn) {\n  if (Array.isArray(obj)) {\n    for (let i = 0; i < obj.length; i++) {\n      if (eqlFn(obj[i], compareTo)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  return eqlFn(obj, compareTo);\n}\n/**\n * Determines whether an object matches a single key's constraints\n *\n * @param className\n * @param object\n * @param objects\n * @param key\n * @param constraints\n * @private\n * @returns {boolean}\n */\n\n\nfunction matchesKeyConstraints(className, object, objects, key, constraints) {\n  if (constraints === null) {\n    return false;\n  }\n\n  if (key.indexOf('.') >= 0) {\n    // Key references a subobject\n    const keyComponents = key.split('.');\n    const subObjectKey = keyComponents[0];\n    const keyRemainder = keyComponents.slice(1).join('.');\n    return matchesKeyConstraints(className, object[subObjectKey] || {}, objects, keyRemainder, constraints);\n  }\n\n  let i;\n\n  if (key === '$or') {\n    for (i = 0; i < constraints.length; i++) {\n      if (matchesQuery(className, object, objects, constraints[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  if (key === '$and') {\n    for (i = 0; i < constraints.length; i++) {\n      if (!matchesQuery(className, object, objects, constraints[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (key === '$nor') {\n    for (i = 0; i < constraints.length; i++) {\n      if (matchesQuery(className, object, objects, constraints[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  if (key === '$relatedTo') {\n    // Bail! We can't handle relational queries locally\n    return false;\n  }\n\n  if (!/^[A-Za-z][0-9A-Za-z_]*$/.test(key)) {\n    throw new ParseError(ParseError.INVALID_KEY_NAME, `Invalid Key: ${key}`);\n  } // Equality (or Array contains) cases\n\n\n  if (typeof constraints !== 'object') {\n    if (Array.isArray(object[key])) {\n      return object[key].indexOf(constraints) > -1;\n    }\n\n    return object[key] === constraints;\n  }\n\n  let compareTo;\n\n  if (constraints.__type) {\n    if (constraints.__type === 'Pointer') {\n      return equalObjectsGeneric(object[key], constraints, (obj, ptr) => {\n        return typeof obj !== 'undefined' && ptr.className === obj.className && ptr.objectId === obj.objectId;\n      });\n    }\n\n    return equalObjectsGeneric(decode(object[key]), decode(constraints), equalObjects);\n  } // More complex cases\n\n\n  for (const condition in constraints) {\n    compareTo = constraints[condition];\n\n    if (compareTo.__type) {\n      compareTo = decode(compareTo);\n    } // Compare Date Object or Date String\n\n\n    if (toString.call(compareTo) === '[object Date]' || typeof compareTo === 'string' && new Date(compareTo) !== 'Invalid Date' && !isNaN(new Date(compareTo))) {\n      object[key] = new Date(object[key].iso ? object[key].iso : object[key]);\n    }\n\n    switch (condition) {\n      case '$lt':\n        if (object[key] >= compareTo) {\n          return false;\n        }\n\n        break;\n\n      case '$lte':\n        if (object[key] > compareTo) {\n          return false;\n        }\n\n        break;\n\n      case '$gt':\n        if (object[key] <= compareTo) {\n          return false;\n        }\n\n        break;\n\n      case '$gte':\n        if (object[key] < compareTo) {\n          return false;\n        }\n\n        break;\n\n      case '$ne':\n        if (equalObjects(object[key], compareTo)) {\n          return false;\n        }\n\n        break;\n\n      case '$in':\n        if (!contains(compareTo, object[key])) {\n          return false;\n        }\n\n        break;\n\n      case '$nin':\n        if (contains(compareTo, object[key])) {\n          return false;\n        }\n\n        break;\n\n      case '$all':\n        for (i = 0; i < compareTo.length; i++) {\n          if (object[key].indexOf(compareTo[i]) < 0) {\n            return false;\n          }\n        }\n\n        break;\n\n      case '$exists':\n        {\n          const propertyExists = typeof object[key] !== 'undefined';\n          const existenceIsRequired = constraints.$exists;\n\n          if (typeof constraints.$exists !== 'boolean') {\n            // The SDK will never submit a non-boolean for $exists, but if someone\n            // tries to submit a non-boolean for $exits outside the SDKs, just ignore it.\n            break;\n          }\n\n          if (!propertyExists && existenceIsRequired || propertyExists && !existenceIsRequired) {\n            return false;\n          }\n\n          break;\n        }\n\n      case '$regex':\n        {\n          if (typeof compareTo === 'object') {\n            return compareTo.test(object[key]);\n          } // JS doesn't support perl-style escaping\n\n\n          let expString = '';\n          let escapeEnd = -2;\n          let escapeStart = compareTo.indexOf('\\\\Q');\n\n          while (escapeStart > -1) {\n            // Add the unescaped portion\n            expString += compareTo.substring(escapeEnd + 2, escapeStart);\n            escapeEnd = compareTo.indexOf('\\\\E', escapeStart);\n\n            if (escapeEnd > -1) {\n              expString += compareTo.substring(escapeStart + 2, escapeEnd).replace(/\\\\\\\\\\\\\\\\E/g, '\\\\E').replace(/\\W/g, '\\\\$&');\n            }\n\n            escapeStart = compareTo.indexOf('\\\\Q', escapeEnd);\n          }\n\n          expString += compareTo.substring(Math.max(escapeStart, escapeEnd + 2));\n          let modifiers = constraints.$options || '';\n          modifiers = modifiers.replace('x', '').replace('s', ''); // Parse Server / Mongo support x and s modifiers but JS RegExp doesn't\n\n          const exp = new RegExp(expString, modifiers);\n\n          if (!exp.test(object[key])) {\n            return false;\n          }\n\n          break;\n        }\n\n      case '$nearSphere':\n        {\n          if (!compareTo || !object[key]) {\n            return false;\n          }\n\n          const distance = compareTo.radiansTo(object[key]);\n          const max = constraints.$maxDistance || Infinity;\n          return distance <= max;\n        }\n\n      case '$within':\n        {\n          if (!compareTo || !object[key]) {\n            return false;\n          }\n\n          const southWest = compareTo.$box[0];\n          const northEast = compareTo.$box[1];\n\n          if (southWest.latitude > northEast.latitude || southWest.longitude > northEast.longitude) {\n            // Invalid box, crosses the date line\n            return false;\n          }\n\n          return object[key].latitude > southWest.latitude && object[key].latitude < northEast.latitude && object[key].longitude > southWest.longitude && object[key].longitude < northEast.longitude;\n        }\n\n      case '$options':\n        // Not a query type, but a way to add options to $regex. Ignore and\n        // avoid the default\n        break;\n\n      case '$maxDistance':\n        // Not a query type, but a way to add a cap to $nearSphere. Ignore and\n        // avoid the default\n        break;\n\n      case '$select':\n        {\n          const subQueryObjects = objects.filter((obj, index, arr) => {\n            return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);\n          });\n\n          for (let i = 0; i < subQueryObjects.length; i += 1) {\n            const subObject = transformObject(subQueryObjects[i]);\n            return equalObjects(object[key], subObject[compareTo.key]);\n          }\n\n          return false;\n        }\n\n      case '$dontSelect':\n        {\n          const subQueryObjects = objects.filter((obj, index, arr) => {\n            return matchesQuery(compareTo.query.className, obj, arr, compareTo.query.where);\n          });\n\n          for (let i = 0; i < subQueryObjects.length; i += 1) {\n            const subObject = transformObject(subQueryObjects[i]);\n            return !equalObjects(object[key], subObject[compareTo.key]);\n          }\n\n          return false;\n        }\n\n      case '$inQuery':\n        {\n          const subQueryObjects = objects.filter((obj, index, arr) => {\n            return matchesQuery(compareTo.className, obj, arr, compareTo.where);\n          });\n\n          for (let i = 0; i < subQueryObjects.length; i += 1) {\n            const subObject = transformObject(subQueryObjects[i]);\n\n            if (object[key].className === subObject.className && object[key].objectId === subObject.objectId) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n      case '$notInQuery':\n        {\n          const subQueryObjects = objects.filter((obj, index, arr) => {\n            return matchesQuery(compareTo.className, obj, arr, compareTo.where);\n          });\n\n          for (let i = 0; i < subQueryObjects.length; i += 1) {\n            const subObject = transformObject(subQueryObjects[i]);\n\n            if (object[key].className === subObject.className && object[key].objectId === subObject.objectId) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n      case '$containedBy':\n        {\n          for (const value of object[key]) {\n            if (!contains(compareTo, value)) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n      case '$geoWithin':\n        {\n          const points = compareTo.$polygon.map(geoPoint => [geoPoint.latitude, geoPoint.longitude]);\n          const polygon = new ParsePolygon(points);\n          return polygon.containsPoint(object[key]);\n        }\n\n      case '$geoIntersects':\n        {\n          const polygon = new ParsePolygon(object[key].coordinates);\n          const point = new ParseGeoPoint(compareTo.$point);\n          return polygon.containsPoint(point);\n        }\n\n      default:\n        return false;\n    }\n  }\n\n  return true;\n}\n\nfunction validateQuery(query\n/*: any*/\n) {\n  let q = query;\n\n  if (query.toJSON) {\n    q = query.toJSON().where;\n  }\n\n  const specialQuerykeys = ['$and', '$or', '$nor', '_rperm', '_wperm', '_perishable_token', '_email_verify_token', '_email_verify_token_expires_at', '_account_lockout_expires_at', '_failed_login_count'];\n  Object.keys(q).forEach(key => {\n    if (q && q[key] && q[key].$regex) {\n      if (typeof q[key].$options === 'string') {\n        if (!q[key].$options.match(/^[imxs]+$/)) {\n          throw new ParseError(ParseError.INVALID_QUERY, `Bad $options value for query: ${q[key].$options}`);\n        }\n      }\n    }\n\n    if (specialQuerykeys.indexOf(key) < 0 && !key.match(/^[a-zA-Z][a-zA-Z0-9_.]*$/)) {\n      throw new ParseError(ParseError.INVALID_KEY_NAME, `Invalid key name: ${key}`);\n    }\n  });\n}\n\nconst OfflineQuery = {\n  matchesQuery: matchesQuery,\n  validateQuery: validateQuery\n};\nmodule.exports = OfflineQuery;"]},"metadata":{},"sourceType":"script"}