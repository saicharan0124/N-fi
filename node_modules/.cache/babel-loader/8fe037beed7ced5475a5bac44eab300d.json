{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.InternalWeb3Events = void 0;\n\nvar _events = _interopRequireDefault(require(\"events\"));\n\nvar _events2 = require(\"./Web3Connector/events\");\n\nvar _ethers = require(\"ethers\");\n\nvar _convert = require(\"./utils/convert\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Events emitted by Moralis\n\n\nconst InternalWeb3Events = Object.freeze({\n  ACCOUNT_CHANGED: 'accountChanged',\n  CHAIN_CHANGED: 'chainChanged',\n  PROVIDER_CONNECT: 'provider-connect',\n  PROVIDER_DISCONNECT: 'provider-disconnect',\n  WEB3_ENABLED: 'web3Enabled',\n  WEB3_DEACTIVATED: 'web3Deactivated'\n});\n/**\n * Wrapper for the internal web3 provider,\n * responsible for syncing data when connector connects/deactivates\n * Gives access to ethers functionalities, initialized by the connector\n */\n\nexports.InternalWeb3Events = InternalWeb3Events;\n\nclass InternalWeb3Provider extends _events.default {\n  constructor(connector) {\n    let anyNetwork = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let privateKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    super();\n\n    if (!connector) {\n      throw new Error('Cannot initialize InternalWeb3Provider without a connector');\n    }\n\n    this.connector = connector;\n    this.anyNetwork = anyNetwork;\n    this.privateKey = privateKey;\n    this.handleAccountChanged = this.handleAccountChanged.bind(this);\n    this.handleChainChanged = this.handleChainChanged.bind(this);\n    this.handleConnect = this.handleConnect.bind(this);\n    this.handleDisconnect = this.handleDisconnect.bind(this);\n  }\n\n  async activate(options) {\n    if (!this.connector) {\n      throw new Error('Cannot activate InternalWeb3Provider without a connector');\n    }\n\n    if (this.connector.on) {\n      this.connector.on(_events2.ConnectorEvents.ACCOUNT_CHANGED, this.handleAccountChanged);\n      this.connector.on(_events2.ConnectorEvents.CHAIN_CHANGED, this.handleChainChanged);\n      this.connector.on(_events2.ConnectorEvents.CONNECT, this.handleConnect);\n      this.connector.on(_events2.ConnectorEvents.DISCONNECT, this.handleDisconnect);\n    }\n\n    const {\n      provider,\n      chainId,\n      account\n    } = await this.connector.activate(options);\n    this.provider = provider;\n    this.chainId = chainId;\n    this.account = account;\n    const network = this.anyNetwork ? 'any' : (0, _convert.fromHexToDecimal)(chainId);\n    this.web3 = new _ethers.ethers.providers.Web3Provider(provider, network);\n    return {\n      provider,\n      chainId,\n      account,\n      web3: this.web3\n    };\n  } // Returns a provider (or wallet if a privateKey is provided) that can sign messages (throws if not possible, ie. the account cannot sign)\n\n\n  get signer() {\n    return this.privateKey != null ? new _ethers.ethers.Wallet(this.privateKey, this.web3) : this.web3.getSigner(this.account);\n  } // Returns a provider (or wallet if a privateKey is provided) that can sign messages or the normal web3 provider as fallback\n\n\n  get signerOrProvider() {\n    try {\n      if (this.account) {\n        return this.privateKey != null ? new _ethers.ethers.Wallet(this.privateKey, this.web3) : this.web3.getSigner(this.account);\n      }\n\n      return this.web3;\n    } catch (error) {\n      return this.web3;\n    }\n  }\n\n  handleChainChanged(chainId) {\n    this.chainId = chainId;\n    this.web3 = new _ethers.ethers.providers.Web3Provider(this.provider, (0, _convert.fromHexToDecimal)(chainId));\n    this.emit(InternalWeb3Events.CHAIN_CHANGED, chainId);\n  }\n\n  handleAccountChanged(account) {\n    this.account = account;\n    this.emit(InternalWeb3Events.ACCOUNT_CHANGED, account);\n  } // Handle Connect events fired from connectors\n\n\n  handleConnect(connectInfo) {\n    this.emit(InternalWeb3Events.PROVIDER_CONNECT, connectInfo);\n  } // Handle Disconnect events fired from connectors\n\n\n  handleDisconnect(error) {\n    this.emit(InternalWeb3Events.PROVIDER_DISCONNECT, error);\n  }\n\n  async deactivate() {\n    this.account = null;\n    this.chianId = null;\n    this.web3 = null;\n    this.provider = null;\n    this.privateKey = null;\n\n    if (this.connector) {\n      if (this.connector.removeListener) {\n        this.connector.removeListener(InternalWeb3Events.CHAIN_CHANGED, this.handleChainChanged);\n        this.connector.removeListener(InternalWeb3Events.ACCOUNT_CHANGED, this.handleAccountChanged);\n        this.connector.removeListener(InternalWeb3Events.PROVIDER_CONNECT, this.handleConnect);\n        this.connector.removeListener(InternalWeb3Events.PROVIDER_DISCONNECT, this.handleDisconnect);\n      }\n\n      if (this.connector.deactivate) {\n        await this.connector.deactivate();\n      }\n    }\n\n    this.connector = null;\n  }\n\n}\n\nvar _default = InternalWeb3Provider;\nexports.default = _default;","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/moralis/lib/node/InternalWeb3Provider.js"],"names":["Object","defineProperty","exports","value","default","InternalWeb3Events","_events","_interopRequireDefault","require","_events2","_ethers","_convert","obj","__esModule","freeze","ACCOUNT_CHANGED","CHAIN_CHANGED","PROVIDER_CONNECT","PROVIDER_DISCONNECT","WEB3_ENABLED","WEB3_DEACTIVATED","InternalWeb3Provider","constructor","connector","anyNetwork","privateKey","Error","handleAccountChanged","bind","handleChainChanged","handleConnect","handleDisconnect","activate","options","on","ConnectorEvents","CONNECT","DISCONNECT","provider","chainId","account","network","fromHexToDecimal","web3","ethers","providers","Web3Provider","signer","Wallet","getSigner","signerOrProvider","error","emit","connectInfo","deactivate","chianId","removeListener","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.InternalWeb3Events = void 0;\n\nvar _events = _interopRequireDefault(require(\"events\"));\n\nvar _events2 = require(\"./Web3Connector/events\");\n\nvar _ethers = require(\"ethers\");\n\nvar _convert = require(\"./utils/convert\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // Events emitted by Moralis\n\n\nconst InternalWeb3Events = Object.freeze({\n  ACCOUNT_CHANGED: 'accountChanged',\n  CHAIN_CHANGED: 'chainChanged',\n  PROVIDER_CONNECT: 'provider-connect',\n  PROVIDER_DISCONNECT: 'provider-disconnect',\n  WEB3_ENABLED: 'web3Enabled',\n  WEB3_DEACTIVATED: 'web3Deactivated'\n});\n/**\n * Wrapper for the internal web3 provider,\n * responsible for syncing data when connector connects/deactivates\n * Gives access to ethers functionalities, initialized by the connector\n */\n\nexports.InternalWeb3Events = InternalWeb3Events;\n\nclass InternalWeb3Provider extends _events.default {\n  constructor(connector, anyNetwork = false, privateKey = null) {\n    super();\n\n    if (!connector) {\n      throw new Error('Cannot initialize InternalWeb3Provider without a connector');\n    }\n\n    this.connector = connector;\n    this.anyNetwork = anyNetwork;\n    this.privateKey = privateKey;\n    this.handleAccountChanged = this.handleAccountChanged.bind(this);\n    this.handleChainChanged = this.handleChainChanged.bind(this);\n    this.handleConnect = this.handleConnect.bind(this);\n    this.handleDisconnect = this.handleDisconnect.bind(this);\n  }\n\n  async activate(options) {\n    if (!this.connector) {\n      throw new Error('Cannot activate InternalWeb3Provider without a connector');\n    }\n\n    if (this.connector.on) {\n      this.connector.on(_events2.ConnectorEvents.ACCOUNT_CHANGED, this.handleAccountChanged);\n      this.connector.on(_events2.ConnectorEvents.CHAIN_CHANGED, this.handleChainChanged);\n      this.connector.on(_events2.ConnectorEvents.CONNECT, this.handleConnect);\n      this.connector.on(_events2.ConnectorEvents.DISCONNECT, this.handleDisconnect);\n    }\n\n    const {\n      provider,\n      chainId,\n      account\n    } = await this.connector.activate(options);\n    this.provider = provider;\n    this.chainId = chainId;\n    this.account = account;\n    const network = this.anyNetwork ? 'any' : (0, _convert.fromHexToDecimal)(chainId);\n    this.web3 = new _ethers.ethers.providers.Web3Provider(provider, network);\n    return {\n      provider,\n      chainId,\n      account,\n      web3: this.web3\n    };\n  } // Returns a provider (or wallet if a privateKey is provided) that can sign messages (throws if not possible, ie. the account cannot sign)\n\n\n  get signer() {\n    return this.privateKey != null ? new _ethers.ethers.Wallet(this.privateKey, this.web3) : this.web3.getSigner(this.account);\n  } // Returns a provider (or wallet if a privateKey is provided) that can sign messages or the normal web3 provider as fallback\n\n\n  get signerOrProvider() {\n    try {\n      if (this.account) {\n        return this.privateKey != null ? new _ethers.ethers.Wallet(this.privateKey, this.web3) : this.web3.getSigner(this.account);\n      }\n\n      return this.web3;\n    } catch (error) {\n      return this.web3;\n    }\n  }\n\n  handleChainChanged(chainId) {\n    this.chainId = chainId;\n    this.web3 = new _ethers.ethers.providers.Web3Provider(this.provider, (0, _convert.fromHexToDecimal)(chainId));\n    this.emit(InternalWeb3Events.CHAIN_CHANGED, chainId);\n  }\n\n  handleAccountChanged(account) {\n    this.account = account;\n    this.emit(InternalWeb3Events.ACCOUNT_CHANGED, account);\n  } // Handle Connect events fired from connectors\n\n\n  handleConnect(connectInfo) {\n    this.emit(InternalWeb3Events.PROVIDER_CONNECT, connectInfo);\n  } // Handle Disconnect events fired from connectors\n\n\n  handleDisconnect(error) {\n    this.emit(InternalWeb3Events.PROVIDER_DISCONNECT, error);\n  }\n\n  async deactivate() {\n    this.account = null;\n    this.chianId = null;\n    this.web3 = null;\n    this.provider = null;\n    this.privateKey = null;\n\n    if (this.connector) {\n      if (this.connector.removeListener) {\n        this.connector.removeListener(InternalWeb3Events.CHAIN_CHANGED, this.handleChainChanged);\n        this.connector.removeListener(InternalWeb3Events.ACCOUNT_CHANGED, this.handleAccountChanged);\n        this.connector.removeListener(InternalWeb3Events.PROVIDER_CONNECT, this.handleConnect);\n        this.connector.removeListener(InternalWeb3Events.PROVIDER_DISCONNECT, this.handleDisconnect);\n      }\n\n      if (this.connector.deactivate) {\n        await this.connector.deactivate();\n      }\n    }\n\n    this.connector = null;\n  }\n\n}\n\nvar _default = InternalWeb3Provider;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}