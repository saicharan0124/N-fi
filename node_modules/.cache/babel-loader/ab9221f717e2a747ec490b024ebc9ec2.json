{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _createSigningData = _interopRequireDefault(require(\"./createSigningData\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* global window */\n\n\nlet web3EnablePromise = null;\n\nclass MoralisDot {\n  static web3IsInjected() {\n    return Object.keys(window.injectedWeb3).length !== 0;\n  }\n\n  static async enable(opts) {\n    let type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'polkadot-js';\n\n    var _window$injectedWeb, _window$injectedWeb$t;\n\n    if (web3EnablePromise) return web3EnablePromise;\n    web3EnablePromise = (_window$injectedWeb = window.injectedWeb3) === null || _window$injectedWeb === void 0 ? void 0 : (_window$injectedWeb$t = _window$injectedWeb[type]) === null || _window$injectedWeb$t === void 0 ? void 0 : _window$injectedWeb$t.enable(opts);\n    return web3EnablePromise;\n  }\n\n  static async authenticate(opts) {\n    var _opts$name;\n\n    MoralisDot.web3 = await MoralisDot.enable((_opts$name = opts === null || opts === void 0 ? void 0 : opts.name) !== null && _opts$name !== void 0 ? _opts$name : 'Moralis');\n    const allAccounts = await MoralisDot.web3.accounts.get();\n    const account = allAccounts[0];\n    const address = account === null || account === void 0 ? void 0 : account.address;\n    if (!address) throw new Error('Address not found');\n    const dotAddress = address;\n    const message = MoralisDot.getSigningData();\n    const data = await (0, _createSigningData.default)(message);\n    const signature = await MoralisDot.sign(address, data);\n    const user = await _ParseUser.default.logInWith('moralisDot', {\n      authData: {\n        id: dotAddress,\n        signature,\n        data\n      }\n    });\n    if (!user) throw new Error('Could not get user');\n    await user.setACL(new _ParseACL.default(user));\n    user.addAllUnique('dotAccounts', [dotAddress]);\n    user.set('dotAddress', dotAddress);\n    await user.save();\n    return user;\n  }\n\n  static async link(account, options) {\n    const message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisDot.getSigningData();\n    const user = await _ParseUser.default.current();\n    const dotAddress = account;\n\n    const DotAddress = _ParseObject.default.extend('_DotAddress');\n\n    const query = new _ParseQuery.default(DotAddress);\n    const dotAddressRecord = await query.get(dotAddress).catch(() => null);\n\n    if (!dotAddressRecord) {\n      const data = await (0, _createSigningData.default)(message);\n      const signature = await MoralisDot.sign(dotAddress, data);\n      await user.linkWith('moralisDot', {\n        authData: {\n          id: dotAddress,\n          signature,\n          data\n        }\n      });\n    }\n\n    user.addAllUnique('dotAccounts', [dotAddress]);\n    user.set('dotAddress', dotAddress);\n    await user.save();\n    return user;\n  }\n\n  static async unlink(account) {\n    var _user$get;\n\n    const accountsLower = account;\n\n    const DotAddress = _ParseObject.default.extend('_DotAddress');\n\n    const query = new _ParseQuery.default(DotAddress);\n    const dotAddressRecord = await query.get(accountsLower);\n    await dotAddressRecord.destroy();\n    const user = await _ParseUser.default.current();\n    const accounts = (_user$get = user.get('dotAccounts')) !== null && _user$get !== void 0 ? _user$get : [];\n    const nextAccounts = accounts.filter(v => v !== accountsLower);\n    user.set('dotAccounts', nextAccounts);\n    user.set('dotAddress', nextAccounts[0]);\n    await user._unlinkFrom('moralisDot');\n    await user.save();\n    return user;\n  }\n\n  static async sign(address, data) {\n    if (!web3EnablePromise) throw new Error('Must enable MoralisDot');\n    const web3 = await web3EnablePromise;\n\n    if (!web3.signer) {\n      throw new Error('No signer found');\n    }\n\n    const {\n      signature\n    } = await web3.signer.signRaw({\n      address,\n      data: stringToHex(data),\n      type: 'bytes'\n    });\n    return signature;\n  }\n\n  static getSigningData() {\n    return 'Moralis Authentication';\n  }\n\n}\n\nvar _default = MoralisDot;\nexports.default = _default;\n\nfunction stringToHex(value) {\n  return toHexString(stringToU8a(value));\n}\n\nfunction stringToU8a(value) {\n  const u8a = new Uint8Array(value.length);\n\n  for (let i = 0; i < value.length; i++) {\n    u8a[i] = value.charCodeAt(i);\n  }\n\n  return u8a;\n}\n\nfunction toHexString(byteArray) {\n  return `0x${Array.from(byteArray, byte => {\n    // eslint-disable-next-line no-bitwise\n    return `0${(byte & 0xff).toString(16)}`.slice(-2);\n  }).join('')}`;\n}","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/moralis/lib/node/MoralisDot.js"],"names":["Object","defineProperty","exports","value","default","_ParseUser","_interopRequireDefault","require","_ParseQuery","_ParseObject","_ParseACL","_createSigningData","obj","__esModule","web3EnablePromise","MoralisDot","web3IsInjected","keys","window","injectedWeb3","length","enable","opts","type","_window$injectedWeb","_window$injectedWeb$t","authenticate","_opts$name","web3","name","allAccounts","accounts","get","account","address","Error","dotAddress","message","getSigningData","data","signature","sign","user","logInWith","authData","id","setACL","addAllUnique","set","save","link","options","signingMessage","current","DotAddress","extend","query","dotAddressRecord","catch","linkWith","unlink","_user$get","accountsLower","destroy","nextAccounts","filter","v","_unlinkFrom","signer","signRaw","stringToHex","_default","toHexString","stringToU8a","u8a","Uint8Array","i","charCodeAt","byteArray","Array","from","byte","toString","slice","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,IAAIC,WAAW,GAAGF,sBAAsB,CAACC,OAAO,CAAC,cAAD,CAAR,CAAxC;;AAEA,IAAIE,YAAY,GAAGH,sBAAsB,CAACC,OAAO,CAAC,eAAD,CAAR,CAAzC;;AAEA,IAAIG,SAAS,GAAGJ,sBAAsB,CAACC,OAAO,CAAC,YAAD,CAAR,CAAtC;;AAEA,IAAII,kBAAkB,GAAGL,sBAAsB,CAACC,OAAO,CAAC,qBAAD,CAAR,CAA/C;;AAEA,SAASD,sBAAT,CAAgCM,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACnCR,IAAAA,OAAO,EAAEQ;AAD0B,GAArC;AAGD;AACD;;;AAGA,IAAIE,iBAAiB,GAAG,IAAxB;;AAEA,MAAMC,UAAN,CAAiB;AACM,SAAdC,cAAc,GAAG;AACtB,WAAOhB,MAAM,CAACiB,IAAP,CAAYC,MAAM,CAACC,YAAnB,EAAiCC,MAAjC,KAA4C,CAAnD;AACD;;AAEkB,eAANC,MAAM,CAACC,IAAD,EAA6B;AAAA,QAAtBC,IAAsB,uEAAf,aAAe;;AAC9C,QAAIC,mBAAJ,EAAyBC,qBAAzB;;AAEA,QAAIX,iBAAJ,EAAuB,OAAOA,iBAAP;AACvBA,IAAAA,iBAAiB,GAAG,CAACU,mBAAmB,GAAGN,MAAM,CAACC,YAA9B,MAAgD,IAAhD,IAAwDK,mBAAmB,KAAK,KAAK,CAArF,GAAyF,KAAK,CAA9F,GAAkG,CAACC,qBAAqB,GAAGD,mBAAmB,CAACD,IAAD,CAA5C,MAAwD,IAAxD,IAAgEE,qBAAqB,KAAK,KAAK,CAA/F,GAAmG,KAAK,CAAxG,GAA4GA,qBAAqB,CAACJ,MAAtB,CAA6BC,IAA7B,CAAlO;AACA,WAAOR,iBAAP;AACD;;AAEwB,eAAZY,YAAY,CAACJ,IAAD,EAAO;AAC9B,QAAIK,UAAJ;;AAEAZ,IAAAA,UAAU,CAACa,IAAX,GAAkB,MAAMb,UAAU,CAACM,MAAX,CAAkB,CAACM,UAAU,GAAGL,IAAI,KAAK,IAAT,IAAiBA,IAAI,KAAK,KAAK,CAA/B,GAAmC,KAAK,CAAxC,GAA4CA,IAAI,CAACO,IAA/D,MAAyE,IAAzE,IAAiFF,UAAU,KAAK,KAAK,CAArG,GAAyGA,UAAzG,GAAsH,SAAxI,CAAxB;AACA,UAAMG,WAAW,GAAG,MAAMf,UAAU,CAACa,IAAX,CAAgBG,QAAhB,CAAyBC,GAAzB,EAA1B;AACA,UAAMC,OAAO,GAAGH,WAAW,CAAC,CAAD,CAA3B;AACA,UAAMI,OAAO,GAAGD,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACC,OAA1E;AACA,QAAI,CAACA,OAAL,EAAc,MAAM,IAAIC,KAAJ,CAAU,mBAAV,CAAN;AACd,UAAMC,UAAU,GAAGF,OAAnB;AACA,UAAMG,OAAO,GAAGtB,UAAU,CAACuB,cAAX,EAAhB;AACA,UAAMC,IAAI,GAAG,MAAM,CAAC,GAAG5B,kBAAkB,CAACP,OAAvB,EAAgCiC,OAAhC,CAAnB;AACA,UAAMG,SAAS,GAAG,MAAMzB,UAAU,CAAC0B,IAAX,CAAgBP,OAAhB,EAAyBK,IAAzB,CAAxB;AACA,UAAMG,IAAI,GAAG,MAAMrC,UAAU,CAACD,OAAX,CAAmBuC,SAAnB,CAA6B,YAA7B,EAA2C;AAC5DC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,EAAE,EAAET,UADI;AAERI,QAAAA,SAFQ;AAGRD,QAAAA;AAHQ;AADkD,KAA3C,CAAnB;AAOA,QAAI,CAACG,IAAL,EAAW,MAAM,IAAIP,KAAJ,CAAU,oBAAV,CAAN;AACX,UAAMO,IAAI,CAACI,MAAL,CAAY,IAAIpC,SAAS,CAACN,OAAd,CAAsBsC,IAAtB,CAAZ,CAAN;AACAA,IAAAA,IAAI,CAACK,YAAL,CAAkB,aAAlB,EAAiC,CAACX,UAAD,CAAjC;AACAM,IAAAA,IAAI,CAACM,GAAL,CAAS,YAAT,EAAuBZ,UAAvB;AACA,UAAMM,IAAI,CAACO,IAAL,EAAN;AACA,WAAOP,IAAP;AACD;;AAEgB,eAAJQ,IAAI,CAACjB,OAAD,EAAUkB,OAAV,EAAmB;AAClC,UAAMd,OAAO,GAAG,CAACc,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAK,CAArC,GAAyC,KAAK,CAA9C,GAAkDA,OAAO,CAACC,cAA3D,KAA8ErC,UAAU,CAACuB,cAAX,EAA9F;AACA,UAAMI,IAAI,GAAG,MAAMrC,UAAU,CAACD,OAAX,CAAmBiD,OAAnB,EAAnB;AACA,UAAMjB,UAAU,GAAGH,OAAnB;;AAEA,UAAMqB,UAAU,GAAG7C,YAAY,CAACL,OAAb,CAAqBmD,MAArB,CAA4B,aAA5B,CAAnB;;AAEA,UAAMC,KAAK,GAAG,IAAIhD,WAAW,CAACJ,OAAhB,CAAwBkD,UAAxB,CAAd;AACA,UAAMG,gBAAgB,GAAG,MAAMD,KAAK,CAACxB,GAAN,CAAUI,UAAV,EAAsBsB,KAAtB,CAA4B,MAAM,IAAlC,CAA/B;;AAEA,QAAI,CAACD,gBAAL,EAAuB;AACrB,YAAMlB,IAAI,GAAG,MAAM,CAAC,GAAG5B,kBAAkB,CAACP,OAAvB,EAAgCiC,OAAhC,CAAnB;AACA,YAAMG,SAAS,GAAG,MAAMzB,UAAU,CAAC0B,IAAX,CAAgBL,UAAhB,EAA4BG,IAA5B,CAAxB;AACA,YAAMG,IAAI,CAACiB,QAAL,CAAc,YAAd,EAA4B;AAChCf,QAAAA,QAAQ,EAAE;AACRC,UAAAA,EAAE,EAAET,UADI;AAERI,UAAAA,SAFQ;AAGRD,UAAAA;AAHQ;AADsB,OAA5B,CAAN;AAOD;;AAEDG,IAAAA,IAAI,CAACK,YAAL,CAAkB,aAAlB,EAAiC,CAACX,UAAD,CAAjC;AACAM,IAAAA,IAAI,CAACM,GAAL,CAAS,YAAT,EAAuBZ,UAAvB;AACA,UAAMM,IAAI,CAACO,IAAL,EAAN;AACA,WAAOP,IAAP;AACD;;AAEkB,eAANkB,MAAM,CAAC3B,OAAD,EAAU;AAC3B,QAAI4B,SAAJ;;AAEA,UAAMC,aAAa,GAAG7B,OAAtB;;AAEA,UAAMqB,UAAU,GAAG7C,YAAY,CAACL,OAAb,CAAqBmD,MAArB,CAA4B,aAA5B,CAAnB;;AAEA,UAAMC,KAAK,GAAG,IAAIhD,WAAW,CAACJ,OAAhB,CAAwBkD,UAAxB,CAAd;AACA,UAAMG,gBAAgB,GAAG,MAAMD,KAAK,CAACxB,GAAN,CAAU8B,aAAV,CAA/B;AACA,UAAML,gBAAgB,CAACM,OAAjB,EAAN;AACA,UAAMrB,IAAI,GAAG,MAAMrC,UAAU,CAACD,OAAX,CAAmBiD,OAAnB,EAAnB;AACA,UAAMtB,QAAQ,GAAG,CAAC8B,SAAS,GAAGnB,IAAI,CAACV,GAAL,CAAS,aAAT,CAAb,MAA0C,IAA1C,IAAkD6B,SAAS,KAAK,KAAK,CAArE,GAAyEA,SAAzE,GAAqF,EAAtG;AACA,UAAMG,YAAY,GAAGjC,QAAQ,CAACkC,MAAT,CAAgBC,CAAC,IAAIA,CAAC,KAAKJ,aAA3B,CAArB;AACApB,IAAAA,IAAI,CAACM,GAAL,CAAS,aAAT,EAAwBgB,YAAxB;AACAtB,IAAAA,IAAI,CAACM,GAAL,CAAS,YAAT,EAAuBgB,YAAY,CAAC,CAAD,CAAnC;AACA,UAAMtB,IAAI,CAACyB,WAAL,CAAiB,YAAjB,CAAN;AACA,UAAMzB,IAAI,CAACO,IAAL,EAAN;AACA,WAAOP,IAAP;AACD;;AAEgB,eAAJD,IAAI,CAACP,OAAD,EAAUK,IAAV,EAAgB;AAC/B,QAAI,CAACzB,iBAAL,EAAwB,MAAM,IAAIqB,KAAJ,CAAU,wBAAV,CAAN;AACxB,UAAMP,IAAI,GAAG,MAAMd,iBAAnB;;AAEA,QAAI,CAACc,IAAI,CAACwC,MAAV,EAAkB;AAChB,YAAM,IAAIjC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,UAAM;AACJK,MAAAA;AADI,QAEF,MAAMZ,IAAI,CAACwC,MAAL,CAAYC,OAAZ,CAAoB;AAC5BnC,MAAAA,OAD4B;AAE5BK,MAAAA,IAAI,EAAE+B,WAAW,CAAC/B,IAAD,CAFW;AAG5BhB,MAAAA,IAAI,EAAE;AAHsB,KAApB,CAFV;AAOA,WAAOiB,SAAP;AACD;;AAEoB,SAAdF,cAAc,GAAG;AACtB,WAAO,wBAAP;AACD;;AA5Gc;;AAgHjB,IAAIiC,QAAQ,GAAGxD,UAAf;AACAb,OAAO,CAACE,OAAR,GAAkBmE,QAAlB;;AAEA,SAASD,WAAT,CAAqBnE,KAArB,EAA4B;AAC1B,SAAOqE,WAAW,CAACC,WAAW,CAACtE,KAAD,CAAZ,CAAlB;AACD;;AAED,SAASsE,WAAT,CAAqBtE,KAArB,EAA4B;AAC1B,QAAMuE,GAAG,GAAG,IAAIC,UAAJ,CAAexE,KAAK,CAACiB,MAArB,CAAZ;;AAEA,OAAK,IAAIwD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzE,KAAK,CAACiB,MAA1B,EAAkCwD,CAAC,EAAnC,EAAuC;AACrCF,IAAAA,GAAG,CAACE,CAAD,CAAH,GAASzE,KAAK,CAAC0E,UAAN,CAAiBD,CAAjB,CAAT;AACD;;AAED,SAAOF,GAAP;AACD;;AAED,SAASF,WAAT,CAAqBM,SAArB,EAAgC;AAC9B,SAAQ,KAAIC,KAAK,CAACC,IAAN,CAAWF,SAAX,EAAsBG,IAAI,IAAI;AACxC;AACA,WAAQ,IAAG,CAACA,IAAI,GAAG,IAAR,EAAcC,QAAd,CAAuB,EAAvB,CAA2B,EAA/B,CAAiCC,KAAjC,CAAuC,CAAC,CAAxC,CAAP;AACD,GAHW,EAGTC,IAHS,CAGJ,EAHI,CAGA,EAHZ;AAID","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseObject = _interopRequireDefault(require(\"./ParseObject\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _createSigningData = _interopRequireDefault(require(\"./createSigningData\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* global window */\n\n\nlet web3EnablePromise = null;\n\nclass MoralisDot {\n  static web3IsInjected() {\n    return Object.keys(window.injectedWeb3).length !== 0;\n  }\n\n  static async enable(opts, type = 'polkadot-js') {\n    var _window$injectedWeb, _window$injectedWeb$t;\n\n    if (web3EnablePromise) return web3EnablePromise;\n    web3EnablePromise = (_window$injectedWeb = window.injectedWeb3) === null || _window$injectedWeb === void 0 ? void 0 : (_window$injectedWeb$t = _window$injectedWeb[type]) === null || _window$injectedWeb$t === void 0 ? void 0 : _window$injectedWeb$t.enable(opts);\n    return web3EnablePromise;\n  }\n\n  static async authenticate(opts) {\n    var _opts$name;\n\n    MoralisDot.web3 = await MoralisDot.enable((_opts$name = opts === null || opts === void 0 ? void 0 : opts.name) !== null && _opts$name !== void 0 ? _opts$name : 'Moralis');\n    const allAccounts = await MoralisDot.web3.accounts.get();\n    const account = allAccounts[0];\n    const address = account === null || account === void 0 ? void 0 : account.address;\n    if (!address) throw new Error('Address not found');\n    const dotAddress = address;\n    const message = MoralisDot.getSigningData();\n    const data = await (0, _createSigningData.default)(message);\n    const signature = await MoralisDot.sign(address, data);\n    const user = await _ParseUser.default.logInWith('moralisDot', {\n      authData: {\n        id: dotAddress,\n        signature,\n        data\n      }\n    });\n    if (!user) throw new Error('Could not get user');\n    await user.setACL(new _ParseACL.default(user));\n    user.addAllUnique('dotAccounts', [dotAddress]);\n    user.set('dotAddress', dotAddress);\n    await user.save();\n    return user;\n  }\n\n  static async link(account, options) {\n    const message = (options === null || options === void 0 ? void 0 : options.signingMessage) || MoralisDot.getSigningData();\n    const user = await _ParseUser.default.current();\n    const dotAddress = account;\n\n    const DotAddress = _ParseObject.default.extend('_DotAddress');\n\n    const query = new _ParseQuery.default(DotAddress);\n    const dotAddressRecord = await query.get(dotAddress).catch(() => null);\n\n    if (!dotAddressRecord) {\n      const data = await (0, _createSigningData.default)(message);\n      const signature = await MoralisDot.sign(dotAddress, data);\n      await user.linkWith('moralisDot', {\n        authData: {\n          id: dotAddress,\n          signature,\n          data\n        }\n      });\n    }\n\n    user.addAllUnique('dotAccounts', [dotAddress]);\n    user.set('dotAddress', dotAddress);\n    await user.save();\n    return user;\n  }\n\n  static async unlink(account) {\n    var _user$get;\n\n    const accountsLower = account;\n\n    const DotAddress = _ParseObject.default.extend('_DotAddress');\n\n    const query = new _ParseQuery.default(DotAddress);\n    const dotAddressRecord = await query.get(accountsLower);\n    await dotAddressRecord.destroy();\n    const user = await _ParseUser.default.current();\n    const accounts = (_user$get = user.get('dotAccounts')) !== null && _user$get !== void 0 ? _user$get : [];\n    const nextAccounts = accounts.filter(v => v !== accountsLower);\n    user.set('dotAccounts', nextAccounts);\n    user.set('dotAddress', nextAccounts[0]);\n    await user._unlinkFrom('moralisDot');\n    await user.save();\n    return user;\n  }\n\n  static async sign(address, data) {\n    if (!web3EnablePromise) throw new Error('Must enable MoralisDot');\n    const web3 = await web3EnablePromise;\n\n    if (!web3.signer) {\n      throw new Error('No signer found');\n    }\n\n    const {\n      signature\n    } = await web3.signer.signRaw({\n      address,\n      data: stringToHex(data),\n      type: 'bytes'\n    });\n    return signature;\n  }\n\n  static getSigningData() {\n    return 'Moralis Authentication';\n  }\n\n}\n\nvar _default = MoralisDot;\nexports.default = _default;\n\nfunction stringToHex(value) {\n  return toHexString(stringToU8a(value));\n}\n\nfunction stringToU8a(value) {\n  const u8a = new Uint8Array(value.length);\n\n  for (let i = 0; i < value.length; i++) {\n    u8a[i] = value.charCodeAt(i);\n  }\n\n  return u8a;\n}\n\nfunction toHexString(byteArray) {\n  return `0x${Array.from(byteArray, byte => {\n    // eslint-disable-next-line no-bitwise\n    return `0${(byte & 0xff).toString(16)}`.slice(-2);\n  }).join('')}`;\n}"]},"metadata":{},"sourceType":"script"}