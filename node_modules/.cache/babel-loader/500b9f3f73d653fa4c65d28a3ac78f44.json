{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow-weak\n */\n\n\nconst {\n  v4: uuidv4\n} = require('uuid');\n\nlet registered = false;\n/**\n * Provides utility functions for working with Anonymously logged-in users. <br />\n * Anonymous users have some unique characteristics:\n * <ul>\n *  <li>Anonymous users don't need a user name or password.</li>\n *  <ul>\n *    <li>Once logged out, an anonymous user cannot be recovered.</li>\n *  </ul>\n *  <li>signUp converts an anonymous user to a standard user with the given username and password.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user is retained.</li>\n *  </ul>\n *  <li>logIn switches users without converting the anonymous user.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user will be lost.</li>\n *  </ul>\n *  <li>Service logIn (e.g. Facebook, Twitter) will attempt to convert\n *  the anonymous user into a standard user by linking it to the service.</li>\n *  <ul>\n *    <li>If a user already exists that is linked to the service, it will instead switch to the existing user.</li>\n *  </ul>\n *  <li>Service linking (e.g. Facebook, Twitter) will convert the anonymous user\n *  into a standard user by linking it to the service.</li>\n * </ul>\n *\n * @class Parse.AnonymousUtils\n * @static\n */\n\nconst AnonymousUtils = {\n  /**\n   * Gets whether the user has their account linked to anonymous user.\n   *\n   * @function isLinked\n   * @name Parse.AnonymousUtils.isLinked\n   * @param {Parse.User} user User to check for.\n   *     The user must be logged in on this device.\n   * @returns {boolean} <code>true</code> if the user has their account\n   *     linked to an anonymous user.\n   * @static\n   */\n  isLinked(user\n  /*: ParseUser*/\n  ) {\n    const provider = this._getAuthProvider();\n\n    return user._isLinked(provider.getAuthType());\n  },\n\n  /**\n   * Logs in a user Anonymously.\n   *\n   * @function logIn\n   * @name Parse.AnonymousUtils.logIn\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Logged in user\n   * @static\n   */\n  logIn(options\n  /*:: ?: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    const provider = this._getAuthProvider();\n\n    return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n\n  /**\n   * Links Anonymous User to an existing PFUser.\n   *\n   * @function link\n   * @name Parse.AnonymousUtils.link\n   * @param {Parse.User} user User to link. This must be the current user.\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Linked with User\n   * @static\n   */\n  link(user\n  /*: ParseUser*/\n  , options\n  /*:: ?: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    const provider = this._getAuthProvider();\n\n    return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n\n  _getAuthProvider() {\n    const provider = {\n      restoreAuthentication() {\n        return true;\n      },\n\n      getAuthType() {\n        return 'anonymous';\n      },\n\n      getAuthData() {\n        return {\n          authData: {\n            id: uuidv4()\n          }\n        };\n      }\n\n    };\n\n    if (!registered) {\n      _ParseUser.default._registerAuthenticationProvider(provider);\n\n      registered = true;\n    }\n\n    return provider;\n  }\n\n};\nvar _default = AnonymousUtils;\nexports.default = _default;","map":{"version":3,"sources":["S:/final hackathon/nfi3/node_modules/moralis/lib/node/AnonymousUtils.js"],"names":["Object","defineProperty","exports","value","default","_ParseUser","_interopRequireDefault","require","obj","__esModule","v4","uuidv4","registered","AnonymousUtils","isLinked","user","provider","_getAuthProvider","_isLinked","getAuthType","logIn","options","logInWith","getAuthData","link","linkWith","restoreAuthentication","authData","id","_registerAuthenticationProvider","_default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,UAAU,GAAGC,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAvC;;AAEA,SAASD,sBAAT,CAAgCE,GAAhC,EAAqC;AACnC,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AACnCJ,IAAAA,OAAO,EAAEI;AAD0B,GAArC;AAGD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,MAAM;AACJE,EAAAA,EAAE,EAAEC;AADA,IAEFJ,OAAO,CAAC,MAAD,CAFX;;AAIA,IAAIK,UAAU,GAAG,KAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,cAAc,GAAG;AACrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,CAACC;AACT;AADQ,IAEN;AACA,UAAMC,QAAQ,GAAG,KAAKC,gBAAL,EAAjB;;AAEA,WAAOF,IAAI,CAACG,SAAL,CAAeF,QAAQ,CAACG,WAAT,EAAf,CAAP;AACD,GAlBoB;;AAoBrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,KAAK,CAACC;AACN;AADK;AAGL;AACA;AACE,UAAML,QAAQ,GAAG,KAAKC,gBAAL,EAAjB;;AAEA,WAAOZ,UAAU,CAACD,OAAX,CAAmBkB,SAAnB,CAA6BN,QAAQ,CAACG,WAAT,EAA7B,EAAqDH,QAAQ,CAACO,WAAT,EAArD,EAA6EF,OAA7E,CAAP;AACD,GArCoB;;AAuCrB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,EAAAA,IAAI,CAACT;AACL;AADI,IAEFM;AACF;AAHI;AAKJ;AACA;AACE,UAAML,QAAQ,GAAG,KAAKC,gBAAL,EAAjB;;AAEA,WAAOF,IAAI,CAACU,QAAL,CAAcT,QAAQ,CAACG,WAAT,EAAd,EAAsCH,QAAQ,CAACO,WAAT,EAAtC,EAA8DF,OAA9D,CAAP;AACD,GA3DoB;;AA6DrBJ,EAAAA,gBAAgB,GAAG;AACjB,UAAMD,QAAQ,GAAG;AACfU,MAAAA,qBAAqB,GAAG;AACtB,eAAO,IAAP;AACD,OAHc;;AAKfP,MAAAA,WAAW,GAAG;AACZ,eAAO,WAAP;AACD,OAPc;;AASfI,MAAAA,WAAW,GAAG;AACZ,eAAO;AACLI,UAAAA,QAAQ,EAAE;AACRC,YAAAA,EAAE,EAAEjB,MAAM;AADF;AADL,SAAP;AAKD;;AAfc,KAAjB;;AAmBA,QAAI,CAACC,UAAL,EAAiB;AACfP,MAAAA,UAAU,CAACD,OAAX,CAAmByB,+BAAnB,CAAmDb,QAAnD;;AAEAJ,MAAAA,UAAU,GAAG,IAAb;AACD;;AAED,WAAOI,QAAP;AACD;;AAxFoB,CAAvB;AA2FA,IAAIc,QAAQ,GAAGjB,cAAf;AACAX,OAAO,CAACE,OAAR,GAAkB0B,QAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _ParseUser = _interopRequireDefault(require(\"./ParseUser\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @flow-weak\n */\n\n\nconst {\n  v4: uuidv4\n} = require('uuid');\n\nlet registered = false;\n/**\n * Provides utility functions for working with Anonymously logged-in users. <br />\n * Anonymous users have some unique characteristics:\n * <ul>\n *  <li>Anonymous users don't need a user name or password.</li>\n *  <ul>\n *    <li>Once logged out, an anonymous user cannot be recovered.</li>\n *  </ul>\n *  <li>signUp converts an anonymous user to a standard user with the given username and password.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user is retained.</li>\n *  </ul>\n *  <li>logIn switches users without converting the anonymous user.</li>\n *  <ul>\n *    <li>Data associated with the anonymous user will be lost.</li>\n *  </ul>\n *  <li>Service logIn (e.g. Facebook, Twitter) will attempt to convert\n *  the anonymous user into a standard user by linking it to the service.</li>\n *  <ul>\n *    <li>If a user already exists that is linked to the service, it will instead switch to the existing user.</li>\n *  </ul>\n *  <li>Service linking (e.g. Facebook, Twitter) will convert the anonymous user\n *  into a standard user by linking it to the service.</li>\n * </ul>\n *\n * @class Parse.AnonymousUtils\n * @static\n */\n\nconst AnonymousUtils = {\n  /**\n   * Gets whether the user has their account linked to anonymous user.\n   *\n   * @function isLinked\n   * @name Parse.AnonymousUtils.isLinked\n   * @param {Parse.User} user User to check for.\n   *     The user must be logged in on this device.\n   * @returns {boolean} <code>true</code> if the user has their account\n   *     linked to an anonymous user.\n   * @static\n   */\n  isLinked(user\n  /*: ParseUser*/\n  ) {\n    const provider = this._getAuthProvider();\n\n    return user._isLinked(provider.getAuthType());\n  },\n\n  /**\n   * Logs in a user Anonymously.\n   *\n   * @function logIn\n   * @name Parse.AnonymousUtils.logIn\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Logged in user\n   * @static\n   */\n  logIn(options\n  /*:: ?: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    const provider = this._getAuthProvider();\n\n    return _ParseUser.default.logInWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n\n  /**\n   * Links Anonymous User to an existing PFUser.\n   *\n   * @function link\n   * @name Parse.AnonymousUtils.link\n   * @param {Parse.User} user User to link. This must be the current user.\n   * @param {object} options MasterKey / SessionToken.\n   * @returns {Promise} Linked with User\n   * @static\n   */\n  link(user\n  /*: ParseUser*/\n  , options\n  /*:: ?: RequestOptions*/\n  )\n  /*: Promise<ParseUser>*/\n  {\n    const provider = this._getAuthProvider();\n\n    return user.linkWith(provider.getAuthType(), provider.getAuthData(), options);\n  },\n\n  _getAuthProvider() {\n    const provider = {\n      restoreAuthentication() {\n        return true;\n      },\n\n      getAuthType() {\n        return 'anonymous';\n      },\n\n      getAuthData() {\n        return {\n          authData: {\n            id: uuidv4()\n          }\n        };\n      }\n\n    };\n\n    if (!registered) {\n      _ParseUser.default._registerAuthenticationProvider(provider);\n\n      registered = true;\n    }\n\n    return provider;\n  }\n\n};\nvar _default = AnonymousUtils;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}