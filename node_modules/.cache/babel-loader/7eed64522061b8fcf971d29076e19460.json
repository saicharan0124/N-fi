{"ast":null,"code":"var _jsxFileName = \"S:\\\\final hackathon\\\\nfi3\\\\src\\\\components\\\\Mortage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport axios from 'axios';\nimport { useMoralisWeb3Api } from \"react-moralis\";\nimport { Moralis } from 'moralis/node';\nimport '../cssmodule/Mortage.css';\nimport Nftblock from './Nftblock';\nimport '../extra/loading.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Mortage = props => {\n  _s();\n\n  const [item2, updatetemp] = useState([]);\n  const [loading, setloading] = useState(true); // console.log(props.owneraddr);\n  //  const url=\"https://gxn2w6hjguqs.usemoralis.com:2053/server\";\n  //  const app=\"Un4NHrok9wipkug17C7ghrFXfI483sWVRNT3T0ea\"; \n  // const api_key='https://eth-mainnet.alchemyapi.io/jsonrpc/qTpo5KLsQvfNVtuZx6mILiNuhNZq4lpJ';\n\n  const apiKey = \"qTpo5KLsQvfNVtuZx6mILiNuhNZq4lpJ\";\n  const endpoint = 'https://polygon-mumbai.g.alchemy.com/v2/qTpo5KLsQvfNVtuZx6mILiNuhNZq4lpJ';\n  const own = props.owneraddr;\n  const contractAddress = '';\n  useEffect(async () => {\n    if (props.owneraddr != undefined) {\n      const testnetNFTs = await fetch(`${endpoint}/getNFTs?owner=${own}`).then(data => data.json()); //console.log(testnetNFTs.ownedNfts);\n\n      fetchdata(testnetNFTs.ownedNfts); // console.log(testnetNFTs.ownedNfts);\n      // console.log(testnetNFTs.result[0].token_uri);\n    } // summa()\n\n  }, [props.owneraddr]);\n\n  const fetchdata = async arr => {\n    for (let j = 0; j < arr.length; j++) {\n      let temp = arr[j].media[0].gateway;\n      var con_add = arr[j].contract.address;\n      var con_token_id = parseInt(arr[j].id.tokenId, 16);\n      var price = Math.pow(10, -18);\n      const options = {\n        method: 'GET',\n        headers: {\n          Accept: 'application/json'\n        }\n      };\n      await fetch(\"https://api.covalenthq.com/v1/80001/tokens/\" + con_add + \"/nft_transactions/\" + con_token_id + \"/?quote-currency=USD&format=JSON&key=ckey_ed1c2bdcdfee41bd9fbf5422ada\", options).then(response => response.json()).then(response => {\n        console.log(response);\n        let arr_size = response.data.items[0].nft_transactions.length;\n        var temp10 = 0;\n\n        for (var s = 0; s < arr_size; s++) {\n          if (temp10 < parseInt(response.data.items[0].nft_transactions[s].value)) {\n            temp10 = parseInt(response.data.items[0].nft_transactions[s].value);\n          }\n        }\n\n        if (temp10 == 0) {\n          price *= temp10;\n          console.log(\"value is zero\");\n        } else {\n          price *= temp10;\n        }\n      }).catch(err => console.error(err));\n      updatetemp(data => [...data, {\n        src: temp,\n        heading: arr[j].title,\n        para: price,\n        address: con_add,\n        token: con_token_id,\n        des: arr[j].description\n      }]);\n    }\n\n    setloading(false);\n  };\n\n  const items2 = item2.map(data => {\n    return /*#__PURE__*/_jsxDEV(Nftblock, {\n      src: data.src,\n      address: data.address,\n      des: data.des,\n      token: data.token,\n      heading: data.heading,\n      para: data.para,\n      changepopup: props.changepopupstate,\n      popupv: props.popupv,\n      owner: props.owneraddr\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      margin: \"0\",\n      padding: \"0px\"\n    },\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ring\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 29\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mortage wrapper\",\n      children: [items2, /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"summa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"summa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"summa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"summa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 21\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Mortage, \"+5gvNYV2cD0/L+hdDznbffcIXu0=\");\n\n_c = Mortage;\nexport default Mortage; // const getvalue=async(add,id)=>{\n//     await Moralis.start({\n//         appId:app,\n//         serverUrl:url\n//     });   \n//     Moralis.initPlugins();\n//     const c=Moralis.Plugins.covalent;\n//     const r=await c.getNftTransactionsForContract({\n//         chainId:80001,\n//         contractAddress:add,\n//         tokenId:id\n//      });\n//     let arr_size=r.data.items[0].nft_transactions.length;\n//     // console.log(r.data.items[0].nft_transactions[arr_size-1].gas_quote);\n//     let result=r.data.items[0].nft_transactions[arr_size-1].fees_paid;\n//      return result;\n// }\n// const fetchdata=async(arr)=>{\n//     for(let j=0; j<arr.length ;j++){            \n//         let temp=arr[j].token_uri.toString().substring(22);\n//         const fees=await getvalue(arr[j].token_address,arr[j].token_id);\n//         const fees_paid=fees*0.70;\n//         fetch(temp).then(res => {\n//             res.json().then((res) => {\n//             console.log(res.image); // this should print the url to console\n//             updatetemp(data=>[...data,{ src:res.image,\n//                                         heading:arr[j].name,\n//                                         para:fees_paid\n//                                     }\n//                         ]);                       \n//              });\n//         });       \n//     }\n//     setloading(false);  \n// }\n// const Web3Api=useMoralisWeb3Api();\n// useEffect( async () => {\n//     if(props.owneraddr != undefined){\n//        const testnetNFTs = await Web3Api.Web3API.account.getNFTs({\n//                                     chain: \"mumbai\",address:props.owneraddr\n//                              });               \n//         fetchdata(testnetNFTs.result);\n//  // console.log(testnetNFTs.result[0].token_uri);\n//     }\n// },[props.owneraddr]);\n// useEffect(async () => {\n//     const headers = {\n//       'Content-Type': 'application/json',\n//     };\n//     const result = await axios.post(\n//       'https://eth-mainnet.alchemyapi.io/jsonrpc/qTpo5KLsQvfNVtuZx6mILiNuhNZq4lpJ',\n//       {\"jsonrpc\":\"2.0\",\"method\":\"eth_gasPrice\",\"params\":[],\"id\":73},\n//       {\n//         headers: headers,\n//       }\n//     );\n//     console.log(result.data);\n//   }, []);  \n\nvar _c;\n\n$RefreshReg$(_c, \"Mortage\");","map":{"version":3,"sources":["S:/final hackathon/nfi3/src/components/Mortage.js"],"names":["React","useEffect","useState","axios","useMoralisWeb3Api","Moralis","Nftblock","Mortage","props","item2","updatetemp","loading","setloading","apiKey","endpoint","own","owneraddr","contractAddress","undefined","testnetNFTs","fetch","then","data","json","fetchdata","ownedNfts","arr","j","length","temp","media","gateway","con_add","contract","address","con_token_id","parseInt","id","tokenId","price","Math","pow","options","method","headers","Accept","response","console","log","arr_size","items","nft_transactions","temp10","s","value","catch","err","error","src","heading","title","para","token","des","description","items2","map","changepopupstate","popupv","margin","padding"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from 'axios';\r\nimport { useMoralisWeb3Api } from \"react-moralis\";\r\nimport {Moralis} from 'moralis/node';\r\n\r\nimport '../cssmodule/Mortage.css';\r\nimport Nftblock from './Nftblock';\r\nimport '../extra/loading.css';\r\n\r\n\r\n\r\n\r\nconst Mortage=(props)=>{  \r\n\r\n   const [item2,updatetemp]=useState([]);\r\n   const [loading,setloading]=useState(true);  \r\n   // console.log(props.owneraddr);\r\n\r\n  //  const url=\"https://gxn2w6hjguqs.usemoralis.com:2053/server\";\r\n  //  const app=\"Un4NHrok9wipkug17C7ghrFXfI483sWVRNT3T0ea\"; \r\n  // const api_key='https://eth-mainnet.alchemyapi.io/jsonrpc/qTpo5KLsQvfNVtuZx6mILiNuhNZq4lpJ';\r\n\r\n    const apiKey = \"qTpo5KLsQvfNVtuZx6mILiNuhNZq4lpJ\";\r\n    const endpoint = 'https://polygon-mumbai.g.alchemy.com/v2/qTpo5KLsQvfNVtuZx6mILiNuhNZq4lpJ';\r\n    const own=props.owneraddr;\r\n    const contractAddress='';\r\n\r\n\r\n    useEffect( async() => {\r\n\r\n            if(props.owneraddr != undefined){\r\n         \r\n              const  testnetNFTs= await fetch(`${endpoint}/getNFTs?owner=${own}`).then(data => data.json());        \r\n               //console.log(testnetNFTs.ownedNfts);\r\n                fetchdata(testnetNFTs.ownedNfts);\r\n               // console.log(testnetNFTs.ownedNfts);\r\n       \r\n         // console.log(testnetNFTs.result[0].token_uri);\r\n            }\r\n\r\n           // summa()\r\n        },[props.owneraddr]);\r\n\r\n\r\n\r\n\r\n\r\n        const fetchdata=async(arr)=>{\r\n    \r\n        for(let j=0; j<arr.length ;j++){            \r\n            let temp=arr[j].media[0].gateway;\r\n\r\n            var con_add=arr[j].contract.address;\r\n            var con_token_id=parseInt(arr[j].id.tokenId,16);\r\n            var price=Math.pow(10,-18);\r\n\r\n            const options = {method: 'GET', headers: {Accept: 'application/json'}};\r\n            await fetch(\"https://api.covalenthq.com/v1/80001/tokens/\"+con_add+\"/nft_transactions/\"+con_token_id+\"/?quote-currency=USD&format=JSON&key=ckey_ed1c2bdcdfee41bd9fbf5422ada\",options)\r\n            .then(response => response.json())\r\n            .then(response =>{ \r\n                console.log(response)\r\n                let arr_size=response.data.items[0].nft_transactions.length;\r\n\r\n                var temp10=0;\r\n\r\n                for (var s=0;s<arr_size;s++){\r\n\r\n\r\n                    if(temp10<parseInt(response.data.items[0].nft_transactions[s].value)){\r\n                        temp10=parseInt(response.data.items[0].nft_transactions[s].value);\r\n                    }\r\n\r\n                }\r\n\r\n                if(temp10==0){\r\n                    price*=temp10;\r\n                    console.log(\"value is zero\")\r\n\r\n                }else{                    \r\n                    price*=temp10;\r\n                }\r\n                \r\n                })\r\n            .catch(err => console.error(err));        \r\n        \r\n\r\n             updatetemp(data=>[...data,{ src:temp,\r\n                                            heading:arr[j].title,\r\n                                            para:price,\r\n                                            address:con_add,\r\n                                            token:con_token_id,\r\n                                            des:arr[j].description\r\n                                        }\r\n                            ]);      \r\n\r\n        }\r\n\r\n        setloading(false);  \r\n       \r\n    }\r\n   \r\n \r\n    const items2=item2.map((data)=>{\r\n         return <Nftblock  src={data.src} address={data.address} des={data.des} token={data.token}  heading={data.heading} para={data.para} changepopup={props.changepopupstate} popupv={props.popupv} owner={props.owneraddr} ></Nftblock>;\r\n     })\r\n\r\n     \r\n\r\n  \r\n    return(        \r\n        <div style={{margin:\"0\" ,padding:\"0px\"}}>\r\n            {/* { props.popupstate && <Ownednft popupstate={props.popupstate} changepopupstate={changepopupstatehandler} popupvalue={props.popupvalue}></Ownednft>} */}\r\n            {\r\n                loading?(<div className='loading-center'>\r\n                    \r\n                            <div className=\"ring\"></div>\r\n                    \r\n                    </div>):(\r\n                    <div className='mortage wrapper'>\r\n                         {items2}\r\n                        <p className='summa'></p> \r\n                        <p className='summa'></p> \r\n                        <p className='summa'></p> \r\n                        <p className='summa'></p>\r\n                    </div>\r\n                )\r\n            }\r\n            </div>\r\n    );\r\n}\r\n\r\nexport default Mortage;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  // const getvalue=async(add,id)=>{\r\n\r\n    //     await Moralis.start({\r\n    //         appId:app,\r\n    //         serverUrl:url\r\n        \r\n    //     });   \r\n    \r\n    //     Moralis.initPlugins();\r\n    //     const c=Moralis.Plugins.covalent;\r\n\r\n    //     const r=await c.getNftTransactionsForContract({\r\n    //         chainId:80001,\r\n    //         contractAddress:add,\r\n    //         tokenId:id\r\n    //      });\r\n         \r\n    //     let arr_size=r.data.items[0].nft_transactions.length;\r\n    //     // console.log(r.data.items[0].nft_transactions[arr_size-1].gas_quote);\r\n    //     let result=r.data.items[0].nft_transactions[arr_size-1].fees_paid;\r\n        \r\n    //      return result;\r\n    \r\n    // }\r\n\r\n  \r\n\r\n\r\n    // const fetchdata=async(arr)=>{\r\n\r\n    //     for(let j=0; j<arr.length ;j++){            \r\n    //         let temp=arr[j].token_uri.toString().substring(22);\r\n\r\n    //         const fees=await getvalue(arr[j].token_address,arr[j].token_id);\r\n    //         const fees_paid=fees*0.70;\r\n\r\n    //         fetch(temp).then(res => {\r\n    //             res.json().then((res) => {\r\n    //             console.log(res.image); // this should print the url to console\r\n                                      \r\n    //             updatetemp(data=>[...data,{ src:res.image,\r\n    //                                         heading:arr[j].name,\r\n    //                                         para:fees_paid\r\n    //                                     }\r\n    //                         ]);                       \r\n    //              });\r\n    //         });       \r\n    //     }\r\n\r\n    //     setloading(false);  \r\n    // }\r\n\r\n\r\n    // const Web3Api=useMoralisWeb3Api();\r\n    \r\n    // useEffect( async () => {\r\n\r\n    //     if(props.owneraddr != undefined){\r\n \r\n    //        const testnetNFTs = await Web3Api.Web3API.account.getNFTs({\r\n    //                                     chain: \"mumbai\",address:props.owneraddr\r\n    //                              });               \r\n        \r\n    //         fetchdata(testnetNFTs.result);\r\n                    \r\n    //  // console.log(testnetNFTs.result[0].token_uri);\r\n    //     }\r\n    // },[props.owneraddr]);\r\n\r\n\r\n\r\n\r\n    \r\n   \r\n    // useEffect(async () => {\r\n       \r\n    \r\n    //     const headers = {\r\n    //       'Content-Type': 'application/json',\r\n    //     };\r\n    \r\n    //     const result = await axios.post(\r\n    //       'https://eth-mainnet.alchemyapi.io/jsonrpc/qTpo5KLsQvfNVtuZx6mILiNuhNZq4lpJ',\r\n    //       {\"jsonrpc\":\"2.0\",\"method\":\"eth_gasPrice\",\"params\":[],\"id\":73},\r\n    //       {\r\n    //         headers: headers,\r\n    //       }\r\n    //     );\r\n    \r\n    //     console.log(result.data);\r\n    \r\n        \r\n    //   }, []);  \r\n\r\n"]},"metadata":{},"sourceType":"module"}