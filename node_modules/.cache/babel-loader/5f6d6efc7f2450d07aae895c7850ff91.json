{"ast":null,"code":"const {\n  ethers\n} = require(\"ethers\");\n\nconst withdraw = async (input, lend_id) => {\n  //metamask\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  console.log(\"hlo1\"); //contract initialization \n\n  const contract = require(\"./abi.json\");\n\n  const lendpool_addr = '0x4E9846Cc17d070589588f5D822986d9677046335';\n  const lendpool_contract = new ethers.Contract(lendpool_addr, contract.lendpool_abi, signer);\n  const lendpool_contract_p = new ethers.Contract(lendpool_addr, contract.lendpool_abi, provider); // console.log(amount)\n\n  const decimals = 18; //  const input1=input\n  // Note: this is a string, e.g. user input\n\n  const amount = ethers.utils.parseUnits(input1, decimals); //write fn for conversion of amount too wei\n  //withdraw function\n\n  const withdraw_fn = await lendpool_contract.withdraw(amount, lend_id, {\n    gasLimit: 210000\n  });\n  console.log(withdraw_fn); //withdraw emit \n\n  const withdraw_events = await lendpool_contract_p.on('withdraws', (lend_id, frm, amount, withdraw_time) => {\n    let withdraw_info = {\n      lend_id: lend_id,\n      frm: frm,\n      withdrawed_amount: amount,\n      withdrawed_time: withdraw_time\n    };\n    console.log(withdraw_info);\n  });\n};\n\nexport default withdraw;","map":{"version":3,"sources":["S:/final hackathon/nfi3/src/functions/withdraw.js"],"names":["ethers","require","withdraw","input","lend_id","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","console","log","contract","lendpool_addr","lendpool_contract","Contract","lendpool_abi","lendpool_contract_p","decimals","amount","utils","parseUnits","input1","withdraw_fn","gasLimit","withdraw_events","on","frm","withdraw_time","withdraw_info","withdrawed_amount","withdrawed_time"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAIA,MAAMC,QAAQ,GAAC,OAAMC,KAAN,EAAYC,OAAZ,KAAsB;AAEhC;AACA,QAAMC,QAAQ,GAAG,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,QAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAPgC,CAUhC;;AAEA,QAAMC,QAAQ,GAAGd,OAAO,CAAC,YAAD,CAAxB;;AACA,QAAMe,aAAa,GAAG,4CAAtB;AACA,QAAMC,iBAAiB,GAAG,IAAIjB,MAAM,CAACkB,QAAX,CAAoBF,aAApB,EAAmCD,QAAQ,CAACI,YAA5C,EAAyDR,MAAzD,CAA1B;AACA,QAAMS,mBAAmB,GAAG,IAAIpB,MAAM,CAACkB,QAAX,CAAoBF,aAApB,EAAmCD,QAAQ,CAACI,YAA5C,EAAyDd,QAAzD,CAA5B,CAfgC,CAiBhC;;AACA,QAAMgB,QAAQ,GAAG,EAAjB,CAlBgC,CAmBjC;AACE;;AACD,QAAMC,MAAM,GAAGtB,MAAM,CAACuB,KAAP,CAAaC,UAAb,CAAwBC,MAAxB,EAAgCJ,QAAhC,CAAf,CArBgC,CA0BpC;AACD;;AACA,QAAMK,WAAW,GAAG,MAAMT,iBAAiB,CAACf,QAAlB,CAA2BoB,MAA3B,EAAkClB,OAAlC,EAA0C;AAACuB,IAAAA,QAAQ,EAAE;AAAX,GAA1C,CAA1B;AACAd,EAAAA,OAAO,CAACC,GAAR,CAAYY,WAAZ,EA7BqC,CA8BrC;;AACA,QAAME,eAAe,GAAE,MAAMR,mBAAmB,CAACS,EAApB,CAAuB,WAAvB,EAAmC,CAACzB,OAAD,EAAS0B,GAAT,EAAaR,MAAb,EAAoBS,aAApB,KAAoC;AAEhG,QAAIC,aAAa,GAAE;AAChB5B,MAAAA,OAAO,EAACA,OADQ;AAEhB0B,MAAAA,GAAG,EAACA,GAFY;AAGhBG,MAAAA,iBAAiB,EAACX,MAHF;AAIhBY,MAAAA,eAAe,EAACH;AAJA,KAAnB;AAOAlB,IAAAA,OAAO,CAACC,GAAR,CAAYkB,aAAZ;AAGC,GAZwB,CAA7B;AAaC,CA5CD;;AA+CA,eAAe9B,QAAf","sourcesContent":["const { ethers } = require(\"ethers\");\r\n\r\n\r\n\r\nconst withdraw=async(input,lend_id)=>{\r\n\r\n     //metamask\r\n     const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n     await provider.send(\"eth_requestAccounts\", []);\r\n     const signer = provider.getSigner()\r\n     \r\n     console.log(\"hlo1\")\r\n     \r\n     \r\n     //contract initialization \r\n     \r\n     const contract = require(\"./abi.json\");\r\n     const lendpool_addr = '0x4E9846Cc17d070589588f5D822986d9677046335' \r\n     const lendpool_contract = new ethers.Contract(lendpool_addr, contract.lendpool_abi,signer)\r\n     const lendpool_contract_p = new ethers.Contract(lendpool_addr, contract.lendpool_abi,provider)\r\n     \r\n     // console.log(amount)\r\n     const decimals = 18;\r\n    //  const input1=input\r\n      // Note: this is a string, e.g. user input\r\n     const amount = ethers.utils.parseUnits(input1, decimals)\r\n\r\n\r\n\r\n    \r\n //write fn for conversion of amount too wei\r\n//withdraw function\r\nconst withdraw_fn = await lendpool_contract.withdraw(amount,lend_id,{gasLimit: 210000})\r\nconsole.log(withdraw_fn)\r\n//withdraw emit \r\nconst withdraw_events= await lendpool_contract_p.on('withdraws',(lend_id,frm,amount,withdraw_time)=>{\r\n \r\n    let withdraw_info ={\r\n       lend_id:lend_id,\r\n       frm:frm,\r\n       withdrawed_amount:amount,\r\n       withdrawed_time:withdraw_time,\r\n       \r\n    }\r\n    console.log(withdraw_info)\r\n   \r\n    \r\n    })\r\n}\r\n\r\n\r\nexport default withdraw;"]},"metadata":{},"sourceType":"module"}