{"ast":null,"code":"\"use strict\";\n\nconst supportedTypes = ['native', 'erc20', 'erc721', 'erc1155'];\nconst ERC1155TransferABI = [{\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'id',\n    type: 'uint256'\n  }, {\n    internalType: 'uint256',\n    name: 'value',\n    type: 'uint256'\n  }, {\n    internalType: 'bytes',\n    name: 'data',\n    type: 'bytes'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'safeTransferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'id',\n    type: 'uint256'\n  }, {\n    internalType: 'uint256',\n    name: 'value',\n    type: 'uint256'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'transferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}];\nconst ERC721TransferABI = [{\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'tokenId',\n    type: 'uint256'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'safeTransferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'tokenId',\n    type: 'uint256'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'transferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}];\nconst ERC20TransferABI = [{\n  constant: false,\n  inputs: [{\n    name: '_to',\n    type: 'address'\n  }, {\n    name: '_value',\n    type: 'uint256'\n  }],\n  name: 'transfer',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [{\n    name: '_owner',\n    type: 'address'\n  }],\n  name: 'balanceOf',\n  outputs: [{\n    name: 'balance',\n    type: 'uint256'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}];\nconst tokenParams = {\n  native: {\n    receiver: '',\n    amount: ''\n  },\n  erc20: {\n    contractAddress: '',\n    receiver: '',\n    amount: ''\n  },\n  erc721: {\n    contractAddress: '',\n    receiver: '',\n    tokenId: ''\n  },\n  erc1155: {\n    contractAddress: '',\n    receiver: '',\n    tokenId: '',\n    amount: ''\n  }\n};\n\nconst isNotEmpty = value => {\n  return typeof value !== 'undefined' && value ? true : false;\n};\n\nconst validateInput = (type, payload) => {\n  const errors = [];\n  const parameters = tokenParams[type];\n\n  for (const key of Object.keys(parameters)) {\n    if (!isNotEmpty(payload[key])) {\n      errors.push(`${key} is required`);\n    }\n  }\n\n  if (errors.length > 0) {\n    throw errors;\n  }\n};\n\nconst isSupportedType = type => {\n  if (supportedTypes.indexOf(type) === -1) throw 'Unsupported type';\n  return true;\n};\n\nconst isUint256 = tokenId => {\n  if (!Number.isInteger(+tokenId) || +tokenId < 0) throw new Error('Invalid token Id');\n  return true;\n};\n\nmodule.exports = {\n  abi: {\n    erc1155: ERC1155TransferABI,\n    erc721: ERC721TransferABI,\n    erc20: ERC20TransferABI\n  },\n  validateInput,\n  isSupportedType,\n  isNotEmpty,\n  isUint256\n};","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/moralis/lib/node/TransferUtils.js"],"names":["supportedTypes","ERC1155TransferABI","inputs","internalType","name","type","outputs","constant","payable","ERC721TransferABI","ERC20TransferABI","stateMutability","tokenParams","native","receiver","amount","erc20","contractAddress","erc721","tokenId","erc1155","isNotEmpty","value","validateInput","payload","errors","parameters","key","Object","keys","push","length","isSupportedType","indexOf","isUint256","Number","isInteger","Error","module","exports","abi"],"mappings":"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","sourcesContent":["\"use strict\";\n\nconst supportedTypes = ['native', 'erc20', 'erc721', 'erc1155'];\nconst ERC1155TransferABI = [{\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'id',\n    type: 'uint256'\n  }, {\n    internalType: 'uint256',\n    name: 'value',\n    type: 'uint256'\n  }, {\n    internalType: 'bytes',\n    name: 'data',\n    type: 'bytes'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'safeTransferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'id',\n    type: 'uint256'\n  }, {\n    internalType: 'uint256',\n    name: 'value',\n    type: 'uint256'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'transferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}];\nconst ERC721TransferABI = [{\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'tokenId',\n    type: 'uint256'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'safeTransferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}, {\n  inputs: [{\n    internalType: 'address',\n    name: 'from',\n    type: 'address'\n  }, {\n    internalType: 'address',\n    name: 'to',\n    type: 'address'\n  }, {\n    internalType: 'uint256',\n    name: 'tokenId',\n    type: 'uint256'\n  }],\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  name: 'transferFrom',\n  type: 'function',\n  constant: false,\n  payable: false\n}];\nconst ERC20TransferABI = [{\n  constant: false,\n  inputs: [{\n    name: '_to',\n    type: 'address'\n  }, {\n    name: '_value',\n    type: 'uint256'\n  }],\n  name: 'transfer',\n  outputs: [{\n    name: '',\n    type: 'bool'\n  }],\n  payable: false,\n  stateMutability: 'nonpayable',\n  type: 'function'\n}, {\n  constant: true,\n  inputs: [{\n    name: '_owner',\n    type: 'address'\n  }],\n  name: 'balanceOf',\n  outputs: [{\n    name: 'balance',\n    type: 'uint256'\n  }],\n  payable: false,\n  stateMutability: 'view',\n  type: 'function'\n}];\nconst tokenParams = {\n  native: {\n    receiver: '',\n    amount: ''\n  },\n  erc20: {\n    contractAddress: '',\n    receiver: '',\n    amount: ''\n  },\n  erc721: {\n    contractAddress: '',\n    receiver: '',\n    tokenId: ''\n  },\n  erc1155: {\n    contractAddress: '',\n    receiver: '',\n    tokenId: '',\n    amount: ''\n  }\n};\n\nconst isNotEmpty = value => {\n  return typeof value !== 'undefined' && value ? true : false;\n};\n\nconst validateInput = (type, payload) => {\n  const errors = [];\n  const parameters = tokenParams[type];\n\n  for (const key of Object.keys(parameters)) {\n    if (!isNotEmpty(payload[key])) {\n      errors.push(`${key} is required`);\n    }\n  }\n\n  if (errors.length > 0) {\n    throw errors;\n  }\n};\n\nconst isSupportedType = type => {\n  if (supportedTypes.indexOf(type) === -1) throw 'Unsupported type';\n  return true;\n};\n\nconst isUint256 = tokenId => {\n  if (!Number.isInteger(+tokenId) || +tokenId < 0) throw new Error('Invalid token Id');\n  return true;\n};\n\nmodule.exports = {\n  abi: {\n    erc1155: ERC1155TransferABI,\n    erc721: ERC721TransferABI,\n    erc20: ERC20TransferABI\n  },\n  validateInput,\n  isSupportedType,\n  isNotEmpty,\n  isUint256\n};"]},"metadata":{},"sourceType":"script"}