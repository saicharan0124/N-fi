{"ast":null,"code":"\"use strict\";\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseFileEncode = require(\"./ParseFileEncode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nlet XHR = null;\n\nif (typeof XMLHttpRequest !== 'undefined') {\n  XHR = XMLHttpRequest;\n}\n\nconst DefaultController = {\n  saveFile: async function (name\n  /*: string*/\n  , source\n  /*: FileSource*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    if (source.format !== 'file') {\n      throw new Error('saveFile can only be used with File-type sources.');\n    }\n\n    const base64Data = await new Promise((res, rej) => {\n      // eslint-disable-next-line no-undef\n      const reader = new FileReader();\n\n      reader.onload = () => res(reader.result);\n\n      reader.onerror = error => rej(error);\n\n      reader.readAsDataURL(source.file);\n    }); // we only want the data after the comma\n    // For example: \"data:application/pdf;base64,JVBERi0xLjQKJ...\" we would only want \"JVBERi0xLjQKJ...\"\n\n    const [first, second] = base64Data.split(','); // in the event there is no 'data:application/pdf;base64,' at the beginning of the base64 string\n    // use the entire string instead\n\n    const data = second ? second : first;\n    const newSource = {\n      format: 'base64',\n      base64: data,\n      type: source.type || (source.file ? source.file.type : null)\n    };\n    return await DefaultController.saveBase64(name, newSource, options);\n  },\n  saveBase64: function (name\n  /*: string*/\n  , source\n  /*: FileSource*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    if (source.format !== 'base64') {\n      throw new Error('saveBase64 can only be used with Base64-type sources.');\n    }\n\n    const data\n    /*: { base64: any, _ContentType?: any, fileData: Object }*/\n    = {\n      base64: source.base64,\n      fileData: {\n        ipfs: options.ipfs,\n        metadata: _objectSpread({}, options.metadata),\n        tags: _objectSpread({}, options.tags)\n      }\n    };\n    delete options.metadata;\n    delete options.tags;\n\n    if (source.type) {\n      data._ContentType = source.type;\n    }\n\n    return _CoreManager.default.getRESTController().request('POST', `files/${name}`, data, options);\n  },\n  download: function (uri, options) {\n    if (XHR) {\n      return this.downloadAjax(uri, options);\n    }\n\n    return new Promise((resolve, reject) => {\n      const client = uri.indexOf('https') === 0 ? require('https') : require('http');\n      const req = client.get(uri, resp => {\n        resp.setEncoding('base64');\n        let base64 = '';\n        resp.on('data', data => base64 += data);\n        resp.on('end', () => {\n          resolve({\n            base64,\n            contentType: resp.headers['content-type']\n          });\n        });\n      });\n      req.on('abort', () => {\n        resolve({});\n      });\n      req.on('error', reject);\n      options.requestTask(req);\n    });\n  },\n  downloadAjax: function (uri, options) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XHR();\n      xhr.open('GET', uri, true);\n      xhr.responseType = 'arraybuffer';\n\n      xhr.onerror = function (e) {\n        reject(e);\n      };\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState !== xhr.DONE) {\n          return;\n        }\n\n        if (!this.response) {\n          return resolve({});\n        }\n\n        const bytes = new Uint8Array(this.response);\n        resolve({\n          base64: (0, _ParseFileEncode.encodeBase64)(bytes),\n          contentType: xhr.getResponseHeader('content-type')\n        });\n      };\n\n      options.requestTask(xhr);\n      xhr.send();\n    });\n  },\n  deleteFile: function (name\n  /*: string*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    const headers = {\n      'X-Parse-Application-ID': _CoreManager.default.get('APPLICATION_ID')\n    };\n\n    if (options.useMasterKey) {\n      headers['X-Parse-Master-Key'] = _CoreManager.default.get('MASTER_KEY');\n    }\n\n    let url = _CoreManager.default.get('SERVER_URL');\n\n    if (url[url.length - 1] !== '/') {\n      url += '/';\n    }\n\n    url += `files/${name}`;\n    return _CoreManager.default.getRESTController().ajax('DELETE', url, '', headers).catch(response => {\n      // TODO: return JSON object in server\n      if (!response || response === 'SyntaxError: Unexpected end of JSON input') {\n        return Promise.resolve();\n      }\n\n      return _CoreManager.default.getRESTController().handleError(response);\n    });\n  },\n\n  _setXHR(xhr\n  /*: any*/\n  ) {\n    XHR = xhr;\n  },\n\n  _getXHR() {\n    return XHR;\n  }\n\n};\nmodule.exports = DefaultController;","map":{"version":3,"sources":["S:/final hack checkpoin/nfi3/node_modules/moralis/lib/node/ParseFileController.default.js"],"names":["_CoreManager","_interopRequireDefault","require","_ParseFileEncode","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","configurable","writable","XHR","XMLHttpRequest","DefaultController","saveFile","name","options","format","Error","base64Data","Promise","res","rej","reader","FileReader","onload","result","onerror","error","readAsDataURL","file","first","second","split","data","newSource","base64","type","saveBase64","fileData","ipfs","metadata","tags","_ContentType","getRESTController","request","download","uri","downloadAjax","resolve","reject","client","indexOf","req","get","resp","setEncoding","on","contentType","headers","requestTask","xhr","open","responseType","e","onreadystatechange","readyState","DONE","response","bytes","Uint8Array","encodeBase64","getResponseHeader","send","deleteFile","useMasterKey","url","ajax","catch","handleError","_setXHR","_getXHR","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _ParseFileEncode = require(\"./ParseFileEncode\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nlet XHR = null;\n\nif (typeof XMLHttpRequest !== 'undefined') {\n  XHR = XMLHttpRequest;\n}\n\nconst DefaultController = {\n  saveFile: async function (name\n  /*: string*/\n  , source\n  /*: FileSource*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    if (source.format !== 'file') {\n      throw new Error('saveFile can only be used with File-type sources.');\n    }\n\n    const base64Data = await new Promise((res, rej) => {\n      // eslint-disable-next-line no-undef\n      const reader = new FileReader();\n\n      reader.onload = () => res(reader.result);\n\n      reader.onerror = error => rej(error);\n\n      reader.readAsDataURL(source.file);\n    }); // we only want the data after the comma\n    // For example: \"data:application/pdf;base64,JVBERi0xLjQKJ...\" we would only want \"JVBERi0xLjQKJ...\"\n\n    const [first, second] = base64Data.split(','); // in the event there is no 'data:application/pdf;base64,' at the beginning of the base64 string\n    // use the entire string instead\n\n    const data = second ? second : first;\n    const newSource = {\n      format: 'base64',\n      base64: data,\n      type: source.type || (source.file ? source.file.type : null)\n    };\n    return await DefaultController.saveBase64(name, newSource, options);\n  },\n  saveBase64: function (name\n  /*: string*/\n  , source\n  /*: FileSource*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    if (source.format !== 'base64') {\n      throw new Error('saveBase64 can only be used with Base64-type sources.');\n    }\n\n    const data\n    /*: { base64: any, _ContentType?: any, fileData: Object }*/\n    = {\n      base64: source.base64,\n      fileData: {\n        ipfs: options.ipfs,\n        metadata: _objectSpread({}, options.metadata),\n        tags: _objectSpread({}, options.tags)\n      }\n    };\n    delete options.metadata;\n    delete options.tags;\n\n    if (source.type) {\n      data._ContentType = source.type;\n    }\n\n    return _CoreManager.default.getRESTController().request('POST', `files/${name}`, data, options);\n  },\n  download: function (uri, options) {\n    if (XHR) {\n      return this.downloadAjax(uri, options);\n    }\n\n    return new Promise((resolve, reject) => {\n      const client = uri.indexOf('https') === 0 ? require('https') : require('http');\n      const req = client.get(uri, resp => {\n        resp.setEncoding('base64');\n        let base64 = '';\n        resp.on('data', data => base64 += data);\n        resp.on('end', () => {\n          resolve({\n            base64,\n            contentType: resp.headers['content-type']\n          });\n        });\n      });\n      req.on('abort', () => {\n        resolve({});\n      });\n      req.on('error', reject);\n      options.requestTask(req);\n    });\n  },\n  downloadAjax: function (uri, options) {\n    return new Promise((resolve, reject) => {\n      const xhr = new XHR();\n      xhr.open('GET', uri, true);\n      xhr.responseType = 'arraybuffer';\n\n      xhr.onerror = function (e) {\n        reject(e);\n      };\n\n      xhr.onreadystatechange = function () {\n        if (xhr.readyState !== xhr.DONE) {\n          return;\n        }\n\n        if (!this.response) {\n          return resolve({});\n        }\n\n        const bytes = new Uint8Array(this.response);\n        resolve({\n          base64: (0, _ParseFileEncode.encodeBase64)(bytes),\n          contentType: xhr.getResponseHeader('content-type')\n        });\n      };\n\n      options.requestTask(xhr);\n      xhr.send();\n    });\n  },\n  deleteFile: function (name\n  /*: string*/\n  , options\n  /*:: ?: FullOptions*/\n  ) {\n    const headers = {\n      'X-Parse-Application-ID': _CoreManager.default.get('APPLICATION_ID')\n    };\n\n    if (options.useMasterKey) {\n      headers['X-Parse-Master-Key'] = _CoreManager.default.get('MASTER_KEY');\n    }\n\n    let url = _CoreManager.default.get('SERVER_URL');\n\n    if (url[url.length - 1] !== '/') {\n      url += '/';\n    }\n\n    url += `files/${name}`;\n    return _CoreManager.default.getRESTController().ajax('DELETE', url, '', headers).catch(response => {\n      // TODO: return JSON object in server\n      if (!response || response === 'SyntaxError: Unexpected end of JSON input') {\n        return Promise.resolve();\n      }\n\n      return _CoreManager.default.getRESTController().handleError(response);\n    });\n  },\n\n  _setXHR(xhr\n  /*: any*/\n  ) {\n    XHR = xhr;\n  },\n\n  _getXHR() {\n    return XHR;\n  }\n\n};\nmodule.exports = DefaultController;"]},"metadata":{},"sourceType":"script"}