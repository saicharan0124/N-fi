{"ast":null,"code":"const {\n  ethers\n} = require(\"ethers\");\n\nconst lendpool = async (input, days) => {\n  //metamask\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner();\n  console.log(\"hlo1\"); //contract initialization \n\n  const contract = require(\"./abi.json\");\n\n  const lendpool_addr = '0x184d5C0680cC8AC731F243cCeeB790f9aBeC2f51';\n  const lendpool_contract = new ethers.Contract(lendpool_addr, contract.lendpool_abi, signer);\n  const lendpool_contract_p = new ethers.Contract(lendpool_addr, contract.lendpool_abi, provider); // console.log(amount)\n\n  const decimals = 18; //const input = \"2\"; // Note: this is a string, e.g. user input\n\n  const amount = ethers.utils.parseUnits(input, decimals); //const days=''\n  //lend function\n\n  const lend_fn = await lendpool_contract.lend(amount, days, {\n    value: amount,\n    gasLimit: 210000\n  });\n  console.log(lend_fn);\n  let temp_id;\n  let temp_start;\n  let temp_lockup; //lend emit\n\n  const lend_events = await lendpool_contract_p.on('lending', (lend_id, frm, amount, start_time, lockup_time) => {\n    let lend_info = {\n      lend_id: lend_id,\n      frm: frm,\n      lent_amount: amount,\n      lend_start_time: start_time,\n      lend_end_time: lockup_time\n    };\n    temp_id = lend_info.lend_id;\n    temp_start = lend_info.lend_start_time;\n    temp_lockup = lend_info.lend_end_time;\n    console.log(lend_info);\n  });\n  return {\n    id: temp_id,\n    start: temp_start,\n    end: temp_lockup\n  };\n};\n\nexport default lendpool;","map":{"version":3,"sources":["S:/final hackathon/nfi3/src/functions/lendpool.js"],"names":["ethers","require","lendpool","input","days","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","console","log","contract","lendpool_addr","lendpool_contract","Contract","lendpool_abi","lendpool_contract_p","decimals","amount","utils","parseUnits","lend_fn","lend","value","gasLimit","temp_id","temp_start","temp_lockup","lend_events","on","lend_id","frm","start_time","lockup_time","lend_info","lent_amount","lend_start_time","lend_end_time","id","start","end"],"mappings":"AAAA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAEA,MAAMC,QAAQ,GAAG,OAAOC,KAAP,EAAeC,IAAf,KAAwB;AACrC;AACA,QAAMC,QAAQ,GAAG,IAAIL,MAAM,CAACM,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACJ,QAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,QAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EANyC,CASzC;;AAEA,QAAMC,QAAQ,GAAGd,OAAO,CAAC,YAAD,CAAxB;;AACA,QAAMe,aAAa,GAAG,4CAAtB;AACA,QAAMC,iBAAiB,GAAG,IAAIjB,MAAM,CAACkB,QAAX,CAAoBF,aAApB,EAAmCD,QAAQ,CAACI,YAA5C,EAAyDR,MAAzD,CAA1B;AACA,QAAMS,mBAAmB,GAAG,IAAIpB,MAAM,CAACkB,QAAX,CAAoBF,aAApB,EAAmCD,QAAQ,CAACI,YAA5C,EAAyDd,QAAzD,CAA5B,CAdyC,CAgBzC;;AACA,QAAMgB,QAAQ,GAAG,EAAjB,CAjByC,CAkBzC;;AACA,QAAMC,MAAM,GAAGtB,MAAM,CAACuB,KAAP,CAAaC,UAAb,CAAwBrB,KAAxB,EAA+BkB,QAA/B,CAAf,CAnByC,CAoBzC;AACA;;AACA,QAAMI,OAAO,GAAG,MAAMR,iBAAiB,CAACS,IAAlB,CAAuBJ,MAAvB,EAA8BlB,IAA9B,EAAmC;AAACuB,IAAAA,KAAK,EAACL,MAAP;AAAcM,IAAAA,QAAQ,EAAE;AAAxB,GAAnC,CAAtB;AACAf,EAAAA,OAAO,CAACC,GAAR,CAAYW,OAAZ;AAEA,MAAII,OAAJ;AACA,MAAIC,UAAJ;AACA,MAAIC,WAAJ,CA3ByC,CA+BzC;;AACA,QAAMC,WAAW,GAAE,MAAMZ,mBAAmB,CAACa,EAApB,CAAuB,SAAvB,EAAiC,CAACC,OAAD,EAASC,GAAT,EAAab,MAAb,EAAoBc,UAApB,EAA+BC,WAA/B,KAA6C;AAEtG,QAAIC,SAAS,GAAE;AACZJ,MAAAA,OAAO,EAACA,OADI;AAEZC,MAAAA,GAAG,EAACA,GAFQ;AAGZI,MAAAA,WAAW,EAACjB,MAHA;AAIZkB,MAAAA,eAAe,EAACJ,UAJJ;AAKZK,MAAAA,aAAa,EAACJ;AALF,KAAf;AASAR,IAAAA,OAAO,GAACS,SAAS,CAACJ,OAAlB;AACAJ,IAAAA,UAAU,GAACQ,SAAS,CAACE,eAArB;AACAT,IAAAA,WAAW,GAACO,SAAS,CAACG,aAAtB;AAKA5B,IAAAA,OAAO,CAACC,GAAR,CAAYwB,SAAZ;AAGC,GArBuB,CAAzB;AAyBC,SAAO;AAACI,IAAAA,EAAE,EAACb,OAAJ;AAAac,IAAAA,KAAK,EAACb,UAAnB;AAAgCc,IAAAA,GAAG,EAACb;AAApC,GAAP;AAGA,CA5DD;;AA+DA,eAAe7B,QAAf","sourcesContent":["const { ethers } = require(\"ethers\");\r\n\r\nconst lendpool = async (input , days) => {\r\n    //metamask\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum)\r\nawait provider.send(\"eth_requestAccounts\", []);\r\nconst signer = provider.getSigner()\r\n\r\nconsole.log(\"hlo1\")\r\n\r\n\r\n//contract initialization \r\n\r\nconst contract = require(\"./abi.json\");\r\nconst lendpool_addr = '0x184d5C0680cC8AC731F243cCeeB790f9aBeC2f51' \r\nconst lendpool_contract = new ethers.Contract(lendpool_addr, contract.lendpool_abi,signer)\r\nconst lendpool_contract_p = new ethers.Contract(lendpool_addr, contract.lendpool_abi,provider)\r\n\r\n// console.log(amount)\r\nconst decimals = 18;\r\n//const input = \"2\"; // Note: this is a string, e.g. user input\r\nconst amount = ethers.utils.parseUnits(input, decimals)\r\n//const days=''\r\n//lend function\r\nconst lend_fn = await lendpool_contract.lend(amount,days,{value:amount,gasLimit: 210000})\r\nconsole.log(lend_fn)\r\n\r\nlet temp_id;\r\nlet temp_start;\r\nlet temp_lockup;\r\n\r\n\r\n\r\n//lend emit\r\nconst lend_events= await lendpool_contract_p.on('lending',(lend_id,frm,amount,start_time,lockup_time)=>{\r\n \r\n let lend_info ={\r\n    lend_id:lend_id,\r\n    frm:frm,\r\n    lent_amount:amount,\r\n    lend_start_time:start_time,\r\n    lend_end_time:lockup_time\r\n }\r\n\r\n\r\n temp_id=lend_info.lend_id;\r\n temp_start=lend_info.lend_start_time;\r\n temp_lockup=lend_info.lend_end_time;\r\n\r\n\r\n\r\n\r\n console.log(lend_info)\r\n\r\n \r\n })\r\n\r\n\r\n\r\n return {id:temp_id, start:temp_start , end:temp_lockup}\r\n \r\n\r\n}\r\n\r\n\r\nexport default lendpool;"]},"metadata":{},"sourceType":"module"}