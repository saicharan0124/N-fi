{"ast":null,"code":"import axios from 'axios';\n\nconst {\n  ethers\n} = require(\"ethers\");\n\nconst m_initial2 = async data => {\n  //metamask\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  await provider.send(\"eth_requestAccounts\", []);\n  const signer = provider.getSigner(); //contract initialization \n\n  const contract = require(\"./abi.json\");\n\n  const mortgage_addr = '0x4324B5414fC2Ba2a0985a8DE7e2B84BF4a0c4189';\n  const mortgage_contract = new ethers.Contract(mortgage_addr, contract.mortgage_abi, signer); //borrow function\n\n  const Borrow = async () => {\n    await mortgage_contract.borrow(data.token_id, data.price);\n  };\n\n  const Borrow_events = async () => {\n    await mortgage_contract.on('MortgageItemCreated', async (tk_id, frm, price, time) => {\n      let info = {\n        Tokenid: tk_id,\n        frm: frm,\n        nftprice: price,\n        time: time\n      };\n      console.log(JSON.stringify(info, null, 4));\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const result = await axios.post('http://localhost:3001/student/add', {\n        \"token_id\": info.Tokenid,\n        \"address\": info.frm,\n        \"date\": \"23-4-2002\" + \" \" + info.time,\n        \"price\": info.nftprice,\n        \"status\": 0\n      }, {\n        headers: headers\n      });\n    });\n  };\n\n  Borrow();\n  Borrow_events();\n  console.log('borrow finished');\n};\n\nexport default m_initial2;","map":{"version":3,"sources":["S:/final hackathon/nfi3/src/functions/mortgage.js"],"names":["axios","ethers","require","m_initial2","data","provider","providers","Web3Provider","window","ethereum","send","signer","getSigner","contract","mortgage_addr","mortgage_contract","Contract","mortgage_abi","Borrow","borrow","token_id","price","Borrow_events","on","tk_id","frm","time","info","Tokenid","nftprice","console","log","JSON","stringify","headers","result","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAGA,MAAMC,UAAU,GAAC,MAAMC,IAAN,IAAa;AAI3B;AACA,QAAMC,QAAQ,GAAG,IAAIJ,MAAM,CAACK,SAAP,CAAiBC,YAArB,CAAkCC,MAAM,CAACC,QAAzC,CAAjB;AACA,QAAMJ,QAAQ,CAACK,IAAT,CAAc,qBAAd,EAAqC,EAArC,CAAN;AACA,QAAMC,MAAM,GAAGN,QAAQ,CAACO,SAAT,EAAf,CAP2B,CAS9B;;AAEC,QAAMC,QAAQ,GAAGX,OAAO,CAAC,YAAD,CAAxB;;AACA,QAAMY,aAAa,GAAG,4CAAtB;AACA,QAAMC,iBAAiB,GAAG,IAAId,MAAM,CAACe,QAAX,CAAoBF,aAApB,EAAmCD,QAAQ,CAACI,YAA5C,EAAyDN,MAAzD,CAA1B,CAb6B,CAe9B;;AACA,QAAMO,MAAM,GAAE,YAAS;AAAE,UAAMH,iBAAiB,CAACI,MAAlB,CAAyBf,IAAI,CAACgB,QAA9B,EAAuChB,IAAI,CAACiB,KAA5C,CAAN;AAAyD,GAAlF;;AACE,QAAMC,aAAa,GAAC,YAAS;AAAE,UAAMP,iBAAiB,CAACQ,EAAlB,CAAqB,qBAArB,EAA2C,OAAMC,KAAN,EAAYC,GAAZ,EAAgBJ,KAAhB,EAAsBK,IAAtB,KAA6B;AAG/G,UAAIC,IAAI,GAAE;AACPC,QAAAA,OAAO,EAACJ,KADD;AAEPC,QAAAA,GAAG,EAACA,GAFG;AAGPI,QAAAA,QAAQ,EAACR,KAHF;AAIPK,QAAAA,IAAI,EAACA;AAJE,OAAV;AAMAI,MAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAoB,IAApB,EAAyB,CAAzB,CAAZ;AAEA,YAAMO,OAAO,GAAG;AACd,wBAAgB;AADF,OAAhB;AAIA,YAAMC,MAAM,GAAG,MAAMnC,KAAK,CAACoC,IAAN,CACnB,mCADmB,EAEnB;AACG,oBAAWT,IAAI,CAACC,OADnB;AAEG,mBAAUD,IAAI,CAACF,GAFlB;AAGG,gBAAO,cAAY,GAAZ,GAAgBE,IAAI,CAACD,IAH/B;AAIG,iBAAQC,IAAI,CAACE,QAJhB;AAKG,kBAAS;AALZ,OAFmB,EASnB;AACEK,QAAAA,OAAO,EAAEA;AADX,OATmB,CAArB;AAkBC,KAjCsC,CAAN;AAoC9B,GApCD;;AAsCAhB,EAAAA,MAAM;AACNI,EAAAA,aAAa;AAOZQ,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEF,CAjED;;AAuEA,eAAe5B,UAAf","sourcesContent":["import axios from 'axios';\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\n\r\nconst m_initial2=async(data)=>{\r\n\r\n  \r\n\r\n   //metamask\r\n   const provider = new ethers.providers.Web3Provider(window.ethereum)\r\n   await provider.send(\"eth_requestAccounts\", []);\r\n   const signer = provider.getSigner()\r\n\r\n//contract initialization \r\n\r\n const contract = require(\"./abi.json\");\r\n const mortgage_addr = '0x4324B5414fC2Ba2a0985a8DE7e2B84BF4a0c4189' \r\n const mortgage_contract = new ethers.Contract(mortgage_addr, contract.mortgage_abi,signer)\r\n\r\n//borrow function\r\nconst Borrow =async()=>{ await mortgage_contract.borrow(data.token_id,data.price)}\r\n  const Borrow_events=async()=>{ await mortgage_contract.on('MortgageItemCreated',async(tk_id,frm,price,time)=>{\r\n\r\n\r\nlet info ={\r\n   Tokenid:tk_id,\r\n   frm:frm,\r\n   nftprice:price,\r\n   time:time\r\n}\r\nconsole.log(JSON.stringify(info,null,4))\r\n\r\nconst headers = {\r\n  'Content-Type': 'application/json',      \r\n};\r\n\r\nconst result = await axios.post(\r\n  'http://localhost:3001/student/add',\r\n  {\r\n     \"token_id\":info.Tokenid,\r\n     \"address\":info.frm,\r\n     \"date\":\"23-4-2002\"+\" \"+info.time,\r\n     \"price\":info.nftprice,\r\n     \"status\":0  \r\n  },\r\n  {\r\n    headers: headers,\r\n  }\r\n);\r\n\r\n\r\n\r\n\r\n\r\n})\r\n\r\n\r\n  }\r\n\r\n  Borrow()\r\n  Borrow_events()\r\n\r\n\r\n   \r\n\r\n   \r\n\r\n   console.log('borrow finished');\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default m_initial2;\r\n\r\n"]},"metadata":{},"sourceType":"module"}