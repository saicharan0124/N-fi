{"ast":null,"code":"\"use strict\";\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _CryptoController = _interopRequireDefault(require(\"./CryptoController\"));\n\nvar _InstallationController = _interopRequireDefault(require(\"./InstallationController\"));\n\nvar ParseOp = _interopRequireWildcard(require(\"./ParseOp\"));\n\nvar _RESTController = _interopRequireDefault(require(\"./RESTController\"));\n\nvar _MoralisWeb = _interopRequireDefault(require(\"./MoralisWeb3\"));\n\nvar _ethers = require(\"ethers\");\n\nvar _filterConsole = require(\"./filterConsole\");\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-disable no-console */\n\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n\nconst {\n  checkForSdkUpdates,\n  trackEvent,\n  TrackingEventName,\n  getSubdomain\n} = require('./utils');\n/**\n * Contains all Moralis API classes and functions.\n *\n * @static\n * @global\n * @class\n * @hideconstructor\n */\n\n\nclass Moralis extends _MoralisWeb.default {\n  /**\n   * Call this method to initialize all moralis instances (Moralis, Web3Api, plugins).\n   *\n   * @param {object} options Your Moralis Application ID and Server URL. Moralis.start({serverUrl,appId})\n   * @static\n   */\n  static async start(options) {\n    const {\n      appId,\n      serverUrl,\n      plugins,\n      javascriptKey,\n      masterKey,\n      moralisSecret\n    } = options;\n    let apiKey;\n    let trackOptions; // Node environment\n\n    if (moralisSecret) {\n      this.moralisSecret = moralisSecret;\n      const {\n        web3ApiKey,\n        speedyNodeApiKey\n      } = await this.getApiKeys(moralisSecret);\n      apiKey = web3ApiKey;\n      this.speedyNodeApiKey = speedyNodeApiKey;\n    }\n\n    this.initialize(appId, javascriptKey, masterKey);\n    this.serverURL = serverUrl;\n    this.Web3API.initialize({\n      serverUrl,\n      apiKey,\n      Moralis\n    });\n    this.SolanaAPI.initialize({\n      serverUrl,\n      apiKey,\n      Moralis\n    });\n\n    if (appId && serverUrl) {\n      trackOptions = {\n        subdomain: getSubdomain(serverUrl),\n        sdk_type: 'javascript',\n        sdk_version: \"1.7.0\",\n        sdk_enviroment: \"node\",\n        appId: appId\n      };\n      await this.initPlugins(plugins);\n    } else {\n      trackOptions = {\n        sdk_type: 'javascript',\n        sdk_version: \"1.7.0\",\n        sdk_enviroment: \"node\"\n      };\n    } // Check if SDK is updated\n\n\n    checkForSdkUpdates(); // Track start function call\n\n    trackEvent(TrackingEventName.START_FUNCTION, serverUrl ? getSubdomain(serverUrl) : null, trackOptions);\n  }\n  /**\n   * Call this method to get apiKeys using moralis secret.\n   *\n   * @param {string} moralisSecret Your MoralisSecret\n   * @static\n   */\n\n\n  static async getApiKeys(moralisSecret) {\n    try {\n      const RESTController = _CoreManager.default.getRESTController();\n\n      const response = await RESTController.ajax('GET', 'https://admin.moralis.io/api/publics/apiKeys', null, {\n        'moralis-secret': moralisSecret,\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      });\n      return response.response.result;\n    } catch (error) {\n      throw new Error(`Could not fetch keys with moralisSecret`);\n    }\n  }\n  /**\n   * Call this method first to set up your authentication tokens for Moralis.\n   *\n   * @param {string} applicationId Your Moralis Application ID.\n   * @param {string} [javaScriptKey] Your Moralis JavaScript Key (Not needed for moralis-server)\n   * @param {string} [masterKey] Your Moralis Master Key. (Node.js only!)\n   * @static\n   */\n\n\n  static initialize(applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  ) {\n    Moralis._initialize(applicationId, javaScriptKey);\n  }\n\n  static _initialize(applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  , masterKey\n  /*: string*/\n  ) {\n    _CoreManager.default.set('APPLICATION_ID', applicationId);\n\n    _CoreManager.default.set('JAVASCRIPT_KEY', javaScriptKey);\n\n    _CoreManager.default.set('MASTER_KEY', masterKey);\n\n    _CoreManager.default.set('USE_MASTER_KEY', false);\n  }\n  /**\n   * Call this method to set your AsyncStorage engine\n   * Starting Parse@1.11, the ParseSDK do not provide a React AsyncStorage as the ReactNative module\n   * is not provided at a stable path and changes over versions.\n   *\n   * @param {AsyncStorage} storage a react native async storage.\n   * @static\n   */\n\n\n  static setAsyncStorage(storage\n  /*: any*/\n  ) {\n    _CoreManager.default.setAsyncStorage(storage);\n  }\n  /**\n   * Call this method to set your LocalDatastoreStorage engine\n   * If using React-Native use {@link Moralis.setAsyncStorage Moralis.setAsyncStorage()}\n   *\n   * @param {LocalDatastoreController} controller a data storage.\n   * @static\n   */\n\n\n  static setLocalDatastoreController(controller\n  /*: any*/\n  ) {\n    _CoreManager.default.setLocalDatastoreController(controller);\n  }\n  /**\n   * @member {string} Moralis.applicationId\n   * @static\n   */\n\n\n  static set applicationId(value) {\n    _CoreManager.default.set('APPLICATION_ID', value);\n  }\n\n  static get applicationId() {\n    return _CoreManager.default.get('APPLICATION_ID');\n  }\n  /**\n   * @member {string} Moralis.javaScriptKey\n   * @static\n   */\n\n\n  static set javaScriptKey(value) {\n    _CoreManager.default.set('JAVASCRIPT_KEY', value);\n  }\n\n  static get javaScriptKey() {\n    return _CoreManager.default.get('JAVASCRIPT_KEY');\n  }\n  /**\n   * @member {string} Moralis.masterKey\n   * @static\n   */\n\n\n  static set masterKey(value) {\n    _CoreManager.default.set('MASTER_KEY', value);\n  }\n\n  static get masterKey() {\n    return _CoreManager.default.get('MASTER_KEY');\n  }\n  /**\n   * @member {string} Moralis.serverURL\n   * @static\n   */\n\n\n  static set serverURL(value) {\n    _CoreManager.default.set('SERVER_URL', value);\n  }\n\n  static get serverURL() {\n    return _CoreManager.default.get('SERVER_URL');\n  }\n  /**\n   * @member {string} Moralis.serverAuthToken\n   * @static\n   */\n\n\n  static set serverAuthToken(value) {\n    _CoreManager.default.set('SERVER_AUTH_TOKEN', value);\n  }\n\n  static get serverAuthToken() {\n    return _CoreManager.default.get('SERVER_AUTH_TOKEN');\n  }\n  /**\n   * @member {string} Moralis.serverAuthType\n   * @static\n   */\n\n\n  static set serverAuthType(value) {\n    _CoreManager.default.set('SERVER_AUTH_TYPE', value);\n  }\n\n  static get serverAuthType() {\n    return _CoreManager.default.get('SERVER_AUTH_TYPE');\n  }\n  /**\n   * @member {string} Moralis.liveQueryServerURL\n   * @static\n   */\n\n\n  static set liveQueryServerURL(value) {\n    _CoreManager.default.set('LIVEQUERY_SERVER_URL', value);\n  }\n\n  static get liveQueryServerURL() {\n    return _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n  }\n  /**\n   * @member {string} Moralis.encryptedUser\n   * @static\n   */\n\n\n  static set encryptedUser(value) {\n    _CoreManager.default.set('ENCRYPTED_USER', value);\n  }\n\n  static get encryptedUser() {\n    return _CoreManager.default.get('ENCRYPTED_USER');\n  }\n  /**\n   * @member {string} Moralis.secret\n   * @static\n   */\n\n\n  static set secret(value) {\n    _CoreManager.default.set('ENCRYPTED_KEY', value);\n  }\n\n  static get secret() {\n    return _CoreManager.default.get('ENCRYPTED_KEY');\n  }\n  /**\n   * @member {boolean} Moralis.idempotency\n   * @static\n   */\n\n\n  static set idempotency(value) {\n    _CoreManager.default.set('IDEMPOTENCY', value);\n  }\n\n  static get idempotency() {\n    return _CoreManager.default.get('IDEMPOTENCY');\n  }\n\n}\n\nMoralis.ACL = require('./ParseACL').default;\nMoralis.Analytics = require('./Analytics');\nMoralis.AnonymousUtils = require('./AnonymousUtils').default;\nMoralis.Cloud = require('./Cloud');\nMoralis.CLP = require('./ParseCLP').default;\nMoralis.CoreManager = require('./CoreManager');\nMoralis.Config = require('./ParseConfig').default;\nMoralis.Error = require('./ParseError').default;\nMoralis.FacebookUtils = require('./FacebookUtils').default;\nMoralis.File = require('./ParseFile').default;\nMoralis.GeoPoint = require('./ParseGeoPoint').default;\nMoralis.Polygon = require('./ParsePolygon').default;\nMoralis.Installation = require('./ParseInstallation').default;\nMoralis.LocalDatastore = require('./LocalDatastore');\nMoralis.Object = require('./ParseObject').default;\nMoralis.Op = {\n  Set: ParseOp.SetOp,\n  Unset: ParseOp.UnsetOp,\n  Increment: ParseOp.IncrementOp,\n  Add: ParseOp.AddOp,\n  Remove: ParseOp.RemoveOp,\n  AddUnique: ParseOp.AddUniqueOp,\n  Relation: ParseOp.RelationOp\n};\nMoralis.Web3API = require('./MoralisWeb3Api').default;\nMoralis.SolanaAPI = require('./MoralisSolanaApi').default;\nMoralis.Push = require('./Push');\nMoralis.Query = require('./ParseQuery').default;\nMoralis.Relation = require('./ParseRelation').default;\nMoralis.Role = require('./ParseRole').default;\nMoralis.Schema = require('./ParseSchema').default;\nMoralis.Session = require('./ParseSession').default;\nMoralis.Storage = require('./Storage');\nMoralis.User = require('./ParseUser').default;\nMoralis.LiveQuery = require('./ParseLiveQuery').default;\nMoralis.LiveQueryClient = require('./LiveQueryClient').default;\nMoralis.Web3 = Moralis;\nMoralis.Units = require('./UnitConvert'); // Moralis.Web3 = require('./MoralisWeb3').default;\n\nMoralis.Elrond = require('./MoralisErd').default;\nMoralis.Erd = Moralis.Elrond;\nMoralis.Dot = require('./MoralisDot').default;\nMoralis.UI = require('./MoralisUI').default;\nMoralis.Chains = require('./Chains').default;\nMoralis.AbstractWeb3Connector = require('./Web3Connector/AbstractWeb3Connector').default;\n(0, _filterConsole.filterConsole)();\n\nMoralis._request = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return _CoreManager.default.getRESTController().request.apply(null, args);\n};\n\nMoralis._ajax = function () {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  return _CoreManager.default.getRESTController().ajax.apply(null, args);\n}; // We attempt to match the signatures of the legacy versions of these methods\n\n\nMoralis._decode = function (_, value) {\n  return (0, _decode.default)(value);\n};\n\nMoralis._encode = function (value, _, disallowObjects) {\n  return (0, _encode.default)(value, disallowObjects);\n};\n\nMoralis._getInstallationId = function () {\n  return _CoreManager.default.getInstallationController().currentInstallationId();\n};\n/**\n * Enable pinning in your application.\n * This must be called before your application can use pinning.\n *\n * @static\n */\n\n\nMoralis.enableLocalDatastore = function () {\n  Moralis.LocalDatastore.isEnabled = true;\n};\n/**\n * Flag that indicates whether Local Datastore is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nMoralis.isLocalDatastoreEnabled = function () {\n  return Moralis.LocalDatastore.isEnabled;\n};\n/**\n * Gets all contents from Local Datastore\n *\n * <pre>\n * await Moralis.dumpLocalDatastore();\n * </pre>\n *\n * @static\n * @returns {object}\n */\n\n\nMoralis.dumpLocalDatastore = function () {\n  if (!Moralis.LocalDatastore.isEnabled) {\n    console.log('Moralis: Moralis.enableLocalDatastore() must be called first'); // eslint-disable-line no-console\n\n    return Promise.resolve({});\n  }\n\n  return Moralis.LocalDatastore._getAllContents();\n};\n/**\n * Enable the current user encryption.\n * This must be called before login any user.\n *\n * @static\n */\n\n\nMoralis.enableEncryptedUser = function () {\n  Moralis.encryptedUser = true;\n};\n/**\n * Flag that indicates whether Encrypted User is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nMoralis.isEncryptedUserEnabled = function () {\n  return Moralis.encryptedUser;\n};\n\n_CoreManager.default.setCryptoController(_CryptoController.default);\n\n_CoreManager.default.setInstallationController(_InstallationController.default);\n\n_CoreManager.default.setRESTController(_RESTController.default);\n\nMoralis.initialize = Moralis._initialize;\nMoralis.Cloud = Moralis.Cloud || {};\n\nMoralis.Cloud.useMasterKey = function () {\n  _CoreManager.default.set('USE_MASTER_KEY', true);\n};\n\nMoralis.Hooks = require('./ParseHooks'); // For legacy requires, of the form `var Moralis = require('moralis').Moralis`\n\nMoralis.Moralis = Moralis;\nmodule.exports = Moralis;","map":{"version":3,"sources":["S:/final hackathon/nfi3/node_modules/moralis/lib/node/Parse.js"],"names":["_decode","_interopRequireDefault","require","_encode","_CoreManager","_CryptoController","_InstallationController","ParseOp","_interopRequireWildcard","_RESTController","_MoralisWeb","_ethers","_filterConsole","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","checkForSdkUpdates","trackEvent","TrackingEventName","getSubdomain","Moralis","start","options","appId","serverUrl","plugins","javascriptKey","masterKey","moralisSecret","apiKey","trackOptions","web3ApiKey","speedyNodeApiKey","getApiKeys","initialize","serverURL","Web3API","SolanaAPI","subdomain","sdk_type","sdk_version","sdk_enviroment","initPlugins","START_FUNCTION","RESTController","getRESTController","response","ajax","Accept","result","error","Error","applicationId","javaScriptKey","_initialize","setAsyncStorage","storage","setLocalDatastoreController","controller","value","serverAuthToken","serverAuthType","liveQueryServerURL","encryptedUser","secret","idempotency","ACL","Analytics","AnonymousUtils","Cloud","CLP","CoreManager","Config","FacebookUtils","File","GeoPoint","Polygon","Installation","LocalDatastore","Op","Set","SetOp","Unset","UnsetOp","Increment","IncrementOp","Add","AddOp","Remove","RemoveOp","AddUnique","AddUniqueOp","Relation","RelationOp","Push","Query","Role","Schema","Session","Storage","User","LiveQuery","LiveQueryClient","Web3","Units","Elrond","Erd","Dot","UI","Chains","AbstractWeb3Connector","filterConsole","_request","args","request","apply","_ajax","_","disallowObjects","_getInstallationId","getInstallationController","currentInstallationId","enableLocalDatastore","isEnabled","isLocalDatastoreEnabled","dumpLocalDatastore","console","log","Promise","resolve","_getAllContents","enableEncryptedUser","isEncryptedUserEnabled","setCryptoController","setInstallationController","setRESTController","useMasterKey","Hooks","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _CryptoController = _interopRequireDefault(require(\"./CryptoController\"));\n\nvar _InstallationController = _interopRequireDefault(require(\"./InstallationController\"));\n\nvar ParseOp = _interopRequireWildcard(require(\"./ParseOp\"));\n\nvar _RESTController = _interopRequireDefault(require(\"./RESTController\"));\n\nvar _MoralisWeb = _interopRequireDefault(require(\"./MoralisWeb3\"));\n\nvar _ethers = require(\"ethers\");\n\nvar _filterConsole = require(\"./filterConsole\");\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/* eslint-disable no-console */\n\n/**\n * Copyright (c) 2015-present, Parse, LLC.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n */\n\n\nconst {\n  checkForSdkUpdates,\n  trackEvent,\n  TrackingEventName,\n  getSubdomain\n} = require('./utils');\n/**\n * Contains all Moralis API classes and functions.\n *\n * @static\n * @global\n * @class\n * @hideconstructor\n */\n\n\nclass Moralis extends _MoralisWeb.default {\n  /**\n   * Call this method to initialize all moralis instances (Moralis, Web3Api, plugins).\n   *\n   * @param {object} options Your Moralis Application ID and Server URL. Moralis.start({serverUrl,appId})\n   * @static\n   */\n  static async start(options) {\n    const {\n      appId,\n      serverUrl,\n      plugins,\n      javascriptKey,\n      masterKey,\n      moralisSecret\n    } = options;\n    let apiKey;\n    let trackOptions;\n\n    // Node environment\n    if (moralisSecret) {\n      this.moralisSecret = moralisSecret;\n      const {\n        web3ApiKey,\n        speedyNodeApiKey\n      } = await this.getApiKeys(moralisSecret);\n      apiKey = web3ApiKey;\n      this.speedyNodeApiKey = speedyNodeApiKey;\n    }\n\n    this.initialize(appId, javascriptKey, masterKey);\n    this.serverURL = serverUrl;\n    this.Web3API.initialize({\n      serverUrl,\n      apiKey,\n      Moralis\n    });\n    this.SolanaAPI.initialize({\n      serverUrl,\n      apiKey,\n      Moralis\n    });\n\n    if (appId && serverUrl) {\n      trackOptions = {\n        subdomain: getSubdomain(serverUrl),\n        sdk_type: 'javascript',\n        sdk_version: \"1.7.0\",\n        sdk_enviroment: \"node\",\n        appId: appId\n      };\n      await this.initPlugins(plugins);\n    } else {\n      trackOptions = {\n        sdk_type: 'javascript',\n        sdk_version: \"1.7.0\",\n        sdk_enviroment: \"node\"\n      };\n    } // Check if SDK is updated\n\n\n    checkForSdkUpdates(); // Track start function call\n\n    trackEvent(TrackingEventName.START_FUNCTION, serverUrl ? getSubdomain(serverUrl) : null, trackOptions);\n  }\n  /**\n   * Call this method to get apiKeys using moralis secret.\n   *\n   * @param {string} moralisSecret Your MoralisSecret\n   * @static\n   */\n\n\n  static async getApiKeys(moralisSecret) {\n    try {\n      const RESTController = _CoreManager.default.getRESTController();\n\n      const response = await RESTController.ajax('GET', 'https://admin.moralis.io/api/publics/apiKeys', null, {\n        'moralis-secret': moralisSecret,\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      });\n      return response.response.result;\n    } catch (error) {\n      throw new Error(`Could not fetch keys with moralisSecret`);\n    }\n  }\n  /**\n   * Call this method first to set up your authentication tokens for Moralis.\n   *\n   * @param {string} applicationId Your Moralis Application ID.\n   * @param {string} [javaScriptKey] Your Moralis JavaScript Key (Not needed for moralis-server)\n   * @param {string} [masterKey] Your Moralis Master Key. (Node.js only!)\n   * @static\n   */\n\n\n  static initialize(applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  ) {\n    Moralis._initialize(applicationId, javaScriptKey);\n  }\n\n  static _initialize(applicationId\n  /*: string*/\n  , javaScriptKey\n  /*: string*/\n  , masterKey\n  /*: string*/\n  ) {\n    _CoreManager.default.set('APPLICATION_ID', applicationId);\n\n    _CoreManager.default.set('JAVASCRIPT_KEY', javaScriptKey);\n\n    _CoreManager.default.set('MASTER_KEY', masterKey);\n\n    _CoreManager.default.set('USE_MASTER_KEY', false);\n  }\n  /**\n   * Call this method to set your AsyncStorage engine\n   * Starting Parse@1.11, the ParseSDK do not provide a React AsyncStorage as the ReactNative module\n   * is not provided at a stable path and changes over versions.\n   *\n   * @param {AsyncStorage} storage a react native async storage.\n   * @static\n   */\n\n\n  static setAsyncStorage(storage\n  /*: any*/\n  ) {\n    _CoreManager.default.setAsyncStorage(storage);\n  }\n  /**\n   * Call this method to set your LocalDatastoreStorage engine\n   * If using React-Native use {@link Moralis.setAsyncStorage Moralis.setAsyncStorage()}\n   *\n   * @param {LocalDatastoreController} controller a data storage.\n   * @static\n   */\n\n\n  static setLocalDatastoreController(controller\n  /*: any*/\n  ) {\n    _CoreManager.default.setLocalDatastoreController(controller);\n  }\n  /**\n   * @member {string} Moralis.applicationId\n   * @static\n   */\n\n\n  static set applicationId(value) {\n    _CoreManager.default.set('APPLICATION_ID', value);\n  }\n\n  static get applicationId() {\n    return _CoreManager.default.get('APPLICATION_ID');\n  }\n  /**\n   * @member {string} Moralis.javaScriptKey\n   * @static\n   */\n\n\n  static set javaScriptKey(value) {\n    _CoreManager.default.set('JAVASCRIPT_KEY', value);\n  }\n\n  static get javaScriptKey() {\n    return _CoreManager.default.get('JAVASCRIPT_KEY');\n  }\n  /**\n   * @member {string} Moralis.masterKey\n   * @static\n   */\n\n\n  static set masterKey(value) {\n    _CoreManager.default.set('MASTER_KEY', value);\n  }\n\n  static get masterKey() {\n    return _CoreManager.default.get('MASTER_KEY');\n  }\n  /**\n   * @member {string} Moralis.serverURL\n   * @static\n   */\n\n\n  static set serverURL(value) {\n    _CoreManager.default.set('SERVER_URL', value);\n  }\n\n  static get serverURL() {\n    return _CoreManager.default.get('SERVER_URL');\n  }\n  /**\n   * @member {string} Moralis.serverAuthToken\n   * @static\n   */\n\n\n  static set serverAuthToken(value) {\n    _CoreManager.default.set('SERVER_AUTH_TOKEN', value);\n  }\n\n  static get serverAuthToken() {\n    return _CoreManager.default.get('SERVER_AUTH_TOKEN');\n  }\n  /**\n   * @member {string} Moralis.serverAuthType\n   * @static\n   */\n\n\n  static set serverAuthType(value) {\n    _CoreManager.default.set('SERVER_AUTH_TYPE', value);\n  }\n\n  static get serverAuthType() {\n    return _CoreManager.default.get('SERVER_AUTH_TYPE');\n  }\n  /**\n   * @member {string} Moralis.liveQueryServerURL\n   * @static\n   */\n\n\n  static set liveQueryServerURL(value) {\n    _CoreManager.default.set('LIVEQUERY_SERVER_URL', value);\n  }\n\n  static get liveQueryServerURL() {\n    return _CoreManager.default.get('LIVEQUERY_SERVER_URL');\n  }\n  /**\n   * @member {string} Moralis.encryptedUser\n   * @static\n   */\n\n\n  static set encryptedUser(value) {\n    _CoreManager.default.set('ENCRYPTED_USER', value);\n  }\n\n  static get encryptedUser() {\n    return _CoreManager.default.get('ENCRYPTED_USER');\n  }\n  /**\n   * @member {string} Moralis.secret\n   * @static\n   */\n\n\n  static set secret(value) {\n    _CoreManager.default.set('ENCRYPTED_KEY', value);\n  }\n\n  static get secret() {\n    return _CoreManager.default.get('ENCRYPTED_KEY');\n  }\n  /**\n   * @member {boolean} Moralis.idempotency\n   * @static\n   */\n\n\n  static set idempotency(value) {\n    _CoreManager.default.set('IDEMPOTENCY', value);\n  }\n\n  static get idempotency() {\n    return _CoreManager.default.get('IDEMPOTENCY');\n  }\n\n}\n\nMoralis.ACL = require('./ParseACL').default;\nMoralis.Analytics = require('./Analytics');\nMoralis.AnonymousUtils = require('./AnonymousUtils').default;\nMoralis.Cloud = require('./Cloud');\nMoralis.CLP = require('./ParseCLP').default;\nMoralis.CoreManager = require('./CoreManager');\nMoralis.Config = require('./ParseConfig').default;\nMoralis.Error = require('./ParseError').default;\nMoralis.FacebookUtils = require('./FacebookUtils').default;\nMoralis.File = require('./ParseFile').default;\nMoralis.GeoPoint = require('./ParseGeoPoint').default;\nMoralis.Polygon = require('./ParsePolygon').default;\nMoralis.Installation = require('./ParseInstallation').default;\nMoralis.LocalDatastore = require('./LocalDatastore');\nMoralis.Object = require('./ParseObject').default;\nMoralis.Op = {\n  Set: ParseOp.SetOp,\n  Unset: ParseOp.UnsetOp,\n  Increment: ParseOp.IncrementOp,\n  Add: ParseOp.AddOp,\n  Remove: ParseOp.RemoveOp,\n  AddUnique: ParseOp.AddUniqueOp,\n  Relation: ParseOp.RelationOp\n};\nMoralis.Web3API = require('./MoralisWeb3Api').default;\nMoralis.SolanaAPI = require('./MoralisSolanaApi').default;\nMoralis.Push = require('./Push');\nMoralis.Query = require('./ParseQuery').default;\nMoralis.Relation = require('./ParseRelation').default;\nMoralis.Role = require('./ParseRole').default;\nMoralis.Schema = require('./ParseSchema').default;\nMoralis.Session = require('./ParseSession').default;\nMoralis.Storage = require('./Storage');\nMoralis.User = require('./ParseUser').default;\nMoralis.LiveQuery = require('./ParseLiveQuery').default;\nMoralis.LiveQueryClient = require('./LiveQueryClient').default;\nMoralis.Web3 = Moralis;\nMoralis.Units = require('./UnitConvert'); // Moralis.Web3 = require('./MoralisWeb3').default;\n\nMoralis.Elrond = require('./MoralisErd').default;\nMoralis.Erd = Moralis.Elrond;\nMoralis.Dot = require('./MoralisDot').default;\nMoralis.UI = require('./MoralisUI').default;\nMoralis.Chains = require('./Chains').default;\nMoralis.AbstractWeb3Connector = require('./Web3Connector/AbstractWeb3Connector').default;\n(0, _filterConsole.filterConsole)();\n\nMoralis._request = function (...args) {\n  return _CoreManager.default.getRESTController().request.apply(null, args);\n};\n\nMoralis._ajax = function (...args) {\n  return _CoreManager.default.getRESTController().ajax.apply(null, args);\n}; // We attempt to match the signatures of the legacy versions of these methods\n\n\nMoralis._decode = function (_, value) {\n  return (0, _decode.default)(value);\n};\n\nMoralis._encode = function (value, _, disallowObjects) {\n  return (0, _encode.default)(value, disallowObjects);\n};\n\nMoralis._getInstallationId = function () {\n  return _CoreManager.default.getInstallationController().currentInstallationId();\n};\n/**\n * Enable pinning in your application.\n * This must be called before your application can use pinning.\n *\n * @static\n */\n\n\nMoralis.enableLocalDatastore = function () {\n  Moralis.LocalDatastore.isEnabled = true;\n};\n/**\n * Flag that indicates whether Local Datastore is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nMoralis.isLocalDatastoreEnabled = function () {\n  return Moralis.LocalDatastore.isEnabled;\n};\n/**\n * Gets all contents from Local Datastore\n *\n * <pre>\n * await Moralis.dumpLocalDatastore();\n * </pre>\n *\n * @static\n * @returns {object}\n */\n\n\nMoralis.dumpLocalDatastore = function () {\n  if (!Moralis.LocalDatastore.isEnabled) {\n    console.log('Moralis: Moralis.enableLocalDatastore() must be called first'); // eslint-disable-line no-console\n\n    return Promise.resolve({});\n  }\n\n  return Moralis.LocalDatastore._getAllContents();\n};\n/**\n * Enable the current user encryption.\n * This must be called before login any user.\n *\n * @static\n */\n\n\nMoralis.enableEncryptedUser = function () {\n  Moralis.encryptedUser = true;\n};\n/**\n * Flag that indicates whether Encrypted User is enabled.\n *\n * @static\n * @returns {boolean}\n */\n\n\nMoralis.isEncryptedUserEnabled = function () {\n  return Moralis.encryptedUser;\n};\n\n_CoreManager.default.setCryptoController(_CryptoController.default);\n\n_CoreManager.default.setInstallationController(_InstallationController.default);\n\n_CoreManager.default.setRESTController(_RESTController.default);\n\nMoralis.initialize = Moralis._initialize;\nMoralis.Cloud = Moralis.Cloud || {};\n\nMoralis.Cloud.useMasterKey = function () {\n  _CoreManager.default.set('USE_MASTER_KEY', true);\n};\n\nMoralis.Hooks = require('./ParseHooks'); // For legacy requires, of the form `var Moralis = require('moralis').Moralis`\n\nMoralis.Moralis = Moralis;\nmodule.exports = Moralis;"]},"metadata":{},"sourceType":"script"}